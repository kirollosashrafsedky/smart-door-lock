
doorLock_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000233c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  0000233c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  0080023c  0080023c  000025ac  2**0
                  ALLOC
  3 .stab         00003384  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002796  00000000  00000000  00005930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000080c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b5  00000000  00000000  00008226  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d07  00000000  00000000  000083db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001011  00000000  00000000  0000a0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eca  00000000  00000000  0000b0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bfc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c7  00000000  00000000  0000c140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000082e  00000000  00000000  0000c407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__vector_3>
      10:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_8>
      24:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 36       	cpi	r26, 0x6A	; 106
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 11 	call	0x2246	; 0x2246 <main>
      8a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e2       	ldi	r26, 0x2A	; 42
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__stack+0x27>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__stack+0x123>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__stack+0x31>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__stack+0x129>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__stack+0x4d>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__stack+0x47>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__stack+0x123>
     4a6:	6a e2       	ldi	r22, 0x2A	; 42
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__stack+0x129>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__stack+0x5f>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__stack+0x6b>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__stack+0x129>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__stack+0xa5>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__stack+0xd3>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__stack+0xb9>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__stack+0x11b>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__stack+0x11b>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__stack+0x11b>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__epilogue_restores__+0x10>

00000596 <__nesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__nesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__nesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__nesf2+0x58>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000005f6 <__gesf2>:
     5f6:	a8 e1       	ldi	r26, 0x18	; 24
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	89 e0       	ldi	r24, 0x09	; 9
     614:	e8 2e       	mov	r14, r24
     616:	f1 2c       	mov	r15, r1
     618:	ec 0e       	add	r14, r28
     61a:	fd 1e       	adc	r15, r29
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	b7 01       	movw	r22, r14
     622:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     626:	8e 01       	movw	r16, r28
     628:	0f 5e       	subi	r16, 0xEF	; 239
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
     62c:	ce 01       	movw	r24, r28
     62e:	05 96       	adiw	r24, 0x05	; 5
     630:	b8 01       	movw	r22, r16
     632:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     636:	89 85       	ldd	r24, Y+9	; 0x09
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	40 f0       	brcs	.+16     	; 0x64c <__gesf2+0x56>
     63c:	89 89       	ldd	r24, Y+17	; 0x11
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	28 f0       	brcs	.+10     	; 0x64c <__gesf2+0x56>
     642:	c7 01       	movw	r24, r14
     644:	b8 01       	movw	r22, r16
     646:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     64a:	01 c0       	rjmp	.+2      	; 0x64e <__gesf2+0x58>
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	68 96       	adiw	r28, 0x18	; 24
     650:	e6 e0       	ldi	r30, 0x06	; 6
     652:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000656 <__fixsfsi>:
     656:	ac e0       	ldi	r26, 0x0C	; 12
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e1 e3       	ldi	r30, 0x31	; 49
     65c:	f3 e0       	ldi	r31, 0x03	; 3
     65e:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
     662:	69 83       	std	Y+1, r22	; 0x01
     664:	7a 83       	std	Y+2, r23	; 0x02
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	9c 83       	std	Y+4, r25	; 0x04
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	be 01       	movw	r22, r28
     670:	6b 5f       	subi	r22, 0xFB	; 251
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	61 f1       	breq	.+88     	; 0x6d6 <__fixsfsi+0x80>
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	50 f1       	brcs	.+84     	; 0x6d6 <__fixsfsi+0x80>
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	21 f4       	brne	.+8      	; 0x68e <__fixsfsi+0x38>
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	88 23       	and	r24, r24
     68a:	51 f1       	breq	.+84     	; 0x6e0 <__fixsfsi+0x8a>
     68c:	2e c0       	rjmp	.+92     	; 0x6ea <__fixsfsi+0x94>
     68e:	2f 81       	ldd	r18, Y+7	; 0x07
     690:	38 85       	ldd	r19, Y+8	; 0x08
     692:	37 fd       	sbrc	r19, 7
     694:	20 c0       	rjmp	.+64     	; 0x6d6 <__fixsfsi+0x80>
     696:	6e 81       	ldd	r22, Y+6	; 0x06
     698:	2f 31       	cpi	r18, 0x1F	; 31
     69a:	31 05       	cpc	r19, r1
     69c:	1c f0       	brlt	.+6      	; 0x6a4 <__fixsfsi+0x4e>
     69e:	66 23       	and	r22, r22
     6a0:	f9 f0       	breq	.+62     	; 0x6e0 <__fixsfsi+0x8a>
     6a2:	23 c0       	rjmp	.+70     	; 0x6ea <__fixsfsi+0x94>
     6a4:	8e e1       	ldi	r24, 0x1E	; 30
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	82 1b       	sub	r24, r18
     6aa:	93 0b       	sbc	r25, r19
     6ac:	29 85       	ldd	r18, Y+9	; 0x09
     6ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     6b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     6b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__fixsfsi+0x68>
     6b6:	56 95       	lsr	r21
     6b8:	47 95       	ror	r20
     6ba:	37 95       	ror	r19
     6bc:	27 95       	ror	r18
     6be:	8a 95       	dec	r24
     6c0:	d2 f7       	brpl	.-12     	; 0x6b6 <__fixsfsi+0x60>
     6c2:	66 23       	and	r22, r22
     6c4:	b1 f0       	breq	.+44     	; 0x6f2 <__fixsfsi+0x9c>
     6c6:	50 95       	com	r21
     6c8:	40 95       	com	r20
     6ca:	30 95       	com	r19
     6cc:	21 95       	neg	r18
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	4f 4f       	sbci	r20, 0xFF	; 255
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <__fixsfsi+0x9c>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <__fixsfsi+0x9c>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	5f e7       	ldi	r21, 0x7F	; 127
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fixsfsi+0x9c>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e8       	ldi	r21, 0x80	; 128
     6f2:	b9 01       	movw	r22, r18
     6f4:	ca 01       	movw	r24, r20
     6f6:	2c 96       	adiw	r28, 0x0c	; 12
     6f8:	e2 e0       	ldi	r30, 0x02	; 2
     6fa:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000006fe <__floatunsisf>:
     6fe:	a8 e0       	ldi	r26, 0x08	; 8
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e8       	ldi	r30, 0x85	; 133
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__prologue_saves__+0x10>
     70a:	7b 01       	movw	r14, r22
     70c:	8c 01       	movw	r16, r24
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	81 05       	cpc	r24, r1
     714:	91 05       	cpc	r25, r1
     716:	19 f4       	brne	.+6      	; 0x71e <__floatunsisf+0x20>
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	60 c0       	rjmp	.+192    	; 0x7de <__floatunsisf+0xe0>
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	8e e1       	ldi	r24, 0x1E	; 30
     724:	c8 2e       	mov	r12, r24
     726:	d1 2c       	mov	r13, r1
     728:	dc 82       	std	Y+4, r13	; 0x04
     72a:	cb 82       	std	Y+3, r12	; 0x03
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__clzsi2>
     73c:	fc 01       	movw	r30, r24
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f7 ff       	sbrs	r31, 7
     742:	3b c0       	rjmp	.+118    	; 0x7ba <__floatunsisf+0xbc>
     744:	22 27       	eor	r18, r18
     746:	33 27       	eor	r19, r19
     748:	2e 1b       	sub	r18, r30
     74a:	3f 0b       	sbc	r19, r31
     74c:	57 01       	movw	r10, r14
     74e:	68 01       	movw	r12, r16
     750:	02 2e       	mov	r0, r18
     752:	04 c0       	rjmp	.+8      	; 0x75c <__floatunsisf+0x5e>
     754:	d6 94       	lsr	r13
     756:	c7 94       	ror	r12
     758:	b7 94       	ror	r11
     75a:	a7 94       	ror	r10
     75c:	0a 94       	dec	r0
     75e:	d2 f7       	brpl	.-12     	; 0x754 <__floatunsisf+0x56>
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	04 c0       	rjmp	.+8      	; 0x77a <__floatunsisf+0x7c>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	2a 95       	dec	r18
     77c:	d2 f7       	brpl	.-12     	; 0x772 <__floatunsisf+0x74>
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	a1 09       	sbc	r26, r1
     782:	b1 09       	sbc	r27, r1
     784:	8e 21       	and	r24, r14
     786:	9f 21       	and	r25, r15
     788:	a0 23       	and	r26, r16
     78a:	b1 23       	and	r27, r17
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	a1 05       	cpc	r26, r1
     790:	b1 05       	cpc	r27, r1
     792:	21 f0       	breq	.+8      	; 0x79c <__floatunsisf+0x9e>
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	4a 29       	or	r20, r10
     79e:	5b 29       	or	r21, r11
     7a0:	6c 29       	or	r22, r12
     7a2:	7d 29       	or	r23, r13
     7a4:	4d 83       	std	Y+5, r20	; 0x05
     7a6:	5e 83       	std	Y+6, r21	; 0x06
     7a8:	6f 83       	std	Y+7, r22	; 0x07
     7aa:	78 87       	std	Y+8, r23	; 0x08
     7ac:	8e e1       	ldi	r24, 0x1E	; 30
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8e 1b       	sub	r24, r30
     7b2:	9f 0b       	sbc	r25, r31
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	8b 83       	std	Y+3, r24	; 0x03
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <__floatunsisf+0xe0>
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	81 f0       	breq	.+32     	; 0x7de <__floatunsisf+0xe0>
     7be:	0e 2e       	mov	r0, r30
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <__floatunsisf+0xcc>
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	00 1f       	adc	r16, r16
     7c8:	11 1f       	adc	r17, r17
     7ca:	0a 94       	dec	r0
     7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <__floatunsisf+0xc4>
     7ce:	ed 82       	std	Y+5, r14	; 0x05
     7d0:	fe 82       	std	Y+6, r15	; 0x06
     7d2:	0f 83       	std	Y+7, r16	; 0x07
     7d4:	18 87       	std	Y+8, r17	; 0x08
     7d6:	ce 1a       	sub	r12, r30
     7d8:	df 0a       	sbc	r13, r31
     7da:	dc 82       	std	Y+4, r13	; 0x04
     7dc:	cb 82       	std	Y+3, r12	; 0x03
     7de:	1a 82       	std	Y+2, r1	; 0x02
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     7e8:	28 96       	adiw	r28, 0x08	; 8
     7ea:	ea e0       	ldi	r30, 0x0A	; 10
     7ec:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__epilogue_restores__+0x10>

000007f0 <__clzsi2>:
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	7b 01       	movw	r14, r22
     7fa:	8c 01       	movw	r16, r24
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	e8 16       	cp	r14, r24
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	f8 06       	cpc	r15, r24
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 07       	cpc	r16, r24
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	18 07       	cpc	r17, r24
     80c:	88 f4       	brcc	.+34     	; 0x830 <__clzsi2+0x40>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	e8 16       	cp	r14, r24
     812:	f1 04       	cpc	r15, r1
     814:	01 05       	cpc	r16, r1
     816:	11 05       	cpc	r17, r1
     818:	31 f0       	breq	.+12     	; 0x826 <__clzsi2+0x36>
     81a:	28 f0       	brcs	.+10     	; 0x826 <__clzsi2+0x36>
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	17 c0       	rjmp	.+46     	; 0x854 <__clzsi2+0x64>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	12 c0       	rjmp	.+36     	; 0x854 <__clzsi2+0x64>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	e8 16       	cp	r14, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	f8 06       	cpc	r15, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 07       	cpc	r16, r24
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	18 07       	cpc	r17, r24
     840:	28 f0       	brcs	.+10     	; 0x84c <__clzsi2+0x5c>
     842:	88 e1       	ldi	r24, 0x18	; 24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	04 c0       	rjmp	.+8      	; 0x854 <__clzsi2+0x64>
     84c:	80 e1       	ldi	r24, 0x10	; 16
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	20 e2       	ldi	r18, 0x20	; 32
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	28 1b       	sub	r18, r24
     85e:	39 0b       	sbc	r19, r25
     860:	4a 0b       	sbc	r20, r26
     862:	5b 0b       	sbc	r21, r27
     864:	04 c0       	rjmp	.+8      	; 0x86e <__clzsi2+0x7e>
     866:	16 95       	lsr	r17
     868:	07 95       	ror	r16
     86a:	f7 94       	ror	r15
     86c:	e7 94       	ror	r14
     86e:	8a 95       	dec	r24
     870:	d2 f7       	brpl	.-12     	; 0x866 <__clzsi2+0x76>
     872:	f7 01       	movw	r30, r14
     874:	ee 5c       	subi	r30, 0xCE	; 206
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	80 81       	ld	r24, Z
     87a:	28 1b       	sub	r18, r24
     87c:	31 09       	sbc	r19, r1
     87e:	41 09       	sbc	r20, r1
     880:	51 09       	sbc	r21, r1
     882:	c9 01       	movw	r24, r18
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret

0000088e <__pack_f>:
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	fc 01       	movw	r30, r24
     89a:	e4 80       	ldd	r14, Z+4	; 0x04
     89c:	f5 80       	ldd	r15, Z+5	; 0x05
     89e:	06 81       	ldd	r16, Z+6	; 0x06
     8a0:	17 81       	ldd	r17, Z+7	; 0x07
     8a2:	d1 80       	ldd	r13, Z+1	; 0x01
     8a4:	80 81       	ld	r24, Z
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <__pack_f+0x2e>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 e1       	ldi	r26, 0x10	; 16
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e8 2a       	or	r14, r24
     8b4:	f9 2a       	or	r15, r25
     8b6:	0a 2b       	or	r16, r26
     8b8:	1b 2b       	or	r17, r27
     8ba:	a5 c0       	rjmp	.+330    	; 0xa06 <__pack_f+0x178>
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	09 f4       	brne	.+2      	; 0x8c2 <__pack_f+0x34>
     8c0:	9f c0       	rjmp	.+318    	; 0xa00 <__pack_f+0x172>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	21 f4       	brne	.+8      	; 0x8ce <__pack_f+0x40>
     8c6:	ee 24       	eor	r14, r14
     8c8:	ff 24       	eor	r15, r15
     8ca:	87 01       	movw	r16, r14
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__pack_f+0x4a>
     8ce:	e1 14       	cp	r14, r1
     8d0:	f1 04       	cpc	r15, r1
     8d2:	01 05       	cpc	r16, r1
     8d4:	11 05       	cpc	r17, r1
     8d6:	19 f4       	brne	.+6      	; 0x8de <__pack_f+0x50>
     8d8:	e0 e0       	ldi	r30, 0x00	; 0
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	96 c0       	rjmp	.+300    	; 0xa0a <__pack_f+0x17c>
     8de:	62 81       	ldd	r22, Z+2	; 0x02
     8e0:	73 81       	ldd	r23, Z+3	; 0x03
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	62 38       	cpi	r22, 0x82	; 130
     8e6:	79 07       	cpc	r23, r25
     8e8:	0c f0       	brlt	.+2      	; 0x8ec <__pack_f+0x5e>
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <__pack_f+0x114>
     8ec:	22 e8       	ldi	r18, 0x82	; 130
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	26 1b       	sub	r18, r22
     8f2:	37 0b       	sbc	r19, r23
     8f4:	2a 31       	cpi	r18, 0x1A	; 26
     8f6:	31 05       	cpc	r19, r1
     8f8:	2c f0       	brlt	.+10     	; 0x904 <__pack_f+0x76>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	2a c0       	rjmp	.+84     	; 0x958 <__pack_f+0xca>
     904:	b8 01       	movw	r22, r16
     906:	a7 01       	movw	r20, r14
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__pack_f+0x86>
     90c:	76 95       	lsr	r23
     90e:	67 95       	ror	r22
     910:	57 95       	ror	r21
     912:	47 95       	ror	r20
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__pack_f+0x7e>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <__pack_f+0x9c>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	aa 1f       	adc	r26, r26
     928:	bb 1f       	adc	r27, r27
     92a:	2a 95       	dec	r18
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__pack_f+0x94>
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
     934:	8e 21       	and	r24, r14
     936:	9f 21       	and	r25, r15
     938:	a0 23       	and	r26, r16
     93a:	b1 23       	and	r27, r17
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	a1 05       	cpc	r26, r1
     940:	b1 05       	cpc	r27, r1
     942:	21 f0       	breq	.+8      	; 0x94c <__pack_f+0xbe>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	9a 01       	movw	r18, r20
     94e:	ab 01       	movw	r20, r22
     950:	28 2b       	or	r18, r24
     952:	39 2b       	or	r19, r25
     954:	4a 2b       	or	r20, r26
     956:	5b 2b       	or	r21, r27
     958:	da 01       	movw	r26, r20
     95a:	c9 01       	movw	r24, r18
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	90 70       	andi	r25, 0x00	; 0
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	80 34       	cpi	r24, 0x40	; 64
     966:	91 05       	cpc	r25, r1
     968:	a1 05       	cpc	r26, r1
     96a:	b1 05       	cpc	r27, r1
     96c:	39 f4       	brne	.+14     	; 0x97c <__pack_f+0xee>
     96e:	27 ff       	sbrs	r18, 7
     970:	09 c0       	rjmp	.+18     	; 0x984 <__pack_f+0xf6>
     972:	20 5c       	subi	r18, 0xC0	; 192
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	4f 4f       	sbci	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__pack_f+0xf6>
     97c:	21 5c       	subi	r18, 0xC1	; 193
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	20 30       	cpi	r18, 0x00	; 0
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	3a 07       	cpc	r19, r26
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	4a 07       	cpc	r20, r26
     992:	a0 e4       	ldi	r26, 0x40	; 64
     994:	5a 07       	cpc	r21, r26
     996:	10 f0       	brcs	.+4      	; 0x99c <__pack_f+0x10e>
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	79 01       	movw	r14, r18
     99e:	8a 01       	movw	r16, r20
     9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <__pack_f+0x162>
     9a2:	60 38       	cpi	r22, 0x80	; 128
     9a4:	71 05       	cpc	r23, r1
     9a6:	64 f5       	brge	.+88     	; 0xa00 <__pack_f+0x172>
     9a8:	fb 01       	movw	r30, r22
     9aa:	e1 58       	subi	r30, 0x81	; 129
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	d8 01       	movw	r26, r16
     9b0:	c7 01       	movw	r24, r14
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	a0 70       	andi	r26, 0x00	; 0
     9b8:	b0 70       	andi	r27, 0x00	; 0
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	91 05       	cpc	r25, r1
     9be:	a1 05       	cpc	r26, r1
     9c0:	b1 05       	cpc	r27, r1
     9c2:	39 f4       	brne	.+14     	; 0x9d2 <__pack_f+0x144>
     9c4:	e7 fe       	sbrs	r14, 7
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__pack_f+0x154>
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x14c>
     9d2:	8f e3       	ldi	r24, 0x3F	; 63
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 0e       	add	r14, r24
     9dc:	f9 1e       	adc	r15, r25
     9de:	0a 1f       	adc	r16, r26
     9e0:	1b 1f       	adc	r17, r27
     9e2:	17 ff       	sbrs	r17, 7
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__pack_f+0x162>
     9e6:	16 95       	lsr	r17
     9e8:	07 95       	ror	r16
     9ea:	f7 94       	ror	r15
     9ec:	e7 94       	ror	r14
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	16 95       	lsr	r17
     9f4:	07 95       	ror	r16
     9f6:	f7 94       	ror	r15
     9f8:	e7 94       	ror	r14
     9fa:	8a 95       	dec	r24
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <__pack_f+0x164>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__pack_f+0x17c>
     a00:	ee 24       	eor	r14, r14
     a02:	ff 24       	eor	r15, r15
     a04:	87 01       	movw	r16, r14
     a06:	ef ef       	ldi	r30, 0xFF	; 255
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	6e 2f       	mov	r22, r30
     a0c:	67 95       	ror	r22
     a0e:	66 27       	eor	r22, r22
     a10:	67 95       	ror	r22
     a12:	90 2f       	mov	r25, r16
     a14:	9f 77       	andi	r25, 0x7F	; 127
     a16:	d7 94       	ror	r13
     a18:	dd 24       	eor	r13, r13
     a1a:	d7 94       	ror	r13
     a1c:	8e 2f       	mov	r24, r30
     a1e:	86 95       	lsr	r24
     a20:	49 2f       	mov	r20, r25
     a22:	46 2b       	or	r20, r22
     a24:	58 2f       	mov	r21, r24
     a26:	5d 29       	or	r21, r13
     a28:	b7 01       	movw	r22, r14
     a2a:	ca 01       	movw	r24, r20
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	08 95       	ret

00000a38 <__unpack_f>:
     a38:	fc 01       	movw	r30, r24
     a3a:	db 01       	movw	r26, r22
     a3c:	40 81       	ld	r20, Z
     a3e:	51 81       	ldd	r21, Z+1	; 0x01
     a40:	22 81       	ldd	r18, Z+2	; 0x02
     a42:	62 2f       	mov	r22, r18
     a44:	6f 77       	andi	r22, 0x7F	; 127
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	22 1f       	adc	r18, r18
     a4a:	22 27       	eor	r18, r18
     a4c:	22 1f       	adc	r18, r18
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	89 2f       	mov	r24, r25
     a52:	88 0f       	add	r24, r24
     a54:	82 2b       	or	r24, r18
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	99 1f       	adc	r25, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	99 1f       	adc	r25, r25
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	9c 93       	st	X, r25
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	21 15       	cp	r18, r1
     a68:	31 05       	cpc	r19, r1
     a6a:	a9 f5       	brne	.+106    	; 0xad6 <__unpack_f+0x9e>
     a6c:	41 15       	cp	r20, r1
     a6e:	51 05       	cpc	r21, r1
     a70:	61 05       	cpc	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	11 f4       	brne	.+4      	; 0xa7a <__unpack_f+0x42>
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	37 c0       	rjmp	.+110    	; 0xae8 <__unpack_f+0xb0>
     a7a:	82 e8       	ldi	r24, 0x82	; 130
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	9c 93       	st	X, r25
     a82:	8e 93       	st	-X, r24
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	9a 01       	movw	r18, r20
     a88:	ab 01       	movw	r20, r22
     a8a:	67 e0       	ldi	r22, 0x07	; 7
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	44 1f       	adc	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	6a 95       	dec	r22
     a96:	d1 f7       	brne	.-12     	; 0xa8c <__unpack_f+0x54>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	8c 93       	st	X, r24
     a9c:	0d c0       	rjmp	.+26     	; 0xab8 <__unpack_f+0x80>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	44 1f       	adc	r20, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	8d 91       	ld	r24, X+
     aaa:	9c 91       	ld	r25, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	9c 93       	st	X, r25
     ab4:	8e 93       	st	-X, r24
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	20 30       	cpi	r18, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	38 07       	cpc	r19, r24
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	48 07       	cpc	r20, r24
     ac2:	80 e4       	ldi	r24, 0x40	; 64
     ac4:	58 07       	cpc	r21, r24
     ac6:	58 f3       	brcs	.-42     	; 0xa9e <__unpack_f+0x66>
     ac8:	14 96       	adiw	r26, 0x04	; 4
     aca:	2d 93       	st	X+, r18
     acc:	3d 93       	st	X+, r19
     ace:	4d 93       	st	X+, r20
     ad0:	5c 93       	st	X, r21
     ad2:	17 97       	sbiw	r26, 0x07	; 7
     ad4:	08 95       	ret
     ad6:	2f 3f       	cpi	r18, 0xFF	; 255
     ad8:	31 05       	cpc	r19, r1
     ada:	79 f4       	brne	.+30     	; 0xafa <__unpack_f+0xc2>
     adc:	41 15       	cp	r20, r1
     ade:	51 05       	cpc	r21, r1
     ae0:	61 05       	cpc	r22, r1
     ae2:	71 05       	cpc	r23, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__unpack_f+0xb4>
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	8c 93       	st	X, r24
     aea:	08 95       	ret
     aec:	64 ff       	sbrs	r22, 4
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <__unpack_f+0xbe>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8c 93       	st	X, r24
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <__unpack_f+0xe2>
     af6:	1c 92       	st	X, r1
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <__unpack_f+0xe2>
     afa:	2f 57       	subi	r18, 0x7F	; 127
     afc:	30 40       	sbci	r19, 0x00	; 0
     afe:	13 96       	adiw	r26, 0x03	; 3
     b00:	3c 93       	st	X, r19
     b02:	2e 93       	st	-X, r18
     b04:	12 97       	sbiw	r26, 0x02	; 2
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	8c 93       	st	X, r24
     b0a:	87 e0       	ldi	r24, 0x07	; 7
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	66 1f       	adc	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	d1 f7       	brne	.-12     	; 0xb0c <__unpack_f+0xd4>
     b18:	70 64       	ori	r23, 0x40	; 64
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	4d 93       	st	X+, r20
     b1e:	5d 93       	st	X+, r21
     b20:	6d 93       	st	X+, r22
     b22:	7c 93       	st	X, r23
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	08 95       	ret

00000b28 <__fpcmp_parts_f>:
     b28:	1f 93       	push	r17
     b2a:	dc 01       	movw	r26, r24
     b2c:	fb 01       	movw	r30, r22
     b2e:	9c 91       	ld	r25, X
     b30:	92 30       	cpi	r25, 0x02	; 2
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__fpcmp_parts_f+0xe>
     b34:	47 c0       	rjmp	.+142    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b36:	80 81       	ld	r24, Z
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <__fpcmp_parts_f+0x16>
     b3c:	43 c0       	rjmp	.+134    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b3e:	94 30       	cpi	r25, 0x04	; 4
     b40:	51 f4       	brne	.+20     	; 0xb56 <__fpcmp_parts_f+0x2e>
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	1c 91       	ld	r17, X
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	99 f5       	brne	.+102    	; 0xbb0 <__fpcmp_parts_f+0x88>
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	68 2f       	mov	r22, r24
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	61 1b       	sub	r22, r17
     b52:	71 09       	sbc	r23, r1
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <__fpcmp_parts_f+0xac>
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	21 f0       	breq	.+8      	; 0xb62 <__fpcmp_parts_f+0x3a>
     b5a:	92 30       	cpi	r25, 0x02	; 2
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__fpcmp_parts_f+0x42>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	b9 f1       	breq	.+110    	; 0xbd0 <__fpcmp_parts_f+0xa8>
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	88 23       	and	r24, r24
     b66:	89 f1       	breq	.+98     	; 0xbca <__fpcmp_parts_f+0xa2>
     b68:	2d c0       	rjmp	.+90     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	1c 91       	ld	r17, X
     b6e:	11 97       	sbiw	r26, 0x01	; 1
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	f1 f0       	breq	.+60     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	18 17       	cp	r17, r24
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b7a:	12 96       	adiw	r26, 0x02	; 2
     b7c:	2d 91       	ld	r18, X+
     b7e:	3c 91       	ld	r19, X
     b80:	13 97       	sbiw	r26, 0x03	; 3
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	94 f0       	brlt	.+36     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	bc f0       	brlt	.+46     	; 0xbc0 <__fpcmp_parts_f+0x98>
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	8d 91       	ld	r24, X+
     b96:	9d 91       	ld	r25, X+
     b98:	0d 90       	ld	r0, X+
     b9a:	bc 91       	ld	r27, X
     b9c:	a0 2d       	mov	r26, r0
     b9e:	24 81       	ldd	r18, Z+4	; 0x04
     ba0:	35 81       	ldd	r19, Z+5	; 0x05
     ba2:	46 81       	ldd	r20, Z+6	; 0x06
     ba4:	57 81       	ldd	r21, Z+7	; 0x07
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	4a 07       	cpc	r20, r26
     bac:	5b 07       	cpc	r21, r27
     bae:	18 f4       	brcc	.+6      	; 0xbb6 <__fpcmp_parts_f+0x8e>
     bb0:	11 23       	and	r17, r17
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <__fpcmp_parts_f+0xa2>
     bb6:	82 17       	cp	r24, r18
     bb8:	93 07       	cpc	r25, r19
     bba:	a4 07       	cpc	r26, r20
     bbc:	b5 07       	cpc	r27, r21
     bbe:	40 f4       	brcc	.+16     	; 0xbd0 <__fpcmp_parts_f+0xa8>
     bc0:	11 23       	and	r17, r17
     bc2:	19 f0       	breq	.+6      	; 0xbca <__fpcmp_parts_f+0xa2>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__fpcmp_parts_f+0xac>
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	7f ef       	ldi	r23, 0xFF	; 255
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__fpcmp_parts_f+0xac>
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	1f 91       	pop	r17
     bd8:	08 95       	ret

00000bda <UART_init>:
 * [in]: const ST_UartConfig * a_uartConfig
 * 		 the configuration of the uart
 * [Return]: void
 */
void UART_init(const ST_UartConfig * a_uartConfig)
{
     bda:	fc 01       	movw	r30, r24
	uint16_t ubrrValue = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA_R = SELECT_BIT(U2X);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 = 0 not used
	 * UCSZ2 = 0 all available character size options (5, 6, 7, 8) has UCSZ2 = 0
	 ***********************************************************************/
	UCSRB_R = SELECT_BIT(RXEN) | SELECT_BIT(TXEN);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	8a b9       	out	0x0a, r24	; 10

	/* insert the value of rx interrupt in RXCIE */
	COPY_BITS(UCSRB_R, 0x01, a_uartConfig->rxInterrupt, RXCIE);
     be4:	9a b1       	in	r25, 0x0a	; 10
     be6:	80 85       	ldd	r24, Z+8	; 0x08
     be8:	87 95       	ror	r24
     bea:	88 27       	eor	r24, r24
     bec:	87 95       	ror	r24
     bee:	9f 77       	andi	r25, 0x7F	; 127
     bf0:	89 2b       	or	r24, r25
     bf2:	8a b9       	out	0x0a, r24	; 10

	/* insert the value of tx interrupt in TXCIE */
	COPY_BITS(UCSRB_R, 0x01, a_uartConfig->txInterrupt, TXCIE);
     bf4:	2a b1       	in	r18, 0x0a	; 10
     bf6:	87 81       	ldd	r24, Z+7	; 0x07
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	90 70       	andi	r25, 0x00	; 0
     bfe:	00 24       	eor	r0, r0
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	07 94       	ror	r0
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	07 94       	ror	r0
     c0c:	98 2f       	mov	r25, r24
     c0e:	80 2d       	mov	r24, r0
     c10:	2f 7b       	andi	r18, 0xBF	; 191
     c12:	28 2b       	or	r18, r24
     c14:	2a b9       	out	0x0a, r18	; 10
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_R = SELECT_BIT(URSEL);
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	80 bd       	out	0x20, r24	; 32

	/* insert the value of the parity in UPM0, UPM1 */
	COPY_BITS(UCSRC_R, 0x03, a_uartConfig->parity, UPM0);
     c1a:	20 b5       	in	r18, 0x20	; 32
     c1c:	81 81       	ldd	r24, Z+1	; 0x01
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	83 70       	andi	r24, 0x03	; 3
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	82 95       	swap	r24
     c26:	92 95       	swap	r25
     c28:	90 7f       	andi	r25, 0xF0	; 240
     c2a:	98 27       	eor	r25, r24
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	98 27       	eor	r25, r24
     c30:	2f 7c       	andi	r18, 0xCF	; 207
     c32:	28 2b       	or	r18, r24
     c34:	20 bd       	out	0x20, r18	; 32

	/* insert the value of the stop bit(s) number in USBS */
	COPY_BITS(UCSRC_R, 0x01, a_uartConfig->stopBit, USBS);
     c36:	20 b5       	in	r18, 0x20	; 32
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	27 7f       	andi	r18, 0xF7	; 247
     c4e:	28 2b       	or	r18, r24
     c50:	20 bd       	out	0x20, r18	; 32

	/* insert the value of the character size in UCSZ0, UCSZ1 */
	COPY_BITS(UCSRC_R, 0x03, a_uartConfig->charSize, UCSZ0);
     c52:	20 b5       	in	r18, 0x20	; 32
     c54:	80 81       	ld	r24, Z
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	29 7f       	andi	r18, 0xF9	; 249
     c62:	28 2b       	or	r18, r24
     c64:	20 bd       	out	0x20, r18	; 32

	/* Calculate the UBRR register value */
	ubrrValue = (uint16_t)(((F_CPU / (a_uartConfig->baudRate * 8UL))) - 1);
     c66:	23 81       	ldd	r18, Z+3	; 0x03
     c68:	34 81       	ldd	r19, Z+4	; 0x04
     c6a:	45 81       	ldd	r20, Z+5	; 0x05
     c6c:	56 81       	ldd	r21, Z+6	; 0x06
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	44 1f       	adc	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	44 1f       	adc	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	22 0f       	add	r18, r18
     c80:	33 1f       	adc	r19, r19
     c82:	44 1f       	adc	r20, r20
     c84:	55 1f       	adc	r21, r21
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	72 e1       	ldi	r23, 0x12	; 18
     c8a:	8a e7       	ldi	r24, 0x7A	; 122
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 28 11 	call	0x2250	; 0x2250 <__udivmodsi4>
     c92:	21 50       	subi	r18, 0x01	; 1
     c94:	30 40       	sbci	r19, 0x00	; 0

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_R = (uint8_t)(ubrrValue >> 8);
     c96:	30 bd       	out	0x20, r19	; 32
	UBRRL_R = (uint8_t)(ubrrValue);
     c98:	29 b9       	out	0x09, r18	; 9
}
     c9a:	08 95       	ret

00000c9c <UART_setRxInterruptCallback>:
 * [in]: void (* volatile a_ptrToHandler)(void)
 * 		 pointer to the callback function
 * [Return]: void
 */
void UART_setRxInterruptCallback(void (* volatile a_ptrToHandler)(void))
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <UART_setRxInterruptCallback+0x6>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
	/* save the rx interrupt pointer to callback */
	g_uartRxPtrToHandler = a_ptrToHandler;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	90 93 3f 02 	sts	0x023F, r25
     cb2:	80 93 3e 02 	sts	0x023E, r24
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <UART_setTxInterruptCallback>:
 * [in]: void (* volatile a_ptrToHandler)(void)
 * 		 pointer to the callback function
 * [Return]: void
 */
void UART_setTxInterruptCallback(void (* volatile a_ptrToHandler)(void))
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <UART_setTxInterruptCallback+0x6>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
	/* save the tx interrupt pointer to callback */
	g_uartTxPtrToHandler = a_ptrToHandler;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	90 93 3d 02 	sts	0x023D, r25
     cd6:	80 93 3c 02 	sts	0x023C, r24
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <UART_sendByteBlocking>:
void UART_sendByteBlocking(const uint8_t a_data)
{
	/*
	 * wait till the transfer buffer is empty
	 */
	while(!UART_TxIsEmpty());
     ce4:	5d 9b       	sbis	0x0b, 5	; 11
     ce6:	fe cf       	rjmp	.-4      	; 0xce4 <UART_sendByteBlocking>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_R = a_data;
     ce8:	8c b9       	out	0x0c, r24	; 12
}
     cea:	08 95       	ret

00000cec <UART_sendByteNonBlocking>:
void UART_sendByteNonBlocking(const uint8_t a_data)
{
	/*
	 * check if the transfer buffer is empty and ready to receive new data
	 */
	if(UART_TxIsEmpty())
     cec:	5d 99       	sbic	0x0b, 5	; 11
	{
		/* send data */
		UDR_R = a_data;
     cee:	8c b9       	out	0x0c, r24	; 12
     cf0:	08 95       	ret

00000cf2 <UART_receiveByteBlocking>:
{
	uint8_t data;
	boolean rxInterruptEnabled = FALSE;

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
     cf2:	57 99       	sbic	0x0a, 7	; 10
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <UART_receiveByteBlocking+0x16>
     cf6:	90 e0       	ldi	r25, 0x00	; 0
		CLEAR_BIT(UCSRB_R, RXCIE);
		rxInterruptEnabled = TRUE;
	}

	/* wait till data is available in receive buffer */
	while(!UART_DataIsAvailable());
     cf8:	5f 9b       	sbis	0x0b, 7	; 11
     cfa:	fe cf       	rjmp	.-4      	; 0xcf8 <UART_receiveByteBlocking+0x6>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data = UDR_R;
     cfc:	8c b1       	in	r24, 0x0c	; 12

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
     cfe:	91 30       	cpi	r25, 0x01	; 1
     d00:	09 f0       	breq	.+2      	; 0xd04 <UART_receiveByteBlocking+0x12>
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
	}

	return data;
}
     d02:	08 95       	ret

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
	{
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
     d04:	57 9a       	sbi	0x0a, 7	; 10
	}

	return data;
}
     d06:	08 95       	ret

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
	{
		/* disable it temporarely */
		CLEAR_BIT(UCSRB_R, RXCIE);
     d08:	57 98       	cbi	0x0a, 7	; 10
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	f5 cf       	rjmp	.-22     	; 0xcf8 <UART_receiveByteBlocking+0x6>

00000d0e <UART_receiveByteNonBlocking>:
 * 			 the received byte
 */
uint8_t UART_receiveByteNonBlocking(void)
{
	/* check if data is available in the receive buffer */
	if(UART_DataIsAvailable())
     d0e:	5f 9b       	sbis	0x0b, 7	; 11
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <UART_receiveByteNonBlocking+0x8>
	{
		/*
		 * Read the received data from the Rx buffer (UDR)
		 */
		return UDR_R;
     d12:	8c b1       	in	r24, 0x0c	; 12
	}

	/* return 0 if the receive buffer is empty */
	return 0;
}
     d14:	08 95       	ret
 * 			 the received byte
 */
uint8_t UART_receiveByteNonBlocking(void)
{
	/* check if data is available in the receive buffer */
	if(UART_DataIsAvailable())
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret

00000d1a <UART_sendString>:
 * [in]: const char * a_str
 * 		 string to be sent
 * [Return]: void
 */
void UART_sendString(const char * a_str)
{
     d1a:	fc 01       	movw	r30, r24
	while(*a_str)
     d1c:	80 81       	ld	r24, Z
     d1e:	88 23       	and	r24, r24
     d20:	39 f0       	breq	.+14     	; 0xd30 <UART_sendString+0x16>
void UART_sendByteBlocking(const uint8_t a_data)
{
	/*
	 * wait till the transfer buffer is empty
	 */
	while(!UART_TxIsEmpty());
     d22:	5d 9b       	sbis	0x0b, 5	; 11
     d24:	fe cf       	rjmp	.-4      	; 0xd22 <UART_sendString+0x8>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_R = a_data;
     d26:	8c b9       	out	0x0c, r24	; 12
	{
		/* send char by char */
		UART_sendByteBlocking(*a_str);

		/* increment the pointer */
		a_str ++;
     d28:	31 96       	adiw	r30, 0x01	; 1
 * 		 string to be sent
 * [Return]: void
 */
void UART_sendString(const char * a_str)
{
	while(*a_str)
     d2a:	80 81       	ld	r24, Z
     d2c:	88 23       	and	r24, r24
     d2e:	c9 f7       	brne	.-14     	; 0xd22 <UART_sendString+0x8>
     d30:	08 95       	ret

00000d32 <UART_DataIsAvailable>:
 * 			 FALSE otherwise
 */
uint8_t UART_DataIsAvailable(void)
{
	/* check if RXC flag is set (the UART receive data) */
	return BIT_IS_SET(UCSRA_R, RXC);
     d32:	8b b1       	in	r24, 0x0b	; 11
}
     d34:	80 78       	andi	r24, 0x80	; 128
     d36:	08 95       	ret

00000d38 <UART_TxIsEmpty>:
 * 			 FALSE otherwise
 */
uint8_t UART_TxIsEmpty(void)
{
	/* check if transfer buffer is empty */
	return BIT_IS_SET(UCSRA_R, UDRE);
     d38:	8b b1       	in	r24, 0x0b	; 11
}
     d3a:	80 72       	andi	r24, 0x20	; 32
     d3c:	08 95       	ret

00000d3e <__vector_11>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* ISR for uart Rx */
ISR(USART_RXC_vect)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
	if(g_uartRxPtrToHandler != NULL)
     d60:	80 91 3e 02 	lds	r24, 0x023E
     d64:	90 91 3f 02 	lds	r25, 0x023F
     d68:	89 2b       	or	r24, r25
     d6a:	29 f0       	breq	.+10     	; 0xd76 <__vector_11+0x38>
	{
		(*g_uartRxPtrToHandler)();
     d6c:	e0 91 3e 02 	lds	r30, 0x023E
     d70:	f0 91 3f 02 	lds	r31, 0x023F
     d74:	09 95       	icall

	/* The RX flag is cleared only when data is read
	 * so, this condition checks if it's not cleared (read) in the
	 * callback, it reads the data to clear it
	 */
	if(UART_DataIsAvailable())
     d76:	5f 9b       	sbis	0x0b, 7	; 11
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <__vector_11+0x40>
 * 			 the received byte
 */
uint8_t UART_receiveByteNonBlocking(void)
{
	/* check if data is available in the receive buffer */
	if(UART_DataIsAvailable())
     d7a:	5f 99       	sbic	0x0b, 7	; 11
	{
		/*
		 * Read the received data from the Rx buffer (UDR)
		 */
		return UDR_R;
     d7c:	8c b1       	in	r24, 0x0c	; 12
	 */
	if(UART_DataIsAvailable())
	{
		UART_receiveByteNonBlocking();
	}
}
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	7f 91       	pop	r23
     d8c:	6f 91       	pop	r22
     d8e:	5f 91       	pop	r21
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_13>:

/* ISR for uart Tx */
ISR(USART_TXC_vect)
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
	if(g_uartTxPtrToHandler != NULL)
     dc2:	80 91 3c 02 	lds	r24, 0x023C
     dc6:	90 91 3d 02 	lds	r25, 0x023D
     dca:	89 2b       	or	r24, r25
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <__vector_13+0x38>
	{
		(*g_uartTxPtrToHandler)();
     dce:	e0 91 3c 02 	lds	r30, 0x023C
     dd2:	f0 91 3d 02 	lds	r31, 0x023D
     dd6:	09 95       	icall
	}
}
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <UART_receiveString>:
 * 		 It's the total size considering the null terminator, i.e if
 * 		 max size of 20 is passed, only 19 char will be saved and the 20th is '\0'
 * [Return]: void
 */
void UART_receiveString(uint8_t * a_str, uint8_t a_maxSize)
{
     dfa:	fc 01       	movw	r30, r24
	/* counter to keep track of the size */
	uint8_t counter = 0;

	/* return if size is 0 or 1 */
	if(a_maxSize == 0)
     dfc:	66 23       	and	r22, r22
     dfe:	49 f1       	breq	.+82     	; 0xe52 <UART_receiveString+0x58>
	{
		return;
	}
	else if(a_maxSize == 1)
     e00:	61 30       	cpi	r22, 0x01	; 1
     e02:	41 f1       	breq	.+80     	; 0xe54 <UART_receiveString+0x5a>
{
	uint8_t data;
	boolean rxInterruptEnabled = FALSE;

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
     e04:	57 99       	sbic	0x0a, 7	; 10
     e06:	2d c0       	rjmp	.+90     	; 0xe62 <UART_receiveString+0x68>
     e08:	90 e0       	ldi	r25, 0x00	; 0
		CLEAR_BIT(UCSRB_R, RXCIE);
		rxInterruptEnabled = TRUE;
	}

	/* wait till data is available in receive buffer */
	while(!UART_DataIsAvailable());
     e0a:	5f 9b       	sbis	0x0b, 7	; 11
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <UART_receiveString+0x10>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data = UDR_R;
     e0e:	8c b1       	in	r24, 0x0c	; 12

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
     e10:	91 30       	cpi	r25, 0x01	; 1
     e12:	29 f1       	breq	.+74     	; 0xe5e <UART_receiveString+0x64>
		*a_str = '\0';
		return;
	}

	/* get the first character */
	*a_str = UART_receiveByteBlocking();
     e14:	80 83       	st	Z, r24

	/* loop till the UART_RECEIVE_STRING_TILL is found */
	while(*a_str != UART_RECEIVE_STRING_TILL)
     e16:	8d 30       	cpi	r24, 0x0D	; 13
     e18:	d9 f0       	breq	.+54     	; 0xe50 <UART_receiveString+0x56>
	{
		/* increment the counter and the pointer */
		counter ++;
		a_str ++;
     e1a:	31 96       	adiw	r30, 0x01	; 1

		/* break the loop if the length reached the max size - 1 to leave space for '\0' */
		if(counter >= a_maxSize - 1) break;
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	61 50       	subi	r22, 0x01	; 1
     e20:	70 40       	sbci	r23, 0x00	; 0
     e22:	62 30       	cpi	r22, 0x02	; 2
     e24:	71 05       	cpc	r23, r1
     e26:	a4 f0       	brlt	.+40     	; 0xe50 <UART_receiveString+0x56>
     e28:	21 e0       	ldi	r18, 0x01	; 1
{
	uint8_t data;
	boolean rxInterruptEnabled = FALSE;

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
     e2a:	57 99       	sbic	0x0a, 7	; 10
     e2c:	15 c0       	rjmp	.+42     	; 0xe58 <UART_receiveString+0x5e>
     e2e:	90 e0       	ldi	r25, 0x00	; 0
		CLEAR_BIT(UCSRB_R, RXCIE);
		rxInterruptEnabled = TRUE;
	}

	/* wait till data is available in receive buffer */
	while(!UART_DataIsAvailable());
     e30:	5f 9b       	sbis	0x0b, 7	; 11
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <UART_receiveString+0x36>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data = UDR_R;
     e34:	8c b1       	in	r24, 0x0c	; 12

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
     e36:	91 30       	cpi	r25, 0x01	; 1
     e38:	09 f4       	brne	.+2      	; 0xe3c <UART_receiveString+0x42>
	{
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
     e3a:	57 9a       	sbi	0x0a, 7	; 10

		/* break the loop if the length reached the max size - 1 to leave space for '\0' */
		if(counter >= a_maxSize - 1) break;

		/* get the next character */
		*a_str = UART_receiveByteBlocking();
     e3c:	80 83       	st	Z, r24

	/* get the first character */
	*a_str = UART_receiveByteBlocking();

	/* loop till the UART_RECEIVE_STRING_TILL is found */
	while(*a_str != UART_RECEIVE_STRING_TILL)
     e3e:	8d 30       	cpi	r24, 0x0D	; 13
     e40:	39 f0       	breq	.+14     	; 0xe50 <UART_receiveString+0x56>
	{
		/* increment the counter and the pointer */
		counter ++;
     e42:	2f 5f       	subi	r18, 0xFF	; 255
		a_str ++;
     e44:	31 96       	adiw	r30, 0x01	; 1

		/* break the loop if the length reached the max size - 1 to leave space for '\0' */
		if(counter >= a_maxSize - 1) break;
     e46:	82 2f       	mov	r24, r18
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	86 17       	cp	r24, r22
     e4c:	97 07       	cpc	r25, r23
     e4e:	6c f3       	brlt	.-38     	; 0xe2a <UART_receiveString+0x30>
		/* get the next character */
		*a_str = UART_receiveByteBlocking();
	}

	/* add null terminator */
	*a_str = '\0';
     e50:	10 82       	st	Z, r1
     e52:	08 95       	ret
	{
		return;
	}
	else if(a_maxSize == 1)
	{
		*a_str = '\0';
     e54:	10 82       	st	Z, r1
     e56:	08 95       	ret

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
	{
		/* disable it temporarely */
		CLEAR_BIT(UCSRB_R, RXCIE);
     e58:	57 98       	cbi	0x0a, 7	; 10
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	e9 cf       	rjmp	.-46     	; 0xe30 <UART_receiveString+0x36>

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
	{
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
     e5e:	57 9a       	sbi	0x0a, 7	; 10
     e60:	d9 cf       	rjmp	.-78     	; 0xe14 <UART_receiveString+0x1a>

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
	{
		/* disable it temporarely */
		CLEAR_BIT(UCSRB_R, RXCIE);
     e62:	57 98       	cbi	0x0a, 7	; 10
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	d1 cf       	rjmp	.-94     	; 0xe0a <UART_receiveString+0x10>

00000e68 <TIMER_start>:
 * 		 timer to start
 * [Return]: uint8_t
 * 			 TIMER_INIT_SUCCESS or TIMER_INIT_ERROR
 */
uint8_t TIMER_start(uint8_t a_timer) {
	switch(a_timer)
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	79 f0       	breq	.+30     	; 0xe8a <TIMER_start+0x22>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <TIMER_start+0x10>
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	a1 f0       	breq	.+40     	; 0xe9c <TIMER_start+0x34>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	08 95       	ret
	{
	case TIMER_0:
		COPY_BITS(TCCR0_R, 0b00000111, g_timers_init_prescaler[TIMER_0], 0);
     e78:	93 b7       	in	r25, 0x33	; 51
     e7a:	80 91 5a 02 	lds	r24, 0x025A
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	98 7f       	andi	r25, 0xF8	; 248
     e82:	89 2b       	or	r24, r25
     e84:	83 bf       	out	0x33, r24	; 51
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	08 95       	ret
		break;
	case TIMER_1:
		COPY_BITS(TCCR1B_R, 0b00000111, g_timers_init_prescaler[TIMER_1], 0);
     e8a:	9e b5       	in	r25, 0x2e	; 46
     e8c:	80 91 5b 02 	lds	r24, 0x025B
     e90:	87 70       	andi	r24, 0x07	; 7
     e92:	98 7f       	andi	r25, 0xF8	; 248
     e94:	89 2b       	or	r24, r25
     e96:	8e bd       	out	0x2e, r24	; 46
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	08 95       	ret
		break;
	case TIMER_2:
		COPY_BITS(TCCR2_R, 0b00000111, g_timers_init_prescaler[TIMER_2], 0);
     e9c:	95 b5       	in	r25, 0x25	; 37
     e9e:	80 91 5c 02 	lds	r24, 0x025C
     ea2:	87 70       	andi	r24, 0x07	; 7
     ea4:	98 7f       	andi	r25, 0xF8	; 248
     ea6:	89 2b       	or	r24, r25
     ea8:	85 bd       	out	0x25, r24	; 37
     eaa:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_SUCCESS;
}
     eac:	08 95       	ret

00000eae <TIMER_stop>:
 * 		 timer to stop
 * [Return]: uint8_t
 * 			 TIMER_INIT_SUCCESS or TIMER_INIT_ERROR
 */
uint8_t TIMER_stop(uint8_t a_timer){
	switch(a_timer)
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	59 f0       	breq	.+22     	; 0xec8 <TIMER_stop+0x1a>
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	20 f0       	brcs	.+8      	; 0xebe <TIMER_stop+0x10>
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	61 f0       	breq	.+24     	; 0xed2 <TIMER_stop+0x24>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
	{
	case TIMER_0:
		COPY_BITS(TCCR0_R, 0b00000111, 0, 0);
     ebe:	83 b7       	in	r24, 0x33	; 51
     ec0:	88 7f       	andi	r24, 0xF8	; 248
     ec2:	83 bf       	out	0x33, r24	; 51
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	08 95       	ret
		break;
	case TIMER_1:
		COPY_BITS(TCCR1B_R, 0b00000111, 0, 0);
     ec8:	8e b5       	in	r24, 0x2e	; 46
     eca:	88 7f       	andi	r24, 0xF8	; 248
     ecc:	8e bd       	out	0x2e, r24	; 46
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	08 95       	ret
		break;
	case TIMER_2:
		COPY_BITS(TCCR2_R, 0b00000111, 0, 0);
     ed2:	85 b5       	in	r24, 0x25	; 37
     ed4:	88 7f       	andi	r24, 0xF8	; 248
     ed6:	85 bd       	out	0x25, r24	; 37
     ed8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_SUCCESS;
}
     eda:	08 95       	ret

00000edc <TIMER_read>:
 * 			 2 bytes => TIMER_1
 */
uint16_t TIMER_read(uint8_t a_timer)
{
	uint16_t count;
	switch(a_timer)
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	69 f0       	breq	.+26     	; 0xefa <TIMER_read+0x1e>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	30 f0       	brcs	.+12     	; 0xef0 <TIMER_read+0x14>
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	69 f0       	breq	.+26     	; 0xf02 <TIMER_read+0x26>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
		break;
	default:
		return 0;
	}
	return count;
}
     eec:	c9 01       	movw	r24, r18
     eee:	08 95       	ret
{
	uint16_t count;
	switch(a_timer)
	{
	case TIMER_0:
		count = TCNT0_R;
     ef0:	82 b7       	in	r24, 0x32	; 50
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
		break;
	default:
		return 0;
	}
	return count;
}
     ef6:	c9 01       	movw	r24, r18
     ef8:	08 95       	ret
	{
	case TIMER_0:
		count = TCNT0_R;
		break;
	case TIMER_1:
		count = TCNT1_R;
     efa:	2c b5       	in	r18, 0x2c	; 44
     efc:	3d b5       	in	r19, 0x2d	; 45
		break;
	default:
		return 0;
	}
	return count;
}
     efe:	c9 01       	movw	r24, r18
     f00:	08 95       	ret
		break;
	case TIMER_1:
		count = TCNT1_R;
		break;
	case TIMER_2:
		count = TCNT2_R;
     f02:	84 b5       	in	r24, 0x24	; 36
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
		break;
	default:
		return 0;
	}
	return count;
}
     f08:	c9 01       	movw	r24, r18
     f0a:	08 95       	ret

00000f0c <TIMER_delayTicks>:
 * 		 prescaler to start the timer with, use defined prescalers depending
 * 		 on the DELAY_TIMER used
 * [Return]: void
 */
void TIMER_delayTicks(uint16_t ticks, uint32_t iterations, uint8_t prescaler)
{
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	7a 01       	movw	r14, r20
     f16:	8b 01       	movw	r16, r22
#elif DELAY_TIMER == TIMER_2
	/* loop counter */
	uint32_t loopCounter;

	/* make sure count is initially = 0 */
	TCNT2_R = 0;
     f18:	14 bc       	out	0x24, r1	; 36

	/* make sure interrupt is closed */
	CLEAR_BIT(TIMSK_R, OCIE2);
     f1a:	99 b7       	in	r25, 0x39	; 57
     f1c:	9f 77       	andi	r25, 0x7F	; 127
     f1e:	99 bf       	out	0x39, r25	; 57

	/* put ticks in OCR2_R */
	OCR2_R = ticks;
     f20:	83 bd       	out	0x23, r24	; 35

	/* set the timer to work in CTC mode */
	TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);
     f22:	88 e8       	ldi	r24, 0x88	; 136
     f24:	85 bd       	out	0x25, r24	; 37

	/* start the timer with the input prescaler */
	COPY_BITS(TCCR2_R, 0b00000111, prescaler, 0);
     f26:	85 b5       	in	r24, 0x25	; 37
     f28:	27 70       	andi	r18, 0x07	; 7
     f2a:	88 7f       	andi	r24, 0xF8	; 248
     f2c:	82 2b       	or	r24, r18
     f2e:	85 bd       	out	0x25, r24	; 37

	for(loopCounter = 0; loopCounter < iterations; loopCounter ++)
     f30:	41 15       	cp	r20, r1
     f32:	51 05       	cpc	r21, r1
     f34:	61 05       	cpc	r22, r1
     f36:	71 05       	cpc	r23, r1
     f38:	99 f0       	breq	.+38     	; 0xf60 <TIMER_delayTicks+0x54>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
	{
		/* wait till the flag is 1, then clear it */
		while(BIT_IS_CLEAR(TIFR_R, OCF2));
     f42:	08 b6       	in	r0, 0x38	; 56
     f44:	07 fe       	sbrs	r0, 7
     f46:	fd cf       	rjmp	.-6      	; 0xf42 <TIMER_delayTicks+0x36>
		SET_BIT(TIFR_R, OCF2);
     f48:	88 b7       	in	r24, 0x38	; 56
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	88 bf       	out	0x38, r24	; 56
	TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);

	/* start the timer with the input prescaler */
	COPY_BITS(TCCR2_R, 0b00000111, prescaler, 0);

	for(loopCounter = 0; loopCounter < iterations; loopCounter ++)
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	4f 4f       	sbci	r20, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	2e 15       	cp	r18, r14
     f58:	3f 05       	cpc	r19, r15
     f5a:	40 07       	cpc	r20, r16
     f5c:	51 07       	cpc	r21, r17
     f5e:	88 f3       	brcs	.-30     	; 0xf42 <TIMER_delayTicks+0x36>
		while(BIT_IS_CLEAR(TIFR_R, OCF2));
		SET_BIT(TIFR_R, OCF2);
	}

	/* stop the timer */
	TCCR2_R = 0;
     f60:	15 bc       	out	0x25, r1	; 37
#endif /* DELAY_TIMER == TIMER_0 */
}
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <ticksPerIteration>:
 * 		 max number of ticks available for each timer
 * [Return]: uint16_t
 * 			 number of ticks that can fit in the timer count register (in OVF mood)
 * 			 or in OCRx (in CTC mood)
 */
static uint16_t ticksPerIteration(uint8_t a_timer, uint32_t a_ticks, uint16_t a_maxCounts) {
     f6c:	6f 92       	push	r6
     f6e:	7f 92       	push	r7
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
	uint32_t counts;									/* number of ticks in each interrupt */
	float64_t countsTemp;								/* used to calculate  */
	g_timersInterruptActualCount[a_timer] = 1;			/* reset the actual interrupt count to 1 */
     f88:	c8 2f       	mov	r28, r24
     f8a:	d0 e0       	ldi	r29, 0x00	; 0
     f8c:	cc 0f       	add	r28, r28
     f8e:	dd 1f       	adc	r29, r29
     f90:	cc 0f       	add	r28, r28
     f92:	dd 1f       	adc	r29, r29
     f94:	fe 01       	movw	r30, r28
     f96:	e0 5c       	subi	r30, 0xC0	; 192
     f98:	fd 4f       	sbci	r31, 0xFD	; 253
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	a8 2e       	mov	r10, r24
     f9e:	b1 2c       	mov	r11, r1
     fa0:	c1 2c       	mov	r12, r1
     fa2:	d1 2c       	mov	r13, r1
     fa4:	a0 82       	st	Z, r10
     fa6:	b1 82       	std	Z+1, r11	; 0x01
     fa8:	c2 82       	std	Z+2, r12	; 0x02
     faa:	d3 82       	std	Z+3, r13	; 0x03
	if (a_ticks <= a_maxCounts) {						/* if the ticks <= maxCounts there will be only one interrupt */
     fac:	79 01       	movw	r14, r18
     fae:	00 e0       	ldi	r16, 0x00	; 0
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	e4 16       	cp	r14, r20
     fb4:	f5 06       	cpc	r15, r21
     fb6:	06 07       	cpc	r16, r22
     fb8:	17 07       	cpc	r17, r23
     fba:	08 f0       	brcs	.+2      	; 0xfbe <ticksPerIteration+0x52>
     fbc:	51 c0       	rjmp	.+162    	; 0x1060 <ticksPerIteration+0xf4>
		g_timersInterruptCount[a_timer] = 1;
		return (uint16_t) (a_ticks);
	}
	/* counts will  be equal to countsTemp or countsTemp + 1
	   depending on whether countsTemp has fractions or not */
	countsTemp = (float64_t) a_ticks / ((uint32_t)a_maxCounts + 1);
     fbe:	cb 01       	movw	r24, r22
     fc0:	ba 01       	movw	r22, r20
     fc2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     fc6:	3b 01       	movw	r6, r22
     fc8:	4c 01       	movw	r8, r24
     fca:	08 94       	sec
     fcc:	e1 1c       	adc	r14, r1
     fce:	f1 1c       	adc	r15, r1
     fd0:	01 1d       	adc	r16, r1
     fd2:	11 1d       	adc	r17, r1
     fd4:	c8 01       	movw	r24, r16
     fd6:	b7 01       	movw	r22, r14
     fd8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	c4 01       	movw	r24, r8
     fe2:	b3 01       	movw	r22, r6
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     fe8:	7b 01       	movw	r14, r22
     fea:	8c 01       	movw	r16, r24
	counts = (uint32_t) countsTemp;
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	5b 01       	movw	r10, r22
     ff2:	6c 01       	movw	r12, r24
	if (counts != countsTemp) {
     ff4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
     ff8:	a8 01       	movw	r20, r16
     ffa:	97 01       	movw	r18, r14
     ffc:	0e 94 cb 02 	call	0x596	; 0x596 <__nesf2>
    1000:	88 23       	and	r24, r24
    1002:	41 f5       	brne	.+80     	; 0x1054 <ticksPerIteration+0xe8>
		counts++;
	}
	g_timersInterruptCount[a_timer] = counts;
    1004:	c4 5b       	subi	r28, 0xB4	; 180
    1006:	dd 4f       	sbci	r29, 0xFD	; 253
    1008:	a8 82       	st	Y, r10
    100a:	b9 82       	std	Y+1, r11	; 0x01
    100c:	ca 82       	std	Y+2, r12	; 0x02
    100e:	db 82       	std	Y+3, r13	; 0x03
	return (uint16_t) (((float64_t)a_ticks / counts) + 0.5);			/* number of ticks in each interrupt */
    1010:	c6 01       	movw	r24, r12
    1012:	b5 01       	movw	r22, r10
    1014:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	c4 01       	movw	r24, r8
    101e:	b3 01       	movw	r22, r6
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	cb 01       	movw	r24, r22
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	7f 90       	pop	r7
    1050:	6f 90       	pop	r6
    1052:	08 95       	ret
	/* counts will  be equal to countsTemp or countsTemp + 1
	   depending on whether countsTemp has fractions or not */
	countsTemp = (float64_t) a_ticks / ((uint32_t)a_maxCounts + 1);
	counts = (uint32_t) countsTemp;
	if (counts != countsTemp) {
		counts++;
    1054:	08 94       	sec
    1056:	a1 1c       	adc	r10, r1
    1058:	b1 1c       	adc	r11, r1
    105a:	c1 1c       	adc	r12, r1
    105c:	d1 1c       	adc	r13, r1
    105e:	d2 cf       	rjmp	.-92     	; 0x1004 <ticksPerIteration+0x98>
static uint16_t ticksPerIteration(uint8_t a_timer, uint32_t a_ticks, uint16_t a_maxCounts) {
	uint32_t counts;									/* number of ticks in each interrupt */
	float64_t countsTemp;								/* used to calculate  */
	g_timersInterruptActualCount[a_timer] = 1;			/* reset the actual interrupt count to 1 */
	if (a_ticks <= a_maxCounts) {						/* if the ticks <= maxCounts there will be only one interrupt */
		g_timersInterruptCount[a_timer] = 1;
    1060:	c4 5b       	subi	r28, 0xB4	; 180
    1062:	dd 4f       	sbci	r29, 0xFD	; 253
    1064:	a8 82       	st	Y, r10
    1066:	b9 82       	std	Y+1, r11	; 0x01
    1068:	ca 82       	std	Y+2, r12	; 0x02
    106a:	db 82       	std	Y+3, r13	; 0x03
		return (uint16_t) (a_ticks);
    106c:	ca 01       	movw	r24, r20
    106e:	e3 cf       	rjmp	.-58     	; 0x1036 <ticksPerIteration+0xca>

00001070 <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* ISR for timer 0 CTC */
ISR(TIMER0_COMP_vect) {
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
    1092:	20 91 40 02 	lds	r18, 0x0240
    1096:	30 91 41 02 	lds	r19, 0x0241
    109a:	40 91 42 02 	lds	r20, 0x0242
    109e:	50 91 43 02 	lds	r21, 0x0243
    10a2:	80 91 4c 02 	lds	r24, 0x024C
    10a6:	90 91 4d 02 	lds	r25, 0x024D
    10aa:	a0 91 4e 02 	lds	r26, 0x024E
    10ae:	b0 91 4f 02 	lds	r27, 0x024F
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	4a 07       	cpc	r20, r26
    10b8:	5b 07       	cpc	r21, r27
    10ba:	21 f1       	breq	.+72     	; 0x1104 <__vector_19+0x94>
		(*g_timerInterruptHandler[TIMER_0])();
		g_timersInterruptActualCount[TIMER_0] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_0]++;
    10bc:	80 91 40 02 	lds	r24, 0x0240
    10c0:	90 91 41 02 	lds	r25, 0x0241
    10c4:	a0 91 42 02 	lds	r26, 0x0242
    10c8:	b0 91 43 02 	lds	r27, 0x0243
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	a1 1d       	adc	r26, r1
    10d0:	b1 1d       	adc	r27, r1
    10d2:	80 93 40 02 	sts	0x0240, r24
    10d6:	90 93 41 02 	sts	0x0241, r25
    10da:	a0 93 42 02 	sts	0x0242, r26
    10de:	b0 93 43 02 	sts	0x0243, r27
	}
}
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti
 *******************************************************************************/

/* ISR for timer 0 CTC */
ISR(TIMER0_COMP_vect) {
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
		(*g_timerInterruptHandler[TIMER_0])();
    1104:	e0 91 5d 02 	lds	r30, 0x025D
    1108:	f0 91 5e 02 	lds	r31, 0x025E
    110c:	09 95       	icall
		g_timersInterruptActualCount[TIMER_0] = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	80 93 40 02 	sts	0x0240, r24
    111a:	90 93 41 02 	sts	0x0241, r25
    111e:	a0 93 42 02 	sts	0x0242, r26
    1122:	b0 93 43 02 	sts	0x0243, r27
    1126:	dd cf       	rjmp	.-70     	; 0x10e2 <__vector_19+0x72>

00001128 <__vector_9>:
		g_timersInterruptActualCount[TIMER_0]++;
	}
}

/* ISR for timer 0 OVF */
ISR(TIMER0_OVF_vect) {
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	4f 93       	push	r20
    1138:	5f 93       	push	r21
    113a:	6f 93       	push	r22
    113c:	7f 93       	push	r23
    113e:	8f 93       	push	r24
    1140:	9f 93       	push	r25
    1142:	af 93       	push	r26
    1144:	bf 93       	push	r27
    1146:	ef 93       	push	r30
    1148:	ff 93       	push	r31
	TCNT0_R = g_timer0_ovf_start;
    114a:	80 91 63 02 	lds	r24, 0x0263
    114e:	82 bf       	out	0x32, r24	; 50
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
    1150:	20 91 40 02 	lds	r18, 0x0240
    1154:	30 91 41 02 	lds	r19, 0x0241
    1158:	40 91 42 02 	lds	r20, 0x0242
    115c:	50 91 43 02 	lds	r21, 0x0243
    1160:	80 91 4c 02 	lds	r24, 0x024C
    1164:	90 91 4d 02 	lds	r25, 0x024D
    1168:	a0 91 4e 02 	lds	r26, 0x024E
    116c:	b0 91 4f 02 	lds	r27, 0x024F
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	4a 07       	cpc	r20, r26
    1176:	5b 07       	cpc	r21, r27
    1178:	21 f1       	breq	.+72     	; 0x11c2 <__vector_9+0x9a>
		(*g_timerInterruptHandler[TIMER_0])();
		g_timersInterruptActualCount[TIMER_0] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_0]++;
    117a:	80 91 40 02 	lds	r24, 0x0240
    117e:	90 91 41 02 	lds	r25, 0x0241
    1182:	a0 91 42 02 	lds	r26, 0x0242
    1186:	b0 91 43 02 	lds	r27, 0x0243
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	a1 1d       	adc	r26, r1
    118e:	b1 1d       	adc	r27, r1
    1190:	80 93 40 02 	sts	0x0240, r24
    1194:	90 93 41 02 	sts	0x0241, r25
    1198:	a0 93 42 02 	sts	0x0242, r26
    119c:	b0 93 43 02 	sts	0x0243, r27
	}
}
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

/* ISR for timer 0 OVF */
ISR(TIMER0_OVF_vect) {
	TCNT0_R = g_timer0_ovf_start;
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
		(*g_timerInterruptHandler[TIMER_0])();
    11c2:	e0 91 5d 02 	lds	r30, 0x025D
    11c6:	f0 91 5e 02 	lds	r31, 0x025E
    11ca:	09 95       	icall
		g_timersInterruptActualCount[TIMER_0] = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	80 93 40 02 	sts	0x0240, r24
    11d8:	90 93 41 02 	sts	0x0241, r25
    11dc:	a0 93 42 02 	sts	0x0242, r26
    11e0:	b0 93 43 02 	sts	0x0243, r27
    11e4:	dd cf       	rjmp	.-70     	; 0x11a0 <__vector_9+0x78>

000011e6 <__vector_3>:
		g_timersInterruptActualCount[TIMER_0]++;
	}
}

/* ISR for timer 2 CTC */
ISR(TIMER2_COMP_vect) {
    11e6:	1f 92       	push	r1
    11e8:	0f 92       	push	r0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
    1208:	20 91 48 02 	lds	r18, 0x0248
    120c:	30 91 49 02 	lds	r19, 0x0249
    1210:	40 91 4a 02 	lds	r20, 0x024A
    1214:	50 91 4b 02 	lds	r21, 0x024B
    1218:	80 91 54 02 	lds	r24, 0x0254
    121c:	90 91 55 02 	lds	r25, 0x0255
    1220:	a0 91 56 02 	lds	r26, 0x0256
    1224:	b0 91 57 02 	lds	r27, 0x0257
    1228:	28 17       	cp	r18, r24
    122a:	39 07       	cpc	r19, r25
    122c:	4a 07       	cpc	r20, r26
    122e:	5b 07       	cpc	r21, r27
    1230:	21 f1       	breq	.+72     	; 0x127a <__vector_3+0x94>
		(*g_timerInterruptHandler[TIMER_2])();
		g_timersInterruptActualCount[TIMER_2] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_2]++;
    1232:	80 91 48 02 	lds	r24, 0x0248
    1236:	90 91 49 02 	lds	r25, 0x0249
    123a:	a0 91 4a 02 	lds	r26, 0x024A
    123e:	b0 91 4b 02 	lds	r27, 0x024B
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	a1 1d       	adc	r26, r1
    1246:	b1 1d       	adc	r27, r1
    1248:	80 93 48 02 	sts	0x0248, r24
    124c:	90 93 49 02 	sts	0x0249, r25
    1250:	a0 93 4a 02 	sts	0x024A, r26
    1254:	b0 93 4b 02 	sts	0x024B, r27
	}
}
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	7f 91       	pop	r23
    1266:	6f 91       	pop	r22
    1268:	5f 91       	pop	r21
    126a:	4f 91       	pop	r20
    126c:	3f 91       	pop	r19
    126e:	2f 91       	pop	r18
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti
}

/* ISR for timer 2 CTC */
ISR(TIMER2_COMP_vect) {
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
		(*g_timerInterruptHandler[TIMER_2])();
    127a:	e0 91 61 02 	lds	r30, 0x0261
    127e:	f0 91 62 02 	lds	r31, 0x0262
    1282:	09 95       	icall
		g_timersInterruptActualCount[TIMER_2] = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e0       	ldi	r26, 0x00	; 0
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	80 93 48 02 	sts	0x0248, r24
    1290:	90 93 49 02 	sts	0x0249, r25
    1294:	a0 93 4a 02 	sts	0x024A, r26
    1298:	b0 93 4b 02 	sts	0x024B, r27
    129c:	dd cf       	rjmp	.-70     	; 0x1258 <__vector_3+0x72>

0000129e <__vector_4>:
		g_timersInterruptActualCount[TIMER_2]++;
	}
}

/* ISR for timer 2 OVF */
ISR(TIMER2_OVF_vect) {
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
	TCNT2_R = g_timer2_ovf_start;
    12c0:	80 91 64 02 	lds	r24, 0x0264
    12c4:	84 bd       	out	0x24, r24	; 36
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
    12c6:	20 91 48 02 	lds	r18, 0x0248
    12ca:	30 91 49 02 	lds	r19, 0x0249
    12ce:	40 91 4a 02 	lds	r20, 0x024A
    12d2:	50 91 4b 02 	lds	r21, 0x024B
    12d6:	80 91 54 02 	lds	r24, 0x0254
    12da:	90 91 55 02 	lds	r25, 0x0255
    12de:	a0 91 56 02 	lds	r26, 0x0256
    12e2:	b0 91 57 02 	lds	r27, 0x0257
    12e6:	28 17       	cp	r18, r24
    12e8:	39 07       	cpc	r19, r25
    12ea:	4a 07       	cpc	r20, r26
    12ec:	5b 07       	cpc	r21, r27
    12ee:	21 f1       	breq	.+72     	; 0x1338 <__vector_4+0x9a>
		(*g_timerInterruptHandler[TIMER_2])();
		g_timersInterruptActualCount[TIMER_2] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_2]++;
    12f0:	80 91 48 02 	lds	r24, 0x0248
    12f4:	90 91 49 02 	lds	r25, 0x0249
    12f8:	a0 91 4a 02 	lds	r26, 0x024A
    12fc:	b0 91 4b 02 	lds	r27, 0x024B
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	a1 1d       	adc	r26, r1
    1304:	b1 1d       	adc	r27, r1
    1306:	80 93 48 02 	sts	0x0248, r24
    130a:	90 93 49 02 	sts	0x0249, r25
    130e:	a0 93 4a 02 	sts	0x024A, r26
    1312:	b0 93 4b 02 	sts	0x024B, r27
	}
}
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

/* ISR for timer 2 OVF */
ISR(TIMER2_OVF_vect) {
	TCNT2_R = g_timer2_ovf_start;
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
		(*g_timerInterruptHandler[TIMER_2])();
    1338:	e0 91 61 02 	lds	r30, 0x0261
    133c:	f0 91 62 02 	lds	r31, 0x0262
    1340:	09 95       	icall
		g_timersInterruptActualCount[TIMER_2] = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	80 93 48 02 	sts	0x0248, r24
    134e:	90 93 49 02 	sts	0x0249, r25
    1352:	a0 93 4a 02 	sts	0x024A, r26
    1356:	b0 93 4b 02 	sts	0x024B, r27
    135a:	dd cf       	rjmp	.-70     	; 0x1316 <__vector_4+0x78>

0000135c <__vector_8>:
		g_timersInterruptActualCount[TIMER_2]++;
	}
}

/* ISR for timer 1 OVF */
ISR(TIMER1_OVF_vect) {
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
	TCNT1_R = g_timer1_ovf_start;
    137e:	80 91 58 02 	lds	r24, 0x0258
    1382:	90 91 59 02 	lds	r25, 0x0259
    1386:	9d bd       	out	0x2d, r25	; 45
    1388:	8c bd       	out	0x2c, r24	; 44
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
    138a:	20 91 44 02 	lds	r18, 0x0244
    138e:	30 91 45 02 	lds	r19, 0x0245
    1392:	40 91 46 02 	lds	r20, 0x0246
    1396:	50 91 47 02 	lds	r21, 0x0247
    139a:	80 91 50 02 	lds	r24, 0x0250
    139e:	90 91 51 02 	lds	r25, 0x0251
    13a2:	a0 91 52 02 	lds	r26, 0x0252
    13a6:	b0 91 53 02 	lds	r27, 0x0253
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	4a 07       	cpc	r20, r26
    13b0:	5b 07       	cpc	r21, r27
    13b2:	21 f1       	breq	.+72     	; 0x13fc <__vector_8+0xa0>
		(*g_timerInterruptHandler[TIMER_1])();
		g_timersInterruptActualCount[TIMER_1] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_1]++;
    13b4:	80 91 44 02 	lds	r24, 0x0244
    13b8:	90 91 45 02 	lds	r25, 0x0245
    13bc:	a0 91 46 02 	lds	r26, 0x0246
    13c0:	b0 91 47 02 	lds	r27, 0x0247
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	b1 1d       	adc	r27, r1
    13ca:	80 93 44 02 	sts	0x0244, r24
    13ce:	90 93 45 02 	sts	0x0245, r25
    13d2:	a0 93 46 02 	sts	0x0246, r26
    13d6:	b0 93 47 02 	sts	0x0247, r27
	}
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

/* ISR for timer 1 OVF */
ISR(TIMER1_OVF_vect) {
	TCNT1_R = g_timer1_ovf_start;
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
		(*g_timerInterruptHandler[TIMER_1])();
    13fc:	e0 91 5f 02 	lds	r30, 0x025F
    1400:	f0 91 60 02 	lds	r31, 0x0260
    1404:	09 95       	icall
		g_timersInterruptActualCount[TIMER_1] = 1;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	80 93 44 02 	sts	0x0244, r24
    1412:	90 93 45 02 	sts	0x0245, r25
    1416:	a0 93 46 02 	sts	0x0246, r26
    141a:	b0 93 47 02 	sts	0x0247, r27
    141e:	dd cf       	rjmp	.-70     	; 0x13da <__vector_8+0x7e>

00001420 <__vector_6>:
		g_timersInterruptActualCount[TIMER_1]++;
	}
}

/* ISR for timer 1A CTC */
ISR(TIMER1_COMPA_vect) {
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
    1442:	20 91 44 02 	lds	r18, 0x0244
    1446:	30 91 45 02 	lds	r19, 0x0245
    144a:	40 91 46 02 	lds	r20, 0x0246
    144e:	50 91 47 02 	lds	r21, 0x0247
    1452:	80 91 50 02 	lds	r24, 0x0250
    1456:	90 91 51 02 	lds	r25, 0x0251
    145a:	a0 91 52 02 	lds	r26, 0x0252
    145e:	b0 91 53 02 	lds	r27, 0x0253
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	4a 07       	cpc	r20, r26
    1468:	5b 07       	cpc	r21, r27
    146a:	21 f1       	breq	.+72     	; 0x14b4 <__vector_6+0x94>
		(*g_timerInterruptHandler[TIMER_1])();
		g_timersInterruptActualCount[TIMER_1] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_1]++;
    146c:	80 91 44 02 	lds	r24, 0x0244
    1470:	90 91 45 02 	lds	r25, 0x0245
    1474:	a0 91 46 02 	lds	r26, 0x0246
    1478:	b0 91 47 02 	lds	r27, 0x0247
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	a1 1d       	adc	r26, r1
    1480:	b1 1d       	adc	r27, r1
    1482:	80 93 44 02 	sts	0x0244, r24
    1486:	90 93 45 02 	sts	0x0245, r25
    148a:	a0 93 46 02 	sts	0x0246, r26
    148e:	b0 93 47 02 	sts	0x0247, r27
	}
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti
}

/* ISR for timer 1A CTC */
ISR(TIMER1_COMPA_vect) {
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
		(*g_timerInterruptHandler[TIMER_1])();
    14b4:	e0 91 5f 02 	lds	r30, 0x025F
    14b8:	f0 91 60 02 	lds	r31, 0x0260
    14bc:	09 95       	icall
		g_timersInterruptActualCount[TIMER_1] = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	80 93 44 02 	sts	0x0244, r24
    14ca:	90 93 45 02 	sts	0x0245, r25
    14ce:	a0 93 46 02 	sts	0x0246, r26
    14d2:	b0 93 47 02 	sts	0x0247, r27
    14d6:	dd cf       	rjmp	.-70     	; 0x1492 <__vector_6+0x72>

000014d8 <TIMER_init>:
 * [in]: TIMER_config* a_timerConfig
 * 		 pointer to a struct containing the config for the timer
 * [Return]: uint8_t
 * 			 TIMER_SUCCESS or TIMER_ERROR
 */
uint8_t TIMER_init(TIMER_config* a_timerConfig){
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ec 01       	movw	r28, r24
	/* Check if ticks is equal to zero */
	if (a_timerConfig->ticks == 0) {
    14de:	4b 81       	ldd	r20, Y+3	; 0x03
    14e0:	5c 81       	ldd	r21, Y+4	; 0x04
    14e2:	6d 81       	ldd	r22, Y+5	; 0x05
    14e4:	7e 81       	ldd	r23, Y+6	; 0x06
    14e6:	41 15       	cp	r20, r1
    14e8:	51 05       	cpc	r21, r1
    14ea:	61 05       	cpc	r22, r1
    14ec:	71 05       	cpc	r23, r1
    14ee:	89 f1       	breq	.+98     	; 0x1552 <TIMER_init+0x7a>
		return TIMER_ERROR;
	}
	/* Select TIMER_0, TIMER_1, or TIMER_2 */
	switch (a_timerConfig->timer) {
    14f0:	88 81       	ld	r24, Y
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	41 f1       	breq	.+80     	; 0x1546 <TIMER_init+0x6e>
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	80 f1       	brcs	.+96     	; 0x155a <TIMER_init+0x82>
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	51 f5       	brne	.+84     	; 0x1552 <TIMER_init+0x7a>
			/* store timer1 prescaler to start the timer with it when calling TIMER_start() */
			g_timers_init_prescaler[TIMER_1] = a_timerConfig->prescaler;

			break;
			case TIMER_2:
				switch (a_timerConfig->mode) {
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	80 32       	cpi	r24, 0x20	; 32
    1502:	09 f4       	brne	.+2      	; 0x1506 <TIMER_init+0x2e>
    1504:	88 c0       	rjmp	.+272    	; 0x1616 <TIMER_init+0x13e>
    1506:	80 32       	cpi	r24, 0x20	; 32
    1508:	20 f1       	brcs	.+72     	; 0x1552 <TIMER_init+0x7a>
    150a:	83 32       	cpi	r24, 0x23	; 35
    150c:	10 f5       	brcc	.+68     	; 0x1552 <TIMER_init+0x7a>

					break;
				case TIMER_2_CTC:
				case TIMER_2_CTC_TOGGLE_OC2:
					/* set  timer start to 0 */
					TCNT2_R = 0;
    150e:	14 bc       	out	0x24, r1	; 36

					/* compare on the value of ticks per interrupt */
					OCR2_R = ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, TIMER_2_MAX_COUNT) - 1;
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	2f ef       	ldi	r18, 0xFF	; 255
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ticksPerIteration>
    151a:	81 50       	subi	r24, 0x01	; 1
    151c:	83 bd       	out	0x23, r24	; 35

					/* set timer pointer to handler */
					g_timerInterruptHandler[TIMER_2] = a_timerConfig->ptrToHandler;
    151e:	8f 81       	ldd	r24, Y+7	; 0x07
    1520:	98 85       	ldd	r25, Y+8	; 0x08
    1522:	90 93 62 02 	sts	0x0262, r25
    1526:	80 93 61 02 	sts	0x0261, r24
					/* select comp mode
					 * FOC2 = 1
					 * WGM20 = 0, WGM21 = 1
					 * COM20 = 0, COM21 = 0
					 *  */
					TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);
    152a:	88 e8       	ldi	r24, 0x88	; 136
    152c:	85 bd       	out	0x25, r24	; 37

					/* enable OC2 if mode is TIMER_2_CTC_TOGGLE_OC2  */
					if (a_timerConfig->mode == TIMER_2_CTC_TOGGLE_OC2) {
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	82 32       	cpi	r24, 0x22	; 34
    1532:	09 f4       	brne	.+2      	; 0x1536 <TIMER_init+0x5e>
    1534:	a0 c0       	rjmp	.+320    	; 0x1676 <TIMER_init+0x19e>
						DIO_pinInit(OC2, PIN_OUTPUT);
						SET_BIT(TCCR2_R, COM20);
					}

					/* enable timer0 comp interrupt */
					SET_BIT(TIMSK_R, OCIE2);
    1536:	89 b7       	in	r24, 0x39	; 57
    1538:	80 68       	ori	r24, 0x80	; 128
    153a:	89 bf       	out	0x39, r24	; 57
					break;
				default:
					return TIMER_ERROR;
				}
				/* store timer2 prescaler to start the timer with it when calling TIMER_start() */
				g_timers_init_prescaler[TIMER_2] = a_timerConfig->prescaler;
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 93 5c 02 	sts	0x025C, r24
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <TIMER_init+0x7c>
		/* store timer0 prescaler to start the timer with it when calling TIMER_start() */
		g_timers_init_prescaler[TIMER_0] = a_timerConfig->prescaler;

		break;
		case TIMER_1:
			switch (a_timerConfig->mode) {
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	80 31       	cpi	r24, 0x10	; 16
    154a:	09 f4       	brne	.+2      	; 0x154e <TIMER_init+0x76>
    154c:	79 c0       	rjmp	.+242    	; 0x1640 <TIMER_init+0x168>
    154e:	80 31       	cpi	r24, 0x10	; 16
    1550:	d0 f5       	brcc	.+116    	; 0x15c6 <TIMER_init+0xee>
					return TIMER_ERROR;
				}
				/* store timer2 prescaler to start the timer with it when calling TIMER_start() */
				g_timers_init_prescaler[TIMER_2] = a_timerConfig->prescaler;

				break;
    1552:	80 e0       	ldi	r24, 0x00	; 0
					/* timer not defined */
					return TIMER_ERROR;
	}
	/* return success */
	return TIMER_SUCCESS;
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret
		return TIMER_ERROR;
	}
	/* Select TIMER_0, TIMER_1, or TIMER_2 */
	switch (a_timerConfig->timer) {
	case TIMER_0:
		switch (a_timerConfig->mode) {
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	88 23       	and	r24, r24
    155e:	c9 f4       	brne	.+50     	; 0x1592 <TIMER_init+0xba>
		case TIMER_0_OVF:
			/* set start value of the timer to be equal 256 - ticks per interrupt */
			g_timer0_ovf_start = TIMER_0_MAX_COUNT + 1 - ticksPerIteration(a_timerConfig->timer, \
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ticksPerIteration>
    156a:	81 95       	neg	r24
    156c:	80 93 63 02 	sts	0x0263, r24
					a_timerConfig->ticks, TIMER_0_MAX_COUNT);
			TCNT0_R = g_timer0_ovf_start;
    1570:	82 bf       	out	0x32, r24	; 50

			/* set timer pointer to handler */
			g_timerInterruptHandler[TIMER_0] = a_timerConfig->ptrToHandler;
    1572:	8f 81       	ldd	r24, Y+7	; 0x07
    1574:	98 85       	ldd	r25, Y+8	; 0x08
    1576:	90 93 5e 02 	sts	0x025E, r25
    157a:	80 93 5d 02 	sts	0x025D, r24
			/* select ovf mode
			 * FOC0 = 1
			 * WGM00 = 0, WGM01 = 0
			 * COM00 = 0, COM01 = 0
			 * */
			TCCR0_R = SELECT_BIT(FOC0);
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	83 bf       	out	0x33, r24	; 51

			/* enable timer0 ovf interrupt */
			SET_BIT(TIMSK_R, TOIE0);
    1582:	89 b7       	in	r24, 0x39	; 57
    1584:	81 60       	ori	r24, 0x01	; 1
    1586:	89 bf       	out	0x39, r24	; 57
		default:
			return TIMER_ERROR;
		}

		/* store timer0 prescaler to start the timer with it when calling TIMER_start() */
		g_timers_init_prescaler[TIMER_0] = a_timerConfig->prescaler;
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	80 93 5a 02 	sts	0x025A, r24
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	e1 cf       	rjmp	.-62     	; 0x1554 <TIMER_init+0x7c>
		return TIMER_ERROR;
	}
	/* Select TIMER_0, TIMER_1, or TIMER_2 */
	switch (a_timerConfig->timer) {
	case TIMER_0:
		switch (a_timerConfig->mode) {
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	f0 f6       	brcc	.-68     	; 0x1552 <TIMER_init+0x7a>
			SET_BIT(TIMSK_R, TOIE0);
			break;
		case TIMER_0_CTC:
		case TIMER_0_CTC_TOGGLE_OC0:
			/* set  timer start to 0 */
			TCNT0_R = 0;
    1596:	12 be       	out	0x32, r1	; 50

			/* compare on the value of ticks per interrupt */
			OCR0_R = ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, TIMER_0_MAX_COUNT) - 1;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	2f ef       	ldi	r18, 0xFF	; 255
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ticksPerIteration>
    15a2:	81 50       	subi	r24, 0x01	; 1
    15a4:	8c bf       	out	0x3c, r24	; 60

			/* set timer pointer to handler */
			g_timerInterruptHandler[TIMER_0] = a_timerConfig->ptrToHandler;
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	98 85       	ldd	r25, Y+8	; 0x08
    15aa:	90 93 5e 02 	sts	0x025E, r25
    15ae:	80 93 5d 02 	sts	0x025D, r24
			/* select comp mode
			 * FOC0 = 1
			 * WGM00 = 0, WGM01 = 1
			 * COM00 = 0, COM01 = 0
			 *  */
			TCCR0_R = SELECT_BIT(FOC0) | SELECT_BIT(WGM01);
    15b2:	88 e8       	ldi	r24, 0x88	; 136
    15b4:	83 bf       	out	0x33, r24	; 51

			/* enable OC0 if mode is TIMER_0_CTC_TOGGLE_OC0  */
			if (a_timerConfig->mode == TIMER_0_CTC_TOGGLE_OC0) {
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	09 f4       	brne	.+2      	; 0x15be <TIMER_init+0xe6>
    15bc:	64 c0       	rjmp	.+200    	; 0x1686 <TIMER_init+0x1ae>
				DIO_pinInit(OC0, PIN_OUTPUT);
				SET_BIT(TCCR0_R, COM00);
			}

			/* enable timer0 comp interrupt */
			SET_BIT(TIMSK_R, OCIE0);
    15be:	89 b7       	in	r24, 0x39	; 57
    15c0:	82 60       	ori	r24, 0x02	; 2
    15c2:	89 bf       	out	0x39, r24	; 57
    15c4:	e1 cf       	rjmp	.-62     	; 0x1588 <TIMER_init+0xb0>
		/* store timer0 prescaler to start the timer with it when calling TIMER_start() */
		g_timers_init_prescaler[TIMER_0] = a_timerConfig->prescaler;

		break;
		case TIMER_1:
			switch (a_timerConfig->mode) {
    15c6:	85 31       	cpi	r24, 0x15	; 21
    15c8:	20 f6       	brcc	.-120    	; 0x1552 <TIMER_init+0x7a>
			case TIMER_1_CTC:
			case TIMER_1_CTC_TOGGLE_OC1A:
			case TIMER_1_CTC_TOGGLE_OC1B:
			case TIMER_1_CTC_TOGGLE_OC1A_OC1B:
				/* set  timer start to 0 */
				TCNT1_R = 0;
    15ca:	1d bc       	out	0x2d, r1	; 45
    15cc:	1c bc       	out	0x2c, r1	; 44

				/* compare on the value of ticks per interrupt */
				OCR1A_R = ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, TIMER_1_MAX_COUNT) - 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	2f ef       	ldi	r18, 0xFF	; 255
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ticksPerIteration>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	9b bd       	out	0x2b, r25	; 43
    15dc:	8a bd       	out	0x2a, r24	; 42

				/* set timer pointer to handler */
				g_timerInterruptHandler[TIMER_1] = a_timerConfig->ptrToHandler;
    15de:	8f 81       	ldd	r24, Y+7	; 0x07
    15e0:	98 85       	ldd	r25, Y+8	; 0x08
    15e2:	90 93 60 02 	sts	0x0260, r25
    15e6:	80 93 5f 02 	sts	0x025F, r24
				/* select comp mode
				 * FOC1A = 1, FOC1B = 1
				 * WGM10 = 0, WGM11 = 0, WGM12 = 1, WGM13 = 0
				 * COM1A0 = 0, COM1B0 = 0, COM1A1 = 0, COM1B1 = 0
				 *  */
				TCCR1A_R = SELECT_BIT(FOC1A) | SELECT_BIT(FOC1B);
    15ea:	8c e0       	ldi	r24, 0x0C	; 12
    15ec:	8f bd       	out	0x2f, r24	; 47
				TCCR1B_R = SELECT_BIT(WGM12);
    15ee:	88 e0       	ldi	r24, 0x08	; 8
    15f0:	8e bd       	out	0x2e, r24	; 46

				/* enable timer1 compA interrupt */
				SET_BIT(TIMSK_R, OCIE1A);
    15f2:	89 b7       	in	r24, 0x39	; 57
    15f4:	80 61       	ori	r24, 0x10	; 16
    15f6:	89 bf       	out	0x39, r24	; 57

				/* enable OC1A if mode is TIMER_1_CTC_TOGGLE_OC1A  */
				if (a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A) {
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	82 31       	cpi	r24, 0x12	; 18
    15fc:	09 f4       	brne	.+2      	; 0x1600 <TIMER_init+0x128>
    15fe:	4b c0       	rjmp	.+150    	; 0x1696 <TIMER_init+0x1be>
					DIO_pinInit(OC1A, PIN_OUTPUT);
					SET_BIT(TCCR1A_R, COM1A0);
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1B) {
    1600:	83 31       	cpi	r24, 0x13	; 19
    1602:	09 f4       	brne	.+2      	; 0x1606 <TIMER_init+0x12e>
    1604:	50 c0       	rjmp	.+160    	; 0x16a6 <TIMER_init+0x1ce>
					DIO_pinInit(OC1B, PIN_OUTPUT);
					SET_BIT(TCCR1A_R, COM1B0);
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A_OC1B) {
    1606:	84 31       	cpi	r24, 0x14	; 20
    1608:	09 f4       	brne	.+2      	; 0x160c <TIMER_init+0x134>
    160a:	55 c0       	rjmp	.+170    	; 0x16b6 <TIMER_init+0x1de>
			default:
				return TIMER_ERROR;
			}

			/* store timer1 prescaler to start the timer with it when calling TIMER_start() */
			g_timers_init_prescaler[TIMER_1] = a_timerConfig->prescaler;
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	80 93 5b 02 	sts	0x025B, r24
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	9f cf       	rjmp	.-194    	; 0x1554 <TIMER_init+0x7c>
			break;
			case TIMER_2:
				switch (a_timerConfig->mode) {
				case TIMER_2_OVF:
					/* set start value of the timer to be equal 256 - ticks per interrupt */
					g_timer2_ovf_start = TIMER_2_MAX_COUNT + 1 - ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, \
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	2f ef       	ldi	r18, 0xFF	; 255
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ticksPerIteration>
    1620:	81 95       	neg	r24
    1622:	80 93 64 02 	sts	0x0264, r24
							TIMER_2_MAX_COUNT);
					TCNT2_R = g_timer2_ovf_start;
    1626:	84 bd       	out	0x24, r24	; 36

					/* set timer pointer to handler */
					g_timerInterruptHandler[TIMER_2] = a_timerConfig->ptrToHandler;
    1628:	8f 81       	ldd	r24, Y+7	; 0x07
    162a:	98 85       	ldd	r25, Y+8	; 0x08
    162c:	90 93 62 02 	sts	0x0262, r25
    1630:	80 93 61 02 	sts	0x0261, r24
					/* select ovf mode
					 * FOC2 = 1
					 * WGM20 = 0, WGM21 = 0
					 * COM20 = 0, COM21 = 0
					 * */
					TCCR2_R = SELECT_BIT(FOC2);
    1634:	80 e8       	ldi	r24, 0x80	; 128
    1636:	85 bd       	out	0x25, r24	; 37

					/* enable timer2 ovf interrupt */
					SET_BIT(TIMSK_R, TOIE2);
    1638:	89 b7       	in	r24, 0x39	; 57
    163a:	80 64       	ori	r24, 0x40	; 64
    163c:	89 bf       	out	0x39, r24	; 57
    163e:	7e cf       	rjmp	.-260    	; 0x153c <TIMER_init+0x64>
		case TIMER_1:
			switch (a_timerConfig->mode) {

			case TIMER_1_OVF:
				/* set start value of the timer to be equal 65536 - ticks per interrupt */
				g_timer1_ovf_start = TIMER_1_MAX_COUNT + 1 - ticksPerIteration(a_timerConfig->timer, \
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	2f ef       	ldi	r18, 0xFF	; 255
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ticksPerIteration>
    164a:	90 95       	com	r25
    164c:	81 95       	neg	r24
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	90 93 59 02 	sts	0x0259, r25
    1654:	80 93 58 02 	sts	0x0258, r24
						a_timerConfig->ticks, TIMER_1_MAX_COUNT);
				TCNT1_R = g_timer1_ovf_start;
    1658:	9d bd       	out	0x2d, r25	; 45
    165a:	8c bd       	out	0x2c, r24	; 44

				/* set timer pointer to handler */
				g_timerInterruptHandler[TIMER_1] = a_timerConfig->ptrToHandler;
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	90 93 60 02 	sts	0x0260, r25
    1664:	80 93 5f 02 	sts	0x025F, r24
				 * FOC1A = 1, FOC1B = 1
				 * WGM10 = 0, WGM11 = 0, WGM12 = 0, WGM13 = 0,
				 * COM1A0 = 0, COM1A1 = 0, COM1B0 = 0, COM1B1 = 0
				 * ICNC1 = 0, ICES1 = 0
				 */
				TCCR1A_R = SELECT_BIT(FOC1A) | SELECT_BIT(FOC1B);
    1668:	8c e0       	ldi	r24, 0x0C	; 12
    166a:	8f bd       	out	0x2f, r24	; 47
				TCCR1B_R = 0;
    166c:	1e bc       	out	0x2e, r1	; 46

				/* enable timer1 ovf interrupt */
				SET_BIT(TIMSK_R, TOIE1);
    166e:	89 b7       	in	r24, 0x39	; 57
    1670:	84 60       	ori	r24, 0x04	; 4
    1672:	89 bf       	out	0x39, r24	; 57
    1674:	cb cf       	rjmp	.-106    	; 0x160c <TIMER_init+0x134>
					 *  */
					TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);

					/* enable OC2 if mode is TIMER_2_CTC_TOGGLE_OC2  */
					if (a_timerConfig->mode == TIMER_2_CTC_TOGGLE_OC2) {
						DIO_pinInit(OC2, PIN_OUTPUT);
    1676:	87 e3       	ldi	r24, 0x37	; 55
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
						SET_BIT(TCCR2_R, COM20);
    167e:	85 b5       	in	r24, 0x25	; 37
    1680:	80 61       	ori	r24, 0x10	; 16
    1682:	85 bd       	out	0x25, r24	; 37
    1684:	58 cf       	rjmp	.-336    	; 0x1536 <TIMER_init+0x5e>
			 *  */
			TCCR0_R = SELECT_BIT(FOC0) | SELECT_BIT(WGM01);

			/* enable OC0 if mode is TIMER_0_CTC_TOGGLE_OC0  */
			if (a_timerConfig->mode == TIMER_0_CTC_TOGGLE_OC0) {
				DIO_pinInit(OC0, PIN_OUTPUT);
    1686:	83 e1       	ldi	r24, 0x13	; 19
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
				SET_BIT(TCCR0_R, COM00);
    168e:	83 b7       	in	r24, 0x33	; 51
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	83 bf       	out	0x33, r24	; 51
    1694:	94 cf       	rjmp	.-216    	; 0x15be <TIMER_init+0xe6>
				/* enable timer1 compA interrupt */
				SET_BIT(TIMSK_R, OCIE1A);

				/* enable OC1A if mode is TIMER_1_CTC_TOGGLE_OC1A  */
				if (a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A) {
					DIO_pinInit(OC1A, PIN_OUTPUT);
    1696:	85 e3       	ldi	r24, 0x35	; 53
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
					SET_BIT(TCCR1A_R, COM1A0);
    169e:	8f b5       	in	r24, 0x2f	; 47
    16a0:	80 64       	ori	r24, 0x40	; 64
    16a2:	8f bd       	out	0x2f, r24	; 47
    16a4:	b3 cf       	rjmp	.-154    	; 0x160c <TIMER_init+0x134>
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1B) {
					DIO_pinInit(OC1B, PIN_OUTPUT);
    16a6:	84 e3       	ldi	r24, 0x34	; 52
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
					SET_BIT(TCCR1A_R, COM1B0);
    16ae:	8f b5       	in	r24, 0x2f	; 47
    16b0:	80 61       	ori	r24, 0x10	; 16
    16b2:	8f bd       	out	0x2f, r24	; 47
    16b4:	ab cf       	rjmp	.-170    	; 0x160c <TIMER_init+0x134>
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A_OC1B) {
					DIO_pinInit(OC1A, PIN_OUTPUT);
    16b6:	85 e3       	ldi	r24, 0x35	; 53
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
					DIO_pinInit(OC1B, PIN_OUTPUT);
    16be:	84 e3       	ldi	r24, 0x34	; 52
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
					SET_BIT(TCCR1A_R, COM1A0);
    16c6:	8f b5       	in	r24, 0x2f	; 47
    16c8:	80 64       	ori	r24, 0x40	; 64
    16ca:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A_R, COM1B0);
    16cc:	8f b5       	in	r24, 0x2f	; 47
    16ce:	80 61       	ori	r24, 0x10	; 16
    16d0:	8f bd       	out	0x2f, r24	; 47
    16d2:	9c cf       	rjmp	.-200    	; 0x160c <TIMER_init+0x134>

000016d4 <DIO_portInit>:
 * [in]: DIO_PORTDirectionType a_direction
 * 		 the direction of the port PORT_INPUT or PORT_OUTPUT
 * [Return]: void
 */
void DIO_portInit(uint8_t a_port, DIO_PORTDirectionType a_direction)
{
    16d4:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	48 f4       	brcc	.+18     	; 0x16ec <DIO_portInit+0x18>
	{
		GET_DDR_FROM_PORT_NO(a_port) = a_direction;
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	98 9f       	mul	r25, r24
    16de:	80 2d       	mov	r24, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	ea e3       	ldi	r30, 0x3A	; 58
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	e8 1b       	sub	r30, r24
    16e8:	f1 09       	sbc	r31, r1
    16ea:	60 83       	st	Z, r22
    16ec:	08 95       	ret

000016ee <DIO_portInitPartial>:
 * [in]: uint8_t a_mask
 * 		 the pin to start writing from, it represents the shift amount
 * [Return]: void
 */
void DIO_portInitPartial(uint8_t a_port, DIO_PORTDirectionType a_direction, uint8_t a_mask, uint8_t a_startPin)
{
    16ee:	38 2f       	mov	r19, r24
    16f0:	94 2f       	mov	r25, r20
	uint8_t startPinNumber = GET_PIN_NO(a_startPin);
	if(DIO_PORT_IS_VALID(a_port))
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	f8 f4       	brcc	.+62     	; 0x1734 <DIO_portInitPartial+0x46>
	{
		COPY_BITS(GET_DDR_FROM_PORT_NO(a_port), a_mask, a_direction, startPinNumber);
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	38 9f       	mul	r19, r24
    16fa:	80 2d       	mov	r24, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	ea e3       	ldi	r30, 0x3A	; 58
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	e8 1b       	sub	r30, r24
    1704:	f1 09       	sbc	r31, r1
    1706:	80 81       	ld	r24, Z
    1708:	42 2f       	mov	r20, r18
    170a:	4f 70       	andi	r20, 0x0F	; 15
    170c:	29 2f       	mov	r18, r25
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	04 2e       	mov	r0, r20
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_portInitPartial+0x2a>
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_portInitPartial+0x26>
    171c:	20 95       	com	r18
    171e:	28 23       	and	r18, r24
    1720:	96 23       	and	r25, r22
    1722:	89 2f       	mov	r24, r25
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_portInitPartial+0x3e>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	4a 95       	dec	r20
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_portInitPartial+0x3a>
    1730:	28 2b       	or	r18, r24
    1732:	20 83       	st	Z, r18
    1734:	08 95       	ret

00001736 <DIO_pinInit>:
 * [Return]: void
 */
void  DIO_pinInit(uint8_t a_pin, DIO_PinDirectionType a_direction)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    1736:	98 2f       	mov	r25, r24
    1738:	92 95       	swap	r25
    173a:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    173c:	94 30       	cpi	r25, 0x04	; 4
    173e:	c0 f4       	brcc	.+48     	; 0x1770 <DIO_pinInit+0x3a>
 */
void  DIO_pinInit(uint8_t a_pin, DIO_PinDirectionType a_direction)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1740:	38 2f       	mov	r19, r24
    1742:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1744:	38 30       	cpi	r19, 0x08	; 8
    1746:	a0 f4       	brcc	.+40     	; 0x1770 <DIO_pinInit+0x3a>
	{
		if(a_direction == PIN_INPUT)
    1748:	66 23       	and	r22, r22
    174a:	99 f0       	breq	.+38     	; 0x1772 <DIO_pinInit+0x3c>
		{
			CLEAR_BIT(GET_DDR_FROM_PORT_NO(portNo), pinNo);
		}
		else
		{
			SET_BIT(GET_DDR_FROM_PORT_NO(portNo), pinNo);
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	98 9f       	mul	r25, r24
    1750:	80 2d       	mov	r24, r0
    1752:	11 24       	eor	r1, r1
    1754:	ea e3       	ldi	r30, 0x3A	; 58
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	e8 1b       	sub	r30, r24
    175a:	f1 09       	sbc	r31, r1
    175c:	20 81       	ld	r18, Z
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_pinInit+0x32>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	3a 95       	dec	r19
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_pinInit+0x2e>
    176c:	28 2b       	or	r18, r24
    176e:	20 83       	st	Z, r18
    1770:	08 95       	ret
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
	{
		if(a_direction == PIN_INPUT)
		{
			CLEAR_BIT(GET_DDR_FROM_PORT_NO(portNo), pinNo);
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	98 9f       	mul	r25, r24
    1776:	80 2d       	mov	r24, r0
    1778:	11 24       	eor	r1, r1
    177a:	ea e3       	ldi	r30, 0x3A	; 58
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	e8 1b       	sub	r30, r24
    1780:	f1 09       	sbc	r31, r1
    1782:	20 81       	ld	r18, Z
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_pinInit+0x58>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	3a 95       	dec	r19
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_pinInit+0x54>
    1792:	80 95       	com	r24
    1794:	28 23       	and	r18, r24
    1796:	20 83       	st	Z, r18
    1798:	08 95       	ret

0000179a <DIO_writePort>:
 * 		 if a pin is input the corrsponding bit in the a_data controls
 * 		 the internal pullup resistor, 1 => enable, 0 => disable
 * [Return]: void
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
    179a:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	48 f4       	brcc	.+18     	; 0x17b2 <DIO_writePort+0x18>
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	98 9f       	mul	r25, r24
    17a4:	80 2d       	mov	r24, r0
    17a6:	11 24       	eor	r1, r1
    17a8:	eb e3       	ldi	r30, 0x3B	; 59
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	e8 1b       	sub	r30, r24
    17ae:	f1 09       	sbc	r31, r1
    17b0:	60 83       	st	Z, r22
    17b2:	08 95       	ret

000017b4 <DIO_writePortPartial>:
 * [in]: uint8_t a_startPin
 * 		 the pin to start writing from, it represents the shift amount
 * [Return]: void
 */
void DIO_writePortPartial(uint8_t a_port, uint8_t a_data, uint8_t a_dataMask, uint8_t a_startPin)
{
    17b4:	38 2f       	mov	r19, r24
    17b6:	94 2f       	mov	r25, r20
	uint8_t startPinNumber = GET_PIN_NO(a_startPin);
	if(DIO_PORT_IS_VALID(a_port))
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	f8 f4       	brcc	.+62     	; 0x17fa <DIO_writePortPartial+0x46>
	{
		COPY_BITS(GET_PORT_FROM_PORT_NO(a_port), a_dataMask, a_data, startPinNumber);
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	38 9f       	mul	r19, r24
    17c0:	80 2d       	mov	r24, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	eb e3       	ldi	r30, 0x3B	; 59
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	e8 1b       	sub	r30, r24
    17ca:	f1 09       	sbc	r31, r1
    17cc:	80 81       	ld	r24, Z
    17ce:	42 2f       	mov	r20, r18
    17d0:	4f 70       	andi	r20, 0x0F	; 15
    17d2:	29 2f       	mov	r18, r25
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	04 2e       	mov	r0, r20
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_writePortPartial+0x2a>
    17da:	22 0f       	add	r18, r18
    17dc:	33 1f       	adc	r19, r19
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_writePortPartial+0x26>
    17e2:	20 95       	com	r18
    17e4:	28 23       	and	r18, r24
    17e6:	96 23       	and	r25, r22
    17e8:	89 2f       	mov	r24, r25
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_writePortPartial+0x3e>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	4a 95       	dec	r20
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_writePortPartial+0x3a>
    17f6:	28 2b       	or	r18, r24
    17f8:	20 83       	st	Z, r18
    17fa:	08 95       	ret

000017fc <DIO_writePin>:
 * [Return]: void
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    17fc:	98 2f       	mov	r25, r24
    17fe:	92 95       	swap	r25
    1800:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1802:	94 30       	cpi	r25, 0x04	; 4
    1804:	c0 f4       	brcc	.+48     	; 0x1836 <DIO_writePin+0x3a>
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1806:	38 2f       	mov	r19, r24
    1808:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    180a:	38 30       	cpi	r19, 0x08	; 8
    180c:	a0 f4       	brcc	.+40     	; 0x1836 <DIO_writePin+0x3a>
	{
		if(a_data == LOW)
    180e:	66 23       	and	r22, r22
    1810:	99 f0       	breq	.+38     	; 0x1838 <DIO_writePin+0x3c>
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
		}
		else
		{
			SET_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	98 9f       	mul	r25, r24
    1816:	80 2d       	mov	r24, r0
    1818:	11 24       	eor	r1, r1
    181a:	eb e3       	ldi	r30, 0x3B	; 59
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	e8 1b       	sub	r30, r24
    1820:	f1 09       	sbc	r31, r1
    1822:	20 81       	ld	r18, Z
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_writePin+0x32>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	3a 95       	dec	r19
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_writePin+0x2e>
    1832:	28 2b       	or	r18, r24
    1834:	20 83       	st	Z, r18
    1836:	08 95       	ret
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
	{
		if(a_data == LOW)
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	98 9f       	mul	r25, r24
    183c:	80 2d       	mov	r24, r0
    183e:	11 24       	eor	r1, r1
    1840:	eb e3       	ldi	r30, 0x3B	; 59
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	e8 1b       	sub	r30, r24
    1846:	f1 09       	sbc	r31, r1
    1848:	20 81       	ld	r18, Z
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_writePin+0x58>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	3a 95       	dec	r19
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_writePin+0x54>
    1858:	80 95       	com	r24
    185a:	28 23       	and	r18, r24
    185c:	20 83       	st	Z, r18
    185e:	08 95       	ret

00001860 <DIO_readPort>:
 * 		 the port number to read from
 * [Return]: uint8_t
 * 			 the data read from the port
 */
uint8_t DIO_readPort(uint8_t a_port)
{
    1860:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	50 f4       	brcc	.+20     	; 0x187a <DIO_readPort+0x1a>
	{
		return GET_PIN_FROM_PORT_NO(a_port);
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	98 9f       	mul	r25, r24
    186a:	80 2d       	mov	r24, r0
    186c:	11 24       	eor	r1, r1
    186e:	e9 e3       	ldi	r30, 0x39	; 57
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	e8 1b       	sub	r30, r24
    1874:	f1 09       	sbc	r31, r1
    1876:	80 81       	ld	r24, Z
	}
	return 0;
}
    1878:	08 95       	ret
 * [Return]: uint8_t
 * 			 the data read from the port
 */
uint8_t DIO_readPort(uint8_t a_port)
{
	if(DIO_PORT_IS_VALID(a_port))
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	08 95       	ret

0000187e <DIO_readPin>:
 * 			 the data read from the pin HIGH or LOW
 */
uint8_t DIO_readPin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    187e:	98 2f       	mov	r25, r24
    1880:	92 95       	swap	r25
    1882:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1884:	94 30       	cpi	r25, 0x04	; 4
    1886:	f0 f4       	brcc	.+60     	; 0x18c4 <DIO_readPin+0x46>
 */
uint8_t DIO_readPin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1888:	48 2f       	mov	r20, r24
    188a:	4f 70       	andi	r20, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    188c:	48 30       	cpi	r20, 0x08	; 8
    188e:	d0 f4       	brcc	.+52     	; 0x18c4 <DIO_readPin+0x46>
	{
		return GET_BIT(GET_PIN_FROM_PORT_NO(portNo), pinNo);
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	98 9f       	mul	r25, r24
    1894:	80 2d       	mov	r24, r0
    1896:	11 24       	eor	r1, r1
    1898:	e9 e3       	ldi	r30, 0x39	; 57
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	e8 1b       	sub	r30, r24
    189e:	f1 09       	sbc	r31, r1
    18a0:	80 81       	ld	r24, Z
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	04 2e       	mov	r0, r20
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_readPin+0x32>
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_readPin+0x2e>
    18b4:	82 23       	and	r24, r18
    18b6:	93 23       	and	r25, r19
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_readPin+0x40>
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	4a 95       	dec	r20
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_readPin+0x3c>
    18c2:	08 95       	ret
    18c4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    18c6:	08 95       	ret

000018c8 <DIO_togglePort>:
 * [in]: uint8_t a_port
 * 		 the port number to toggle
 * [Return]: void
 */
void DIO_togglePort(uint8_t a_port)
{
    18c8:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	58 f4       	brcc	.+22     	; 0x18e4 <DIO_togglePort+0x1c>
	{
		GET_PORT_FROM_PORT_NO(a_port) ^= ALL_HIGH;
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	98 9f       	mul	r25, r24
    18d2:	80 2d       	mov	r24, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	eb e3       	ldi	r30, 0x3B	; 59
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	e8 1b       	sub	r30, r24
    18dc:	f1 09       	sbc	r31, r1
    18de:	80 81       	ld	r24, Z
    18e0:	80 95       	com	r24
    18e2:	80 83       	st	Z, r24
    18e4:	08 95       	ret

000018e6 <DIO_togglePin>:
 * [Return]: void
 */
void DIO_togglePin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    18e6:	98 2f       	mov	r25, r24
    18e8:	92 95       	swap	r25
    18ea:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    18ec:	94 30       	cpi	r25, 0x04	; 4
    18ee:	b0 f4       	brcc	.+44     	; 0x191c <DIO_togglePin+0x36>
 */
void DIO_togglePin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    18f0:	38 2f       	mov	r19, r24
    18f2:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    18f4:	38 30       	cpi	r19, 0x08	; 8
    18f6:	90 f4       	brcc	.+36     	; 0x191c <DIO_togglePin+0x36>
	{
		TOGGLE_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	98 9f       	mul	r25, r24
    18fc:	80 2d       	mov	r24, r0
    18fe:	11 24       	eor	r1, r1
    1900:	eb e3       	ldi	r30, 0x3B	; 59
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	e8 1b       	sub	r30, r24
    1906:	f1 09       	sbc	r31, r1
    1908:	20 81       	ld	r18, Z
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_togglePin+0x2e>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	3a 95       	dec	r19
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_togglePin+0x2a>
    1918:	28 27       	eor	r18, r24
    191a:	20 83       	st	Z, r18
    191c:	08 95       	ret

0000191e <DIO_controlPortInternalPull>:
 * 		 the internal pull option
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPortInternalPull(uint8_t a_port, DIO_InternalPullOptions a_pull)
{
    191e:	98 2f       	mov	r25, r24
	switch(a_pull)
    1920:	66 23       	and	r22, r22
    1922:	69 f4       	brne	.+26     	; 0x193e <DIO_controlPortInternalPull+0x20>
 * 		 the internal pullup resistor, 1 => enable, 0 => disable
 * [Return]: void
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
	if(DIO_PORT_IS_VALID(a_port))
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	88 f4       	brcc	.+34     	; 0x194a <DIO_controlPortInternalPull+0x2c>
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	98 9f       	mul	r25, r24
    192c:	80 2d       	mov	r24, r0
    192e:	11 24       	eor	r1, r1
    1930:	eb e3       	ldi	r30, 0x3B	; 59
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	e8 1b       	sub	r30, r24
    1936:	f1 09       	sbc	r31, r1
    1938:	10 82       	st	Z, r1
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	08 95       	ret
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPortInternalPull(uint8_t a_port, DIO_InternalPullOptions a_pull)
{
	switch(a_pull)
    193e:	61 30       	cpi	r22, 0x01	; 1
    1940:	11 f0       	breq	.+4      	; 0x1946 <DIO_controlPortInternalPull+0x28>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 95       	ret
 * 		 the internal pullup resistor, 1 => enable, 0 => disable
 * [Return]: void
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
	if(DIO_PORT_IS_VALID(a_port))
    1946:	84 30       	cpi	r24, 0x04	; 4
    1948:	10 f0       	brcs	.+4      	; 0x194e <DIO_controlPortInternalPull+0x30>
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    194a:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return DIO_INTERNAL_PULL_NOT_SUPPORTED;
	}
	return DIO_INTERNAL_PULL_SUPPORTED;
}
    194c:	08 95       	ret
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
	if(DIO_PORT_IS_VALID(a_port))
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	98 9f       	mul	r25, r24
    1952:	80 2d       	mov	r24, r0
    1954:	11 24       	eor	r1, r1
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	e8 1b       	sub	r30, r24
    195c:	f1 09       	sbc	r31, r1
    195e:	60 83       	st	Z, r22
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	08 95       	ret

00001964 <DIO_controlPinInternalPull>:
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPinInternalPull(uint8_t a_pin, DIO_InternalPullOptions a_pull)
{
	switch(a_pull)
    1964:	66 23       	and	r22, r22
    1966:	f1 f4       	brne	.+60     	; 0x19a4 <DIO_controlPinInternalPull+0x40>
 * [Return]: void
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    1968:	98 2f       	mov	r25, r24
    196a:	92 95       	swap	r25
    196c:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    196e:	94 30       	cpi	r25, 0x04	; 4
    1970:	10 f5       	brcc	.+68     	; 0x19b6 <DIO_controlPinInternalPull+0x52>
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1972:	38 2f       	mov	r19, r24
    1974:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1976:	38 30       	cpi	r19, 0x08	; 8
    1978:	f0 f4       	brcc	.+60     	; 0x19b6 <DIO_controlPinInternalPull+0x52>
	{
		if(a_data == LOW)
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	98 9f       	mul	r25, r24
    197e:	80 2d       	mov	r24, r0
    1980:	11 24       	eor	r1, r1
    1982:	eb e3       	ldi	r30, 0x3B	; 59
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	e8 1b       	sub	r30, r24
    1988:	f1 09       	sbc	r31, r1
    198a:	20 81       	ld	r18, Z
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <DIO_controlPinInternalPull+0x32>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	3a 95       	dec	r19
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <DIO_controlPinInternalPull+0x2e>
    199a:	80 95       	com	r24
    199c:	28 23       	and	r18, r24
    199e:	20 83       	st	Z, r18
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	08 95       	ret
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPinInternalPull(uint8_t a_pin, DIO_InternalPullOptions a_pull)
{
	switch(a_pull)
    19a4:	61 30       	cpi	r22, 0x01	; 1
    19a6:	11 f0       	breq	.+4      	; 0x19ac <DIO_controlPinInternalPull+0x48>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	08 95       	ret
 * [Return]: void
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    19ac:	98 2f       	mov	r25, r24
    19ae:	92 95       	swap	r25
    19b0:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    19b2:	94 30       	cpi	r25, 0x04	; 4
    19b4:	10 f0       	brcs	.+4      	; 0x19ba <DIO_controlPinInternalPull+0x56>
	{
		if(a_data == LOW)
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    19b6:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return DIO_INTERNAL_PULL_NOT_SUPPORTED;
	}
	return DIO_INTERNAL_PULL_SUPPORTED;
}
    19b8:	08 95       	ret
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    19ba:	38 2f       	mov	r19, r24
    19bc:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    19be:	38 30       	cpi	r19, 0x08	; 8
    19c0:	d0 f7       	brcc	.-12     	; 0x19b6 <DIO_controlPinInternalPull+0x52>
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
		}
		else
		{
			SET_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	98 9f       	mul	r25, r24
    19c6:	80 2d       	mov	r24, r0
    19c8:	11 24       	eor	r1, r1
    19ca:	eb e3       	ldi	r30, 0x3B	; 59
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	e8 1b       	sub	r30, r24
    19d0:	f1 09       	sbc	r31, r1
    19d2:	20 81       	ld	r18, Z
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_controlPinInternalPull+0x7a>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	3a 95       	dec	r19
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_controlPinInternalPull+0x76>
    19e2:	28 2b       	or	r18, r24
    19e4:	20 83       	st	Z, r18
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	08 95       	ret

000019ea <LCD_sendCommand>:
 * [in]: uint8_t a_cmd
 * 	  command to be sent
 * [Return]: void
 */
void LCD_sendCommand(uint8_t a_cmd)
{
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	08 2f       	mov	r16, r24
	DIO_pinInit(LCD_D7, a_direction);

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* init 8 successive pins of the port */
	DIO_portInitPartial(LCD_DATA_PORT, a_direction, 0xFF, LCD_DATA_START_PIN);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	4f ef       	ldi	r20, 0xFF	; 255
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>
	LCD_setDataPinsDir(PIN_INPUT);

#endif

	/* make RS=0 to read cmd, R/W=1 to read */
	DIO_writePin(LCD_RS_PIN, RS_CMD);
    19fc:	82 e1       	ldi	r24, 0x12	; 18
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
	DIO_writePin(LCD_RW_PIN, RW_READ);
    1a04:	81 e1       	ldi	r24, 0x11	; 17
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
		TIMER_DELAY_MS(1);

		DIO_writePin(LCD_ENABLE_PIN, LOW);

#else
		DIO_writePin(LCD_ENABLE_PIN, HIGH);
    1a0c:	80 e1       	ldi	r24, 0x10	; 16
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

		TIMER_DELAY_MS(1);
    1a14:	87 ef       	ldi	r24, 0xF7	; 247
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	4d e1       	ldi	r20, 0x1D	; 29
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

#if LCD_USE_SINGLE_DATA_PORT == 1
		/* read the 8th pin D7 to check the busy flag */
		isBusy = DIO_readPin(LCD_DATA_START_PIN + 7);
    1a26:	87 e0       	ldi	r24, 0x07	; 7
    1a28:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>
    1a2c:	18 2f       	mov	r17, r24
#else
		isBusy = DIO_readPin(LCD_D7);
#endif /* LCD_USE_SINGLE_DATA_PORT == 1 */

		TIMER_DELAY_MS(1);
    1a2e:	87 ef       	ldi	r24, 0xF7	; 247
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	4d e1       	ldi	r20, 0x1D	; 29
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	21 e0       	ldi	r18, 0x01	; 1
    1a3c:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

		DIO_writePin(LCD_ENABLE_PIN, LOW);
    1a40:	80 e1       	ldi	r24, 0x10	; 16
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
#endif
	}while(isBusy);
    1a48:	11 23       	and	r17, r17
    1a4a:	01 f7       	brne	.-64     	; 0x1a0c <LCD_sendCommand+0x22>
	DIO_pinInit(LCD_D7, a_direction);

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* init 8 successive pins of the port */
	DIO_portInitPartial(LCD_DATA_PORT, a_direction, 0xFF, LCD_DATA_START_PIN);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	6f ef       	ldi	r22, 0xFF	; 255
    1a50:	4f ef       	ldi	r20, 0xFF	; 255
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>
{
	/* make sure lcd is not busy */
	LCD_waitTillNotBusy();

	/* make RS=0 to send commmand and R/W=0 to write */
	DIO_writePin(LCD_RS_PIN, RS_CMD);
    1a58:	82 e1       	ldi	r24, 0x12	; 18
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
	DIO_writePin(LCD_RW_PIN, RW_WRITE);
    1a60:	81 e1       	ldi	r24, 0x11	; 17
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

	TIMER_DELAY_MS(1);
    1a68:	87 ef       	ldi	r24, 0xF7	; 247
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	4d e1       	ldi	r20, 0x1D	; 29
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	21 e0       	ldi	r18, 0x01	; 1
    1a76:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

	/* write high to enable pin */
	DIO_writePin(LCD_ENABLE_PIN, HIGH);
    1a7a:	80 e1       	ldi	r24, 0x10	; 16
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

	TIMER_DELAY_MS(1);
    1a82:	87 ef       	ldi	r24, 0xF7	; 247
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	4d e1       	ldi	r20, 0x1D	; 29
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	21 e0       	ldi	r18, 0x01	; 1
    1a90:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>
	DIO_writePin(LCD_D7, GET_BIT(a_data, 3));

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* write to 8 successive pins of the port */
	DIO_writePortPartial(LCD_DATA_PORT, a_data, 0xFF, LCD_DATA_START_PIN);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	60 2f       	mov	r22, r16
    1a98:	4f ef       	ldi	r20, 0xFF	; 255
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_writePortPartial>
	/* write 8-bits data to data port/pins */
	LCD_writeToDataPins(a_cmd);

#endif /* LCD_4_BIT_MODE == 1 */

	TIMER_DELAY_MS(1);
    1aa0:	87 ef       	ldi	r24, 0xF7	; 247
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	4d e1       	ldi	r20, 0x1D	; 29
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

	/* write low to enable pin */
	DIO_writePin(LCD_ENABLE_PIN, LOW);
    1ab2:	80 e1       	ldi	r24, 0x10	; 16
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

	TIMER_DELAY_MS(1);
    1aba:	87 ef       	ldi	r24, 0xF7	; 247
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	4d e1       	ldi	r20, 0x1D	; 29
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	21 e0       	ldi	r18, 0x01	; 1
    1ac8:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

}
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <LCD_setCursor>:
void LCD_setCursor(uint8_t a_row, uint8_t a_col)
{
	uint8_t lcdMemoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	99 f0       	breq	.+38     	; 0x1afc <LCD_setCursor+0x2a>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	30 f0       	brcs	.+12     	; 0x1ae6 <LCD_setCursor+0x14>
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	49 f0       	breq	.+18     	; 0x1af0 <LCD_setCursor+0x1e>
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <LCD_setCursor+0x12>
    1ae2:	08 95       	ret
		break;
	case 2:
		lcdMemoryAddress = a_col + 0x10;
		break;
	case 3:
		lcdMemoryAddress = a_col + 0x50;
    1ae4:	60 5b       	subi	r22, 0xB0	; 176
		break;
	default :
		return;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcdMemoryAddress | LCD_SET_CURSOR_BASE_ADDRESS);
    1ae6:	86 2f       	mov	r24, r22
    1ae8:	80 68       	ori	r24, 0x80	; 128
    1aea:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
    1aee:	08 95       	ret
		break;
	case 1:
		lcdMemoryAddress = a_col + 0x40;
		break;
	case 2:
		lcdMemoryAddress = a_col + 0x10;
    1af0:	60 5f       	subi	r22, 0xF0	; 240
		break;
	default :
		return;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcdMemoryAddress | LCD_SET_CURSOR_BASE_ADDRESS);
    1af2:	86 2f       	mov	r24, r22
    1af4:	80 68       	ori	r24, 0x80	; 128
    1af6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
    1afa:	f9 cf       	rjmp	.-14     	; 0x1aee <LCD_setCursor+0x1c>
	{
	case 0:
		lcdMemoryAddress = a_col;
		break;
	case 1:
		lcdMemoryAddress = a_col + 0x40;
    1afc:	60 5c       	subi	r22, 0xC0	; 192
		break;
	default :
		return;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcdMemoryAddress | LCD_SET_CURSOR_BASE_ADDRESS);
    1afe:	86 2f       	mov	r24, r22
    1b00:	80 68       	ori	r24, 0x80	; 128
    1b02:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
    1b06:	f3 cf       	rjmp	.-26     	; 0x1aee <LCD_setCursor+0x1c>

00001b08 <LCD_init>:
 * [Return]: void
 */
void LCD_init(void)
{
	/* init RS, R/W, enable pins as output  */
	DIO_pinInit(LCD_RS_PIN, PIN_OUTPUT);
    1b08:	82 e1       	ldi	r24, 0x12	; 18
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
	DIO_pinInit(LCD_RW_PIN, PIN_OUTPUT);
    1b10:	81 e1       	ldi	r24, 0x11	; 17
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
	DIO_pinInit(LCD_ENABLE_PIN, PIN_OUTPUT);
    1b18:	80 e1       	ldi	r24, 0x10	; 16
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <DIO_pinInit>
	DIO_pinInit(LCD_D7, a_direction);

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* init 8 successive pins of the port */
	DIO_portInitPartial(LCD_DATA_PORT, a_direction, 0xFF, LCD_DATA_START_PIN);
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	6f ef       	ldi	r22, 0xFF	; 255
    1b24:	4f ef       	ldi	r20, 0xFF	; 255
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>
	LCD_setDataPinsDir(PIN_OUTPUT);

#endif

	/* use 2-lines with 5*8 font size as default */
	LCD_sendCommand(LCD_2_LINES_SM_FONT);
    1b2c:	88 e3       	ldi	r24, 0x38	; 56
    1b2e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>

	/* turn on display and turn off cursor */
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1b32:	8c e0       	ldi	r24, 0x0C	; 12
    1b34:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>

	/* clear lcd */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
}
    1b3e:	08 95       	ret

00001b40 <LCD_sendChar>:
 * [in]: uint8_t a_data
 * 	  	 character to be sent
 * [Return]: void
 */
void LCD_sendChar(uint8_t a_data)
{
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	08 2f       	mov	r16, r24
	DIO_pinInit(LCD_D7, a_direction);

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* init 8 successive pins of the port */
	DIO_portInitPartial(LCD_DATA_PORT, a_direction, 0xFF, LCD_DATA_START_PIN);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	4f ef       	ldi	r20, 0xFF	; 255
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>
	LCD_setDataPinsDir(PIN_INPUT);

#endif

	/* make RS=0 to read cmd, R/W=1 to read */
	DIO_writePin(LCD_RS_PIN, RS_CMD);
    1b52:	82 e1       	ldi	r24, 0x12	; 18
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
	DIO_writePin(LCD_RW_PIN, RW_READ);
    1b5a:	81 e1       	ldi	r24, 0x11	; 17
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
		TIMER_DELAY_MS(1);

		DIO_writePin(LCD_ENABLE_PIN, LOW);

#else
		DIO_writePin(LCD_ENABLE_PIN, HIGH);
    1b62:	80 e1       	ldi	r24, 0x10	; 16
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

		TIMER_DELAY_MS(1);
    1b6a:	87 ef       	ldi	r24, 0xF7	; 247
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	4d e1       	ldi	r20, 0x1D	; 29
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

#if LCD_USE_SINGLE_DATA_PORT == 1
		/* read the 8th pin D7 to check the busy flag */
		isBusy = DIO_readPin(LCD_DATA_START_PIN + 7);
    1b7c:	87 e0       	ldi	r24, 0x07	; 7
    1b7e:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>
    1b82:	18 2f       	mov	r17, r24
#else
		isBusy = DIO_readPin(LCD_D7);
#endif /* LCD_USE_SINGLE_DATA_PORT == 1 */

		TIMER_DELAY_MS(1);
    1b84:	87 ef       	ldi	r24, 0xF7	; 247
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	4d e1       	ldi	r20, 0x1D	; 29
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	21 e0       	ldi	r18, 0x01	; 1
    1b92:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

		DIO_writePin(LCD_ENABLE_PIN, LOW);
    1b96:	80 e1       	ldi	r24, 0x10	; 16
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
#endif
	}while(isBusy);
    1b9e:	11 23       	and	r17, r17
    1ba0:	01 f7       	brne	.-64     	; 0x1b62 <LCD_sendChar+0x22>
	DIO_pinInit(LCD_D7, a_direction);

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* init 8 successive pins of the port */
	DIO_portInitPartial(LCD_DATA_PORT, a_direction, 0xFF, LCD_DATA_START_PIN);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	6f ef       	ldi	r22, 0xFF	; 255
    1ba6:	4f ef       	ldi	r20, 0xFF	; 255
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>
{
	/* make sure lcd is not busy */
	LCD_waitTillNotBusy();

	/* make RS=1 to send data and R/W=0 to write */
	DIO_writePin(LCD_RS_PIN, RS_DATA);
    1bae:	82 e1       	ldi	r24, 0x12	; 18
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>
	DIO_writePin(LCD_RW_PIN, RW_WRITE);
    1bb6:	81 e1       	ldi	r24, 0x11	; 17
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

	TIMER_DELAY_MS(1);
    1bbe:	87 ef       	ldi	r24, 0xF7	; 247
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	4d e1       	ldi	r20, 0x1D	; 29
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	21 e0       	ldi	r18, 0x01	; 1
    1bcc:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

	/* write high to enable pin */
	DIO_writePin(LCD_ENABLE_PIN, HIGH);
    1bd0:	80 e1       	ldi	r24, 0x10	; 16
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

	TIMER_DELAY_MS(1);
    1bd8:	87 ef       	ldi	r24, 0xF7	; 247
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	4d e1       	ldi	r20, 0x1D	; 29
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	21 e0       	ldi	r18, 0x01	; 1
    1be6:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>
	DIO_writePin(LCD_D7, GET_BIT(a_data, 3));

#elif LCD_4_BIT_MODE == 0 && LCD_USE_SINGLE_DATA_PORT == 1

	/* write to 8 successive pins of the port */
	DIO_writePortPartial(LCD_DATA_PORT, a_data, 0xFF, LCD_DATA_START_PIN);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	60 2f       	mov	r22, r16
    1bee:	4f ef       	ldi	r20, 0xFF	; 255
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_writePortPartial>
	/* write 8-bits data to data port/pins */
	LCD_writeToDataPins(a_data);

#endif /* LCD_4_BIT_MODE == 1 */

	TIMER_DELAY_MS(1);
    1bf6:	87 ef       	ldi	r24, 0xF7	; 247
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	4d e1       	ldi	r20, 0x1D	; 29
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	21 e0       	ldi	r18, 0x01	; 1
    1c04:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

	/* write low to enable pin */
	DIO_writePin(LCD_ENABLE_PIN, LOW);
    1c08:	80 e1       	ldi	r24, 0x10	; 16
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

	TIMER_DELAY_MS(1);
    1c10:	87 ef       	ldi	r24, 0xF7	; 247
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	4d e1       	ldi	r20, 0x1D	; 29
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

}
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <LCD_sendStr>:
 * [in]: const char * a_data
 * 	  	 string to be sent
 * [Return]: void
 */
void LCD_sendStr(const uint8_t * a_data)
{
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	ec 01       	movw	r28, r24
	/* loop till reach the null char '\0' */
	while(*a_data)
    1c2e:	88 81       	ld	r24, Y
    1c30:	88 23       	and	r24, r24
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <LCD_sendStr+0x18>
	{
		LCD_sendChar(*a_data);
    1c34:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>
		a_data ++;
    1c38:	21 96       	adiw	r28, 0x01	; 1
 * [Return]: void
 */
void LCD_sendStr(const uint8_t * a_data)
{
	/* loop till reach the null char '\0' */
	while(*a_data)
    1c3a:	88 81       	ld	r24, Y
    1c3c:	88 23       	and	r24, r24
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <LCD_sendStr+0xc>
	{
		LCD_sendChar(*a_data);
		a_data ++;
	}
}
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	08 95       	ret

00001c46 <LCD_sendCharAt>:
 * [in]: uint8_t a_data
 * 	  	 character to be sent
 * [Return]: void
 */
void LCD_sendCharAt(uint8_t a_row, uint8_t a_col, uint8_t a_data)
{
    1c46:	1f 93       	push	r17
    1c48:	14 2f       	mov	r17, r20
void LCD_setCursor(uint8_t a_row, uint8_t a_col)
{
	uint8_t lcdMemoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	99 f0       	breq	.+38     	; 0x1c74 <LCD_sendCharAt+0x2e>
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	48 f4       	brcc	.+18     	; 0x1c64 <LCD_sendCharAt+0x1e>
		break;
	default :
		return;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcdMemoryAddress | LCD_SET_CURSOR_BASE_ADDRESS);
    1c52:	86 2f       	mov	r24, r22
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
{
	/* set cursor to row and col */
	LCD_setCursor(a_row, a_col);

	/* write character */
	LCD_sendChar(a_data);
    1c5a:	81 2f       	mov	r24, r17
    1c5c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>
}
    1c60:	1f 91       	pop	r17
    1c62:	08 95       	ret
void LCD_setCursor(uint8_t a_row, uint8_t a_col)
{
	uint8_t lcdMemoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    1c64:	82 30       	cpi	r24, 0x02	; 2
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <LCD_sendCharAt+0x2a>
    1c68:	83 30       	cpi	r24, 0x03	; 3
    1c6a:	b9 f7       	brne	.-18     	; 0x1c5a <LCD_sendCharAt+0x14>
		break;
	case 2:
		lcdMemoryAddress = a_col + 0x10;
		break;
	case 3:
		lcdMemoryAddress = a_col + 0x50;
    1c6c:	60 5b       	subi	r22, 0xB0	; 176
    1c6e:	f1 cf       	rjmp	.-30     	; 0x1c52 <LCD_sendCharAt+0xc>
		break;
	case 1:
		lcdMemoryAddress = a_col + 0x40;
		break;
	case 2:
		lcdMemoryAddress = a_col + 0x10;
    1c70:	60 5f       	subi	r22, 0xF0	; 240
    1c72:	ef cf       	rjmp	.-34     	; 0x1c52 <LCD_sendCharAt+0xc>
	{
	case 0:
		lcdMemoryAddress = a_col;
		break;
	case 1:
		lcdMemoryAddress = a_col + 0x40;
    1c74:	60 5c       	subi	r22, 0xC0	; 192
    1c76:	ed cf       	rjmp	.-38     	; 0x1c52 <LCD_sendCharAt+0xc>

00001c78 <LCD_sendStrAt>:
 * [in]: const char * a_data
 * 	  	 string to be sent
 * [Return]: void
 */
void LCD_sendStrAt(uint8_t a_row, uint8_t a_col, const uint8_t * a_data)
{
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	ea 01       	movw	r28, r20
void LCD_setCursor(uint8_t a_row, uint8_t a_col)
{
	uint8_t lcdMemoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	c1 f0       	breq	.+48     	; 0x1cb2 <LCD_sendStrAt+0x3a>
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	70 f4       	brcc	.+28     	; 0x1ca2 <LCD_sendStrAt+0x2a>
		break;
	default :
		return;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcdMemoryAddress | LCD_SET_CURSOR_BASE_ADDRESS);
    1c86:	86 2f       	mov	r24, r22
    1c88:	80 68       	ori	r24, 0x80	; 128
    1c8a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <LCD_sendStrAt+0x1e>
void LCD_sendStr(const uint8_t * a_data)
{
	/* loop till reach the null char '\0' */
	while(*a_data)
	{
		LCD_sendChar(*a_data);
    1c90:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>
		a_data ++;
    1c94:	21 96       	adiw	r28, 0x01	; 1
 * [Return]: void
 */
void LCD_sendStr(const uint8_t * a_data)
{
	/* loop till reach the null char '\0' */
	while(*a_data)
    1c96:	88 81       	ld	r24, Y
    1c98:	88 23       	and	r24, r24
    1c9a:	d1 f7       	brne	.-12     	; 0x1c90 <LCD_sendStrAt+0x18>
	/* set cursor to row and col */
	LCD_setCursor(a_row, a_col);

	/* write string */
	LCD_sendStr(a_data);
}
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret
void LCD_setCursor(uint8_t a_row, uint8_t a_col)
{
	uint8_t lcdMemoryAddress;

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    1ca2:	82 30       	cpi	r24, 0x02	; 2
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <LCD_sendStrAt+0x36>
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	b1 f7       	brne	.-20     	; 0x1c96 <LCD_sendStrAt+0x1e>
		break;
	case 2:
		lcdMemoryAddress = a_col + 0x10;
		break;
	case 3:
		lcdMemoryAddress = a_col + 0x50;
    1caa:	60 5b       	subi	r22, 0xB0	; 176
    1cac:	ec cf       	rjmp	.-40     	; 0x1c86 <LCD_sendStrAt+0xe>
		break;
	case 1:
		lcdMemoryAddress = a_col + 0x40;
		break;
	case 2:
		lcdMemoryAddress = a_col + 0x10;
    1cae:	60 5f       	subi	r22, 0xF0	; 240
    1cb0:	ea cf       	rjmp	.-44     	; 0x1c86 <LCD_sendStrAt+0xe>
	{
	case 0:
		lcdMemoryAddress = a_col;
		break;
	case 1:
		lcdMemoryAddress = a_col + 0x40;
    1cb2:	60 5c       	subi	r22, 0xC0	; 192
    1cb4:	e8 cf       	rjmp	.-48     	; 0x1c86 <LCD_sendStrAt+0xe>

00001cb6 <LCD_sendInteger>:
 * 	  	 minimum length to reserve for this number by adding ' ' spaces after it tell
 * 	  	 the number length becomes equal to a_minLength
 * [Return]: void
 */
void LCD_sendInteger(int32_t a_num, uint8_t a_minLength)
{
    1cb6:	4f 92       	push	r4
    1cb8:	5f 92       	push	r5
    1cba:	6f 92       	push	r6
    1cbc:	7f 92       	push	r7
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	60 97       	sbiw	r28, 0x10	; 16
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	8b 01       	movw	r16, r22
    1ce8:	9c 01       	movw	r18, r24
    1cea:	44 2e       	mov	r4, r20

	bufferPtr = buffer;
	tempNum = a_num;

	/* put '-' if the number is negative */
	if (a_num < 0)
    1cec:	97 fd       	sbrc	r25, 7
    1cee:	74 c0       	rjmp	.+232    	; 0x1dd8 <LCD_sendInteger+0x122>
    1cf0:	4b 01       	movw	r8, r22
    1cf2:	5c 01       	movw	r10, r24
    1cf4:	3e 01       	movw	r6, r28
    1cf6:	08 94       	sec
    1cf8:	61 1c       	adc	r6, r1
    1cfa:	71 1c       	adc	r7, r1
    1cfc:	63 01       	movw	r12, r6
	{
		*bufferPtr++ = '-';
		/* turn the number to positive */
		a_num = -1 * a_num;
    1cfe:	c9 01       	movw	r24, r18
    1d00:	b8 01       	movw	r22, r16
	}
	/* reserve space in the buffer array equal to the number of digits + null char */
	do
	{
		tempNum /= 10;
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	0e 94 4a 11 	call	0x2294	; 0x2294 <__divmodsi4>
    1d0e:	c9 01       	movw	r24, r18
    1d10:	da 01       	movw	r26, r20
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
		bufferPtr++;
    1d16:	08 94       	sec
    1d18:	c1 1c       	adc	r12, r1
    1d1a:	d1 1c       	adc	r13, r1
	}while(tempNum);
    1d1c:	61 15       	cp	r22, r1
    1d1e:	71 05       	cpc	r23, r1
    1d20:	81 05       	cpc	r24, r1
    1d22:	91 05       	cpc	r25, r1
    1d24:	71 f7       	brne	.-36     	; 0x1d02 <LCD_sendInteger+0x4c>

	/* make the last position euqal to null char */
	*bufferPtr = '\0';
    1d26:	f6 01       	movw	r30, r12
    1d28:	10 82       	st	Z, r1

	/* calculate the length of the number */
	numLength = bufferPtr - buffer;
    1d2a:	5c 2c       	mov	r5, r12
    1d2c:	56 18       	sub	r5, r6
    1d2e:	85 01       	movw	r16, r10
    1d30:	74 01       	movw	r14, r8
	tempNum = a_num;

	/* convert each digit to it corresponding ascii */
	do
	{
		*--bufferPtr= tempNum % 10 + '0';
    1d32:	c8 01       	movw	r24, r16
    1d34:	b7 01       	movw	r22, r14
    1d36:	2a e0       	ldi	r18, 0x0A	; 10
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	0e 94 4a 11 	call	0x2294	; 0x2294 <__divmodsi4>
    1d42:	60 5d       	subi	r22, 0xD0	; 208
    1d44:	f6 01       	movw	r30, r12
    1d46:	62 93       	st	-Z, r22
    1d48:	6f 01       	movw	r12, r30
		tempNum /= 10;
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	b7 01       	movw	r22, r14
    1d4e:	2a e0       	ldi	r18, 0x0A	; 10
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	0e 94 4a 11 	call	0x2294	; 0x2294 <__divmodsi4>
    1d5a:	c9 01       	movw	r24, r18
    1d5c:	da 01       	movw	r26, r20
    1d5e:	7c 01       	movw	r14, r24
    1d60:	8d 01       	movw	r16, r26
	}while(tempNum);
    1d62:	e1 14       	cp	r14, r1
    1d64:	f1 04       	cpc	r15, r1
    1d66:	01 05       	cpc	r16, r1
    1d68:	11 05       	cpc	r17, r1
    1d6a:	19 f7       	brne	.-58     	; 0x1d32 <LCD_sendInteger+0x7c>
 * [Return]: void
 */
void LCD_sendStr(const uint8_t * a_data)
{
	/* loop till reach the null char '\0' */
	while(*a_data)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	88 23       	and	r24, r24
    1d70:	49 f0       	breq	.+18     	; 0x1d84 <LCD_sendInteger+0xce>
    1d72:	83 01       	movw	r16, r6
	{
		LCD_sendChar(*a_data);
    1d74:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>
		a_data ++;
    1d78:	0f 5f       	subi	r16, 0xFF	; 255
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
 * [Return]: void
 */
void LCD_sendStr(const uint8_t * a_data)
{
	/* loop till reach the null char '\0' */
	while(*a_data)
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 23       	and	r24, r24
    1d82:	c1 f7       	brne	.-16     	; 0x1d74 <LCD_sendInteger+0xbe>
	/* write string to lcd */
	LCD_sendStr(buffer);

	/* check to add spaces ' ' if a_minLength is bigger than numLength */
	/* this is used to override any past numbers */
	if(a_minLength > numLength)
    1d84:	54 14       	cp	r5, r4
    1d86:	88 f4       	brcc	.+34     	; 0x1daa <LCD_sendInteger+0xf4>
	{
		for(loopCounter = 0; loopCounter < (a_minLength - numLength); loopCounter++)
    1d88:	e4 2c       	mov	r14, r4
    1d8a:	ff 24       	eor	r15, r15
    1d8c:	e5 18       	sub	r14, r5
    1d8e:	f1 08       	sbc	r15, r1
    1d90:	1e 14       	cp	r1, r14
    1d92:	1f 04       	cpc	r1, r15
    1d94:	54 f4       	brge	.+20     	; 0x1daa <LCD_sendInteger+0xf4>
    1d96:	10 e0       	ldi	r17, 0x00	; 0
		{
			LCD_sendChar(' ');
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>

	/* check to add spaces ' ' if a_minLength is bigger than numLength */
	/* this is used to override any past numbers */
	if(a_minLength > numLength)
	{
		for(loopCounter = 0; loopCounter < (a_minLength - numLength); loopCounter++)
    1d9e:	1f 5f       	subi	r17, 0xFF	; 255
    1da0:	81 2f       	mov	r24, r17
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	8e 15       	cp	r24, r14
    1da6:	9f 05       	cpc	r25, r15
    1da8:	bc f3       	brlt	.-18     	; 0x1d98 <LCD_sendInteger+0xe2>
		{
			LCD_sendChar(' ');
		}
	}
}
    1daa:	60 96       	adiw	r28, 0x10	; 16
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	08 95       	ret
	tempNum = a_num;

	/* put '-' if the number is negative */
	if (a_num < 0)
	{
		*bufferPtr++ = '-';
    1dd8:	8d e2       	ldi	r24, 0x2D	; 45
    1dda:	89 83       	std	Y+1, r24	; 0x01
		/* turn the number to positive */
		a_num = -1 * a_num;
    1ddc:	88 24       	eor	r8, r8
    1dde:	99 24       	eor	r9, r9
    1de0:	54 01       	movw	r10, r8
    1de2:	80 1a       	sub	r8, r16
    1de4:	91 0a       	sbc	r9, r17
    1de6:	a2 0a       	sbc	r10, r18
    1de8:	b3 0a       	sbc	r11, r19
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	c8 2e       	mov	r12, r24
    1dee:	d1 2c       	mov	r13, r1
    1df0:	cc 0e       	add	r12, r28
    1df2:	dd 1e       	adc	r13, r29
    1df4:	3e 01       	movw	r6, r28
    1df6:	08 94       	sec
    1df8:	61 1c       	adc	r6, r1
    1dfa:	71 1c       	adc	r7, r1
    1dfc:	80 cf       	rjmp	.-256    	; 0x1cfe <LCD_sendInteger+0x48>

00001dfe <KEYPAD_getPressedKey>:
 * [in]: void
 * [Return]: uint8_t
 * 			 the ascii of the pressed key
 */
uint8_t KEYPAD_getPressedKey(void)
{
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
	 */
	static uint8_t selectedRow = 0;

	colsMask = 0;

	while(DIO_readPin(KEYPAD_FIRST_ROW_PIN + selectedRow) == KEYPAD_BUTTON_PRESSED);
    1e04:	80 91 65 02 	lds	r24, 0x0265
    1e08:	80 5e       	subi	r24, 0xE0	; 224
    1e0a:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>
    1e0e:	88 23       	and	r24, r24
    1e10:	c9 f3       	breq	.-14     	; 0x1e04 <KEYPAD_getPressedKey+0x6>
	}

#if KEYPAD_BUTTON_PRESSED == LOW

	/* write ones to all cols pins */
	DIO_writePortPartial(KEYPAD_PORT, ALL_HIGH, colsMask, KEYPAD_FIRST_COL_PIN);
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	6f ef       	ldi	r22, 0xFF	; 255
    1e16:	4f e0       	ldi	r20, 0x0F	; 15
    1e18:	24 e2       	ldi	r18, 0x24	; 36
    1e1a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_writePortPartial>
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	ff 24       	eor	r15, r15
    1e22:	46 c0       	rjmp	.+140    	; 0x1eb0 <KEYPAD_getPressedKey+0xb2>
			DIO_writePin(KEYPAD_FIRST_COL_PIN + col, KEYPAD_BUTTON_PRESSED);

			for (row = 0; row < KEYPAD_NUM_ROWS; row ++)
			{
				/* read the value of each row */
				rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1e24:	81 e2       	ldi	r24, 0x21	; 33
    1e26:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

				if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1e2a:	88 23       	and	r24, r24
    1e2c:	79 f4       	brne	.+30     	; 0x1e4c <KEYPAD_getPressedKey+0x4e>
				{
#if KEYPAD_CHECK_DEBOUNCE_ENABLED == 1

					/* delay for some time to check again - debounce effect */
					TIMER_DELAY_MS(KEYPAD_CHECK_DEBOUNCE_DELAY_MS);
    1e2e:	8e ef       	ldi	r24, 0xFE	; 254
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	47 ea       	ldi	r20, 0xA7	; 167
    1e34:	53 e0       	ldi	r21, 0x03	; 3
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	21 e0       	ldi	r18, 0x01	; 1
    1e3c:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

					/* read the row pin again after debounce */
					rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1e40:	81 e2       	ldi	r24, 0x21	; 33
    1e42:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

					if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1e46:	88 23       	and	r24, r24
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <KEYPAD_getPressedKey+0x4e>
    1e4a:	6f c0       	rjmp	.+222    	; 0x1f2a <KEYPAD_getPressedKey+0x12c>
			DIO_writePin(KEYPAD_FIRST_COL_PIN + col, KEYPAD_BUTTON_PRESSED);

			for (row = 0; row < KEYPAD_NUM_ROWS; row ++)
			{
				/* read the value of each row */
				rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1e4c:	82 e2       	ldi	r24, 0x22	; 34
    1e4e:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

				if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1e52:	88 23       	and	r24, r24
    1e54:	79 f4       	brne	.+30     	; 0x1e74 <KEYPAD_getPressedKey+0x76>
				{
#if KEYPAD_CHECK_DEBOUNCE_ENABLED == 1

					/* delay for some time to check again - debounce effect */
					TIMER_DELAY_MS(KEYPAD_CHECK_DEBOUNCE_DELAY_MS);
    1e56:	8e ef       	ldi	r24, 0xFE	; 254
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	47 ea       	ldi	r20, 0xA7	; 167
    1e5c:	53 e0       	ldi	r21, 0x03	; 3
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	21 e0       	ldi	r18, 0x01	; 1
    1e64:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

					/* read the row pin again after debounce */
					rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1e68:	82 e2       	ldi	r24, 0x22	; 34
    1e6a:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

					if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1e6e:	88 23       	and	r24, r24
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <KEYPAD_getPressedKey+0x76>
    1e72:	66 c0       	rjmp	.+204    	; 0x1f40 <KEYPAD_getPressedKey+0x142>
			DIO_writePin(KEYPAD_FIRST_COL_PIN + col, KEYPAD_BUTTON_PRESSED);

			for (row = 0; row < KEYPAD_NUM_ROWS; row ++)
			{
				/* read the value of each row */
				rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1e74:	83 e2       	ldi	r24, 0x23	; 35
    1e76:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

				if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1e7a:	88 23       	and	r24, r24
    1e7c:	79 f4       	brne	.+30     	; 0x1e9c <KEYPAD_getPressedKey+0x9e>
				{
#if KEYPAD_CHECK_DEBOUNCE_ENABLED == 1

					/* delay for some time to check again - debounce effect */
					TIMER_DELAY_MS(KEYPAD_CHECK_DEBOUNCE_DELAY_MS);
    1e7e:	8e ef       	ldi	r24, 0xFE	; 254
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	47 ea       	ldi	r20, 0xA7	; 167
    1e84:	53 e0       	ldi	r21, 0x03	; 3
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	21 e0       	ldi	r18, 0x01	; 1
    1e8c:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

					/* read the row pin again after debounce */
					rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1e90:	83 e2       	ldi	r24, 0x23	; 35
    1e92:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

					if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1e96:	88 23       	and	r24, r24
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <KEYPAD_getPressedKey+0x9e>
    1e9a:	54 c0       	rjmp	.+168    	; 0x1f44 <KEYPAD_getPressedKey+0x146>

			/* return the current col pin to its initial state
			 * HIGH if KEYPAD_BUTTON_PRESSED = LOW or
			 * LOW  if KEYPAD_BUTTON_PRESSED = HIGH
			 */
			DIO_writePin(KEYPAD_FIRST_COL_PIN + col, !KEYPAD_BUTTON_PRESSED);
    1e9c:	80 2f       	mov	r24, r16
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

#endif

	while(1)
	{
		for (col = 0; col < KEYPAD_NUM_COLS; col ++)
    1ea4:	1f 5f       	subi	r17, 0xFF	; 255
    1ea6:	14 30       	cpi	r17, 0x04	; 4
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <KEYPAD_getPressedKey+0xae>
    1eaa:	78 c0       	rjmp	.+240    	; 0x1f9c <KEYPAD_getPressedKey+0x19e>
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	ff 24       	eor	r15, r15
		{
			/* write 0 or 1 to col by col depending on the value of KEYPAD_BUTTON_PRESSED */
			DIO_writePin(KEYPAD_FIRST_COL_PIN + col, KEYPAD_BUTTON_PRESSED);
    1eb0:	01 2f       	mov	r16, r17
    1eb2:	0c 5d       	subi	r16, 0xDC	; 220
    1eb4:	80 2f       	mov	r24, r16
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_writePin>

			for (row = 0; row < KEYPAD_NUM_ROWS; row ++)
			{
				/* read the value of each row */
				rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1ebc:	80 e2       	ldi	r24, 0x20	; 32
    1ebe:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

				if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <KEYPAD_getPressedKey+0xca>
    1ec6:	ae cf       	rjmp	.-164    	; 0x1e24 <KEYPAD_getPressedKey+0x26>
				{
#if KEYPAD_CHECK_DEBOUNCE_ENABLED == 1

					/* delay for some time to check again - debounce effect */
					TIMER_DELAY_MS(KEYPAD_CHECK_DEBOUNCE_DELAY_MS);
    1ec8:	8e ef       	ldi	r24, 0xFE	; 254
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	47 ea       	ldi	r20, 0xA7	; 167
    1ece:	53 e0       	ldi	r21, 0x03	; 3
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	21 e0       	ldi	r18, 0x01	; 1
    1ed6:	0e 94 86 07 	call	0xf0c	; 0xf0c <TIMER_delayTicks>

					/* read the row pin again after debounce */
					rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);
    1eda:	80 e2       	ldi	r24, 0x20	; 32
    1edc:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_readPin>

					if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <KEYPAD_getPressedKey+0xe8>
    1ee4:	9f cf       	rjmp	.-194    	; 0x1e24 <KEYPAD_getPressedKey+0x26>
					{
						/* save the value of the selected row */
						selectedRow = row;
    1ee6:	80 93 65 02 	sts	0x0265, r24
{
	/* key will hold the ascii of each number */
	uint8_t key;

	/* select each key depending on its number */
	switch(a_number)
    1eea:	f3 94       	inc	r15
    1eec:	88 0f       	add	r24, r24
    1eee:	88 0f       	add	r24, r24
    1ef0:	8f 0d       	add	r24, r15
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	19 f1       	breq	.+70     	; 0x1f3c <KEYPAD_getPressedKey+0x13e>
    1ef6:	89 30       	cpi	r24, 0x09	; 9
    1ef8:	70 f0       	brcs	.+28     	; 0x1f16 <KEYPAD_getPressedKey+0x118>
    1efa:	8c 30       	cpi	r24, 0x0C	; 12
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <KEYPAD_getPressedKey+0x102>
    1efe:	40 c0       	rjmp	.+128    	; 0x1f80 <KEYPAD_getPressedKey+0x182>
    1f00:	8d 30       	cpi	r24, 0x0D	; 13
    1f02:	10 f5       	brcc	.+68     	; 0x1f48 <KEYPAD_getPressedKey+0x14a>
    1f04:	8a 30       	cpi	r24, 0x0A	; 10
    1f06:	c1 f1       	breq	.+112    	; 0x1f78 <KEYPAD_getPressedKey+0x17a>
    1f08:	8b 30       	cpi	r24, 0x0B	; 11
    1f0a:	a0 f1       	brcs	.+104    	; 0x1f74 <KEYPAD_getPressedKey+0x176>
    1f0c:	83 e3       	ldi	r24, 0x33	; 51
			 * LOW  if KEYPAD_BUTTON_PRESSED = HIGH
			 */
			DIO_writePin(KEYPAD_FIRST_COL_PIN + col, !KEYPAD_BUTTON_PRESSED);
		}
	}
}
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	08 95       	ret
{
	/* key will hold the ascii of each number */
	uint8_t key;

	/* select each key depending on its number */
	switch(a_number)
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	89 f1       	breq	.+98     	; 0x1f7c <KEYPAD_getPressedKey+0x17e>
    1f1a:	85 30       	cpi	r24, 0x05	; 5
    1f1c:	f8 f0       	brcs	.+62     	; 0x1f5c <KEYPAD_getPressedKey+0x15e>
    1f1e:	86 30       	cpi	r24, 0x06	; 6
    1f20:	d9 f1       	breq	.+118    	; 0x1f98 <KEYPAD_getPressedKey+0x19a>
    1f22:	87 30       	cpi	r24, 0x07	; 7
    1f24:	b8 f1       	brcs	.+110    	; 0x1f94 <KEYPAD_getPressedKey+0x196>
    1f26:	86 e3       	ldi	r24, 0x36	; 54
    1f28:	f2 cf       	rjmp	.-28     	; 0x1f0e <KEYPAD_getPressedKey+0x110>
					TIMER_DELAY_MS(KEYPAD_CHECK_DEBOUNCE_DELAY_MS);

					/* read the row pin again after debounce */
					rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);

					if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
					{
						/* save the value of the selected row */
						selectedRow = row;
    1f2c:	80 93 65 02 	sts	0x0265, r24
{
	/* key will hold the ascii of each number */
	uint8_t key;

	/* select each key depending on its number */
	switch(a_number)
    1f30:	f3 94       	inc	r15
    1f32:	88 0f       	add	r24, r24
    1f34:	88 0f       	add	r24, r24
    1f36:	8f 0d       	add	r24, r15
    1f38:	88 30       	cpi	r24, 0x08	; 8
    1f3a:	e9 f6       	brne	.-70     	; 0x1ef6 <KEYPAD_getPressedKey+0xf8>
    1f3c:	88 e7       	ldi	r24, 0x78	; 120
    1f3e:	e7 cf       	rjmp	.-50     	; 0x1f0e <KEYPAD_getPressedKey+0x110>
					TIMER_DELAY_MS(KEYPAD_CHECK_DEBOUNCE_DELAY_MS);

					/* read the row pin again after debounce */
					rowReadValue = DIO_readPin(KEYPAD_FIRST_ROW_PIN + row);

					if(rowReadValue == KEYPAD_BUTTON_PRESSED)
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	d1 cf       	rjmp	.-94     	; 0x1ee6 <KEYPAD_getPressedKey+0xe8>
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	cf cf       	rjmp	.-98     	; 0x1ee6 <KEYPAD_getPressedKey+0xe8>
{
	/* key will hold the ascii of each number */
	uint8_t key;

	/* select each key depending on its number */
	switch(a_number)
    1f48:	8e 30       	cpi	r24, 0x0E	; 14
    1f4a:	f1 f0       	breq	.+60     	; 0x1f88 <KEYPAD_getPressedKey+0x18a>
    1f4c:	8e 30       	cpi	r24, 0x0E	; 14
    1f4e:	d0 f0       	brcs	.+52     	; 0x1f84 <KEYPAD_getPressedKey+0x186>
    1f50:	8f 30       	cpi	r24, 0x0F	; 15
    1f52:	71 f0       	breq	.+28     	; 0x1f70 <KEYPAD_getPressedKey+0x172>
    1f54:	80 31       	cpi	r24, 0x10	; 16
    1f56:	41 f4       	brne	.+16     	; 0x1f68 <KEYPAD_getPressedKey+0x16a>
    1f58:	8b e2       	ldi	r24, 0x2B	; 43
    1f5a:	d9 cf       	rjmp	.-78     	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	c1 f0       	breq	.+48     	; 0x1f90 <KEYPAD_getPressedKey+0x192>
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	a0 f4       	brcc	.+40     	; 0x1f8c <KEYPAD_getPressedKey+0x18e>
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <KEYPAD_getPressedKey+0x16e>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	d1 cf       	rjmp	.-94     	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f6c:	87 e3       	ldi	r24, 0x37	; 55
    1f6e:	cf cf       	rjmp	.-98     	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f70:	8d e3       	ldi	r24, 0x3D	; 61
    1f72:	cd cf       	rjmp	.-102    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f74:	81 e3       	ldi	r24, 0x31	; 49
    1f76:	cb cf       	rjmp	.-106    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f78:	82 e3       	ldi	r24, 0x32	; 50
    1f7a:	c9 cf       	rjmp	.-110    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f7c:	8f e2       	ldi	r24, 0x2F	; 47
    1f7e:	c7 cf       	rjmp	.-114    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f80:	8d e2       	ldi	r24, 0x2D	; 45
    1f82:	c5 cf       	rjmp	.-118    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f84:	83 e6       	ldi	r24, 0x63	; 99
    1f86:	c3 cf       	rjmp	.-122    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f88:	80 e3       	ldi	r24, 0x30	; 48
    1f8a:	c1 cf       	rjmp	.-126    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f8c:	89 e3       	ldi	r24, 0x39	; 57
    1f8e:	bf cf       	rjmp	.-130    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f90:	88 e3       	ldi	r24, 0x38	; 56
    1f92:	bd cf       	rjmp	.-134    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f94:	84 e3       	ldi	r24, 0x34	; 52
    1f96:	bb cf       	rjmp	.-138    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
    1f98:	85 e3       	ldi	r24, 0x35	; 53
    1f9a:	b9 cf       	rjmp	.-142    	; 0x1f0e <KEYPAD_getPressedKey+0x110>
	}

#if KEYPAD_BUTTON_PRESSED == LOW

	/* write ones to all cols pins */
	DIO_writePortPartial(KEYPAD_PORT, ALL_HIGH, colsMask, KEYPAD_FIRST_COL_PIN);
    1f9c:	f1 2e       	mov	r15, r17
    1f9e:	88 cf       	rjmp	.-240    	; 0x1eb0 <KEYPAD_getPressedKey+0xb2>

00001fa0 <KEYPAD_init>:
		colsMask <<= 1;
		colsMask |= 1;
	}

	/* init row pins as inputs */
	DIO_portInitPartial(KEYPAD_PORT, PORT_INPUT, rowMask, KEYPAD_FIRST_ROW_PIN);
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	4f e0       	ldi	r20, 0x0F	; 15
    1fa6:	20 e2       	ldi	r18, 0x20	; 32
    1fa8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>

	/* control internal pull of the rows */
	for(loopCounter = 0; loopCounter < KEYPAD_NUM_ROWS; loopCounter++)
	{
		DIO_controlPinInternalPull(KEYPAD_FIRST_ROW_PIN + loopCounter, KEYPAD_ROWS_INTERNAL_PULL);
    1fac:	80 e2       	ldi	r24, 0x20	; 32
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_controlPinInternalPull>
    1fb4:	81 e2       	ldi	r24, 0x21	; 33
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_controlPinInternalPull>
    1fbc:	82 e2       	ldi	r24, 0x22	; 34
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_controlPinInternalPull>
    1fc4:	83 e2       	ldi	r24, 0x23	; 35
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <DIO_controlPinInternalPull>
	}

	/* init cols pins as outputs */
	DIO_portInitPartial(KEYPAD_PORT, PORT_OUTPUT, colsMask, KEYPAD_FIRST_COL_PIN);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	6f ef       	ldi	r22, 0xFF	; 255
    1fd0:	4f e0       	ldi	r20, 0x0F	; 15
    1fd2:	24 e2       	ldi	r18, 0x24	; 36
    1fd4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_portInitPartial>
}
    1fd8:	08 95       	ret

00001fda <app_update>:
 * [Args]:
 * [in]: void
 * [Return]: void
 */
void app_update(void)
{
    1fda:	1f 93       	push	r17
	/* copy the received cmd and use it in case another data was received
	 * during the executing of the app_update, so as to process previous data first
	 */
	uint8_t receivedCmdCpy = g_receivedCmd;
    1fdc:	10 91 66 02 	lds	r17, 0x0266

	/* reset await and data receive flag*/
	g_awaitOption = AWAIT_NOTHING;
    1fe0:	10 92 67 02 	sts	0x0267, r1
	g_isDataReceived = FALSE;
    1fe4:	10 92 68 02 	sts	0x0268, r1

	switch (g_state)
    1fe8:	80 91 69 02 	lds	r24, 0x0269
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <app_update+0x18>
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <app_update+0x96>
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	60 f0       	brcs	.+24     	; 0x200e <app_update+0x34>
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	99 f1       	breq	.+102    	; 0x2060 <app_update+0x86>
    1ffa:	80 91 67 02 	lds	r24, 0x0267
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	21 f4       	brne	.+8      	; 0x200a <app_update+0x30>
		default:
			break;
	}

	/* await till reponse is received */
	while(g_awaitOption == AWAIT_RESPONSE && !g_isDataReceived);
    2002:	80 91 68 02 	lds	r24, 0x0268
    2006:	88 23       	and	r24, r24
    2008:	e1 f3       	breq	.-8      	; 0x2002 <app_update+0x28>
}
    200a:	1f 91       	pop	r17
    200c:	08 95       	ret
 */
void controlLcdText(EN_AppCommands receivedCmd)
{

	/* clear screen if cmd is known only */
	if (receivedCmd >= ACK_CMD && receivedCmd <= SHOW_DOOR_IS_UNLOCKED_TEXT_CMD)
    200e:	81 2f       	mov	r24, r17
    2010:	81 54       	subi	r24, 0x41	; 65
    2012:	82 31       	cpi	r24, 0x12	; 18
    2014:	08 f4       	brcc	.+2      	; 0x2018 <app_update+0x3e>
    2016:	46 c0       	rjmp	.+140    	; 0x20a4 <app_update+0xca>
		/* clear the screen each time */
		LCD_sendCommand(LCD_CLEAR_SCREEN);
	}

	/* select text shown based on the cmd */
	switch (receivedCmd)
    2018:	1b 34       	cpi	r17, 0x4B	; 75
    201a:	09 f4       	brne	.+2      	; 0x201e <app_update+0x44>
    201c:	76 c0       	rjmp	.+236    	; 0x210a <app_update+0x130>
    201e:	1c 34       	cpi	r17, 0x4C	; 76
    2020:	08 f0       	brcs	.+2      	; 0x2024 <app_update+0x4a>
    2022:	44 c0       	rjmp	.+136    	; 0x20ac <app_update+0xd2>
    2024:	14 34       	cpi	r17, 0x44	; 68
    2026:	09 f4       	brne	.+2      	; 0x202a <app_update+0x50>
    2028:	9a c0       	rjmp	.+308    	; 0x215e <app_update+0x184>
    202a:	15 34       	cpi	r17, 0x45	; 69
    202c:	08 f0       	brcs	.+2      	; 0x2030 <app_update+0x56>
    202e:	7d c0       	rjmp	.+250    	; 0x212a <app_update+0x150>
    2030:	12 34       	cpi	r17, 0x42	; 66
    2032:	09 f4       	brne	.+2      	; 0x2036 <app_update+0x5c>
    2034:	b6 c0       	rjmp	.+364    	; 0x21a2 <app_update+0x1c8>
    2036:	13 34       	cpi	r17, 0x43	; 67
    2038:	09 f4       	brne	.+2      	; 0x203c <app_update+0x62>
    203a:	ac c0       	rjmp	.+344    	; 0x2194 <app_update+0x1ba>

		/* show text on lcd depending on command */
		controlLcdText(receivedCmdCpy);

		/* manage behavior related to menu or passwords */
		switch (receivedCmdCpy)
    203c:	13 34       	cpi	r17, 0x43	; 67
    203e:	48 f0       	brcs	.+18     	; 0x2052 <app_update+0x78>
    2040:	15 34       	cpi	r17, 0x45	; 69
    2042:	08 f4       	brcc	.+2      	; 0x2046 <app_update+0x6c>
    2044:	92 c0       	rjmp	.+292    	; 0x216a <app_update+0x190>
    2046:	1b 34       	cpi	r17, 0x4B	; 75
    2048:	09 f4       	brne	.+2      	; 0x204c <app_update+0x72>
    204a:	6b c0       	rjmp	.+214    	; 0x2122 <app_update+0x148>
    204c:	1c 34       	cpi	r17, 0x4C	; 76
    204e:	09 f4       	brne	.+2      	; 0x2052 <app_update+0x78>
    2050:	8c c0       	rjmp	.+280    	; 0x216a <app_update+0x190>
			break;

		default:

			/* send ack to notify the other mcu that executing the cmd is finished */
			UART_sendByteBlocking(ACK_CMD);
    2052:	81 e4       	ldi	r24, 0x41	; 65
    2054:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>

			/* wait for another command */
			g_awaitOption = AWAIT_RESPONSE;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	80 93 67 02 	sts	0x0267, r24
    205e:	d1 cf       	rjmp	.-94     	; 0x2002 <app_update+0x28>
			readPassword(receivedCmdCpy);
			break;

		case READING_MENU_OPTIONS_STATE:

			if(receivedCmdCpy == ACK_CMD || receivedCmdCpy == GET_MENU_OPTION_CMD)
    2060:	11 34       	cpi	r17, 0x41	; 65
    2062:	89 f0       	breq	.+34     	; 0x2086 <app_update+0xac>
    2064:	1b 34       	cpi	r17, 0x4B	; 75
    2066:	79 f0       	breq	.+30     	; 0x2086 <app_update+0xac>
				g_awaitOption = AWAIT_RESPONSE;

			}
			else
			{
				g_state = RECEIVE_COMMAND_STATE;
    2068:	10 92 69 02 	sts	0x0269, r1
			break;
	}

	/* await till reponse is received */
	while(g_awaitOption == AWAIT_RESPONSE && !g_isDataReceived);
}
    206c:	1f 91       	pop	r17
    206e:	08 95       	ret
 * [in]: void
 * [Return]: void
 */
void readPassword(EN_AppCommands receivedCmd)
{
	switch(receivedCmd)
    2070:	17 34       	cpi	r17, 0x47	; 71
    2072:	89 f4       	brne	.+34     	; 0x2096 <app_update+0xbc>
		break;

	/* smd to delete a char */
	case BACKSPACE_PASS_CHAR_CMD:
		/* move the cursor left, write a space then move it left again to write in the same position */
		LCD_sendCommand(LCD_MOVE_CURSOR_LEFT);
    2074:	80 e1       	ldi	r24, 0x10	; 16
    2076:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
		LCD_sendChar(' ');
    207a:	80 e2       	ldi	r24, 0x20	; 32
    207c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>
		LCD_sendCommand(LCD_MOVE_CURSOR_LEFT);
    2080:	80 e1       	ldi	r24, 0x10	; 16
    2082:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
		case READING_MENU_OPTIONS_STATE:

			if(receivedCmdCpy == ACK_CMD || receivedCmdCpy == GET_MENU_OPTION_CMD)
			{
				/* send user choice from the menu options */
				UART_sendByteBlocking(KEYPAD_getPressedKey());
    2086:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <KEYPAD_getPressedKey>
    208a:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
				g_awaitOption = AWAIT_RESPONSE;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	80 93 67 02 	sts	0x0267, r24
    2094:	b6 cf       	rjmp	.-148    	; 0x2002 <app_update+0x28>
 * [in]: void
 * [Return]: void
 */
void readPassword(EN_AppCommands receivedCmd)
{
	switch(receivedCmd)
    2096:	18 34       	cpi	r17, 0x48	; 72
    2098:	f8 f4       	brcc	.+62     	; 0x20d8 <app_update+0xfe>
    209a:	15 34       	cpi	r17, 0x45	; 69
    209c:	91 f1       	breq	.+100    	; 0x2102 <app_update+0x128>
	default:
		break;
	}

	/* get key tell stop cmd is received */
	if(receivedCmd != STOP_RECEIVING_PASS_CMD)
    209e:	1d 34       	cpi	r17, 0x4D	; 77
    20a0:	b1 f3       	breq	.-20     	; 0x208e <app_update+0xb4>
    20a2:	f1 cf       	rjmp	.-30     	; 0x2086 <app_update+0xac>

	/* clear screen if cmd is known only */
	if (receivedCmd >= ACK_CMD && receivedCmd <= SHOW_DOOR_IS_UNLOCKED_TEXT_CMD)
	{
		/* clear the screen each time */
		LCD_sendCommand(LCD_CLEAR_SCREEN);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
    20aa:	b6 cf       	rjmp	.-148    	; 0x2018 <app_update+0x3e>
	}

	/* select text shown based on the cmd */
	switch (receivedCmd)
    20ac:	1f 34       	cpi	r17, 0x4F	; 79
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <app_update+0xd8>
    20b0:	86 c0       	rjmp	.+268    	; 0x21be <app_update+0x1e4>
    20b2:	10 35       	cpi	r17, 0x50	; 80
    20b4:	08 f4       	brcc	.+2      	; 0x20b8 <app_update+0xde>
    20b6:	46 c0       	rjmp	.+140    	; 0x2144 <app_update+0x16a>
    20b8:	11 35       	cpi	r17, 0x51	; 81
    20ba:	09 f4       	brne	.+2      	; 0x20be <app_update+0xe4>
    20bc:	64 c0       	rjmp	.+200    	; 0x2186 <app_update+0x1ac>
    20be:	11 35       	cpi	r17, 0x51	; 81
    20c0:	08 f4       	brcc	.+2      	; 0x20c4 <app_update+0xea>
    20c2:	5a c0       	rjmp	.+180    	; 0x2178 <app_update+0x19e>
    20c4:	12 35       	cpi	r17, 0x52	; 82
    20c6:	09 f0       	breq	.+2      	; 0x20ca <app_update+0xf0>
    20c8:	b9 cf       	rjmp	.-142    	; 0x203c <app_update+0x62>
	case SHOW_DOOR_LOCKING_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) DOOR_LOCKING_TEXT);
		break;

	case SHOW_DOOR_IS_UNLOCKED_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) DOOR_IS_UNLOCKED_TEXT);
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	48 e0       	ldi	r20, 0x08	; 8
    20d0:	51 e0       	ldi	r21, 0x01	; 1
    20d2:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    20d6:	bd cf       	rjmp	.-134    	; 0x2052 <app_update+0x78>
 * [in]: void
 * [Return]: void
 */
void readPassword(EN_AppCommands receivedCmd)
{
	switch(receivedCmd)
    20d8:	18 34       	cpi	r17, 0x48	; 72
    20da:	41 f0       	breq	.+16     	; 0x20ec <app_update+0x112>
    20dc:	1d 34       	cpi	r17, 0x4D	; 77
    20de:	f9 f6       	brne	.-66     	; 0x209e <app_update+0xc4>
	{
	/* cmd to stop receiving chars, so change state */
	case STOP_RECEIVING_PASS_CMD:
		g_state = RECEIVE_COMMAND_STATE;
    20e0:	10 92 69 02 	sts	0x0269, r1
		UART_sendByteBlocking(ACK_CMD);
    20e4:	81 e4       	ldi	r24, 0x41	; 65
    20e6:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    20ea:	d1 cf       	rjmp	.-94     	; 0x208e <app_update+0xb4>
		LCD_sendCommand(LCD_MOVE_CURSOR_LEFT);
		break;

	case CLEAR_ALL_PASS_CHARS_CMD:
		/* cmd to clear the screen by writing spaces */
		LCD_sendStrAt(SECOND_LINE_START_POS, (uint8_t *)"                ");
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	49 e1       	ldi	r20, 0x19	; 25
    20f2:	51 e0       	ldi	r21, 0x01	; 1
    20f4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
		LCD_setCursor(SECOND_LINE_START_POS);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <LCD_setCursor>
    2100:	c2 cf       	rjmp	.-124    	; 0x2086 <app_update+0xac>
		break;

	case READ_NEXT_PASS_CHAR_CMD:
		/* show pass hash '*' char on lcd */
		LCD_sendChar(PASS_DISPLAY_CHAR);
    2102:	8a e2       	ldi	r24, 0x2A	; 42
    2104:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LCD_sendChar>
    2108:	be cf       	rjmp	.-132    	; 0x2086 <app_update+0xac>
	case SHOW_PASS_CHANGED_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) PASS_CHANGED_TEXT);
		break;

	case GET_MENU_OPTION_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) MENU_OPTIONS_UPPER_TEXT);
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	4a ea       	ldi	r20, 0xAA	; 170
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
		LCD_sendStrAt(SECOND_LINE_START_POS,
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	47 eb       	ldi	r20, 0xB7	; 183
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
		/* manage behavior related to menu or passwords */
		switch (receivedCmdCpy)
		{

		case GET_MENU_OPTION_CMD:
			g_state = READING_MENU_OPTIONS_STATE;
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	80 93 69 02 	sts	0x0269, r24
    2128:	68 cf       	rjmp	.-304    	; 0x1ffa <app_update+0x20>
		/* clear the screen each time */
		LCD_sendCommand(LCD_CLEAR_SCREEN);
	}

	/* select text shown based on the cmd */
	switch (receivedCmd)
    212a:	19 34       	cpi	r17, 0x49	; 73
    212c:	09 f4       	brne	.+2      	; 0x2130 <app_update+0x156>
    212e:	40 c0       	rjmp	.+128    	; 0x21b0 <app_update+0x1d6>
    2130:	1a 34       	cpi	r17, 0x4A	; 74
    2132:	09 f0       	breq	.+2      	; 0x2136 <app_update+0x15c>
    2134:	83 cf       	rjmp	.-250    	; 0x203c <app_update+0x62>
	case SHOW_PASS_MISMATCH_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) PASS_MISMATCH_TEXT);
		break;

	case SHOW_PASS_CHANGED_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) PASS_CHANGED_TEXT);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	4d e9       	ldi	r20, 0x9D	; 157
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    2142:	87 cf       	rjmp	.-242    	; 0x2052 <app_update+0x78>
		/* clear the screen each time */
		LCD_sendCommand(LCD_CLEAR_SCREEN);
	}

	/* select text shown based on the cmd */
	switch (receivedCmd)
    2144:	1c 34       	cpi	r17, 0x4C	; 76
    2146:	09 f4       	brne	.+2      	; 0x214a <app_update+0x170>
    2148:	41 c0       	rjmp	.+130    	; 0x21cc <app_update+0x1f2>
    214a:	1e 34       	cpi	r17, 0x4E	; 78
    214c:	09 f0       	breq	.+2      	; 0x2150 <app_update+0x176>
    214e:	76 cf       	rjmp	.-276    	; 0x203c <app_update+0x62>
	case ENTER_PASS_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) ENTER_PASS_TEXT);
		break;

	case SHOW_WRONG_PASS_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) WRONG_PASS_TEXT);
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	43 ed       	ldi	r20, 0xD3	; 211
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    215c:	7a cf       	rjmp	.-268    	; 0x2052 <app_update+0x78>
	case READ_NEW_PASS_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) READ_NEW_PASS_TEXT);
		break;

	case CONFIRM_PASS_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) CONFIRM_NEW_PASS_TEXT);
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	42 e8       	ldi	r20, 0x82	; 130
    2164:	50 e0       	ldi	r21, 0x00	; 0
    2166:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
			break;

		case READ_NEW_PASS_CMD:
		case CONFIRM_PASS_CMD:
		case ENTER_PASS_CMD:
			g_state = READING_PASS_STATE;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 69 02 	sts	0x0269, r24

			/* go to first position in the second line on the lcd to start entering password */
			LCD_setCursor(SECOND_LINE_START_POS);
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <LCD_setCursor>
    2176:	41 cf       	rjmp	.-382    	; 0x1ffa <app_update+0x20>
	case SHOW_ACCESS_DENIED_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) ACCESS_DENIED_TEXT);
		break;

	case SHOW_DOOR_UNLOCKING_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) DOOR_UNLOCKING_TEXT);
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	4c ee       	ldi	r20, 0xEC	; 236
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    2184:	66 cf       	rjmp	.-308    	; 0x2052 <app_update+0x78>
		break;

	case SHOW_DOOR_LOCKING_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) DOOR_LOCKING_TEXT);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	4b ef       	ldi	r20, 0xFB	; 251
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    2192:	5f cf       	rjmp	.-322    	; 0x2052 <app_update+0x78>
	case SHOW_DOOR_LOCK_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) DOOR_LOCK_TEXT);
		break;

	case READ_NEW_PASS_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) READ_NEW_PASS_TEXT);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	41 e7       	ldi	r20, 0x71	; 113
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    21a0:	e4 cf       	rjmp	.-56     	; 0x216a <app_update+0x190>

	/* select text shown based on the cmd */
	switch (receivedCmd)
	{
	case SHOW_DOOR_LOCK_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) DOOR_LOCK_TEXT);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	40 e6       	ldi	r20, 0x60	; 96
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    21ae:	51 cf       	rjmp	.-350    	; 0x2052 <app_update+0x78>
	case CONFIRM_PASS_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) CONFIRM_NEW_PASS_TEXT);
		break;

	case SHOW_PASS_MISMATCH_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) PASS_MISMATCH_TEXT);
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	4f e8       	ldi	r20, 0x8F	; 143
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    21bc:	4a cf       	rjmp	.-364    	; 0x2052 <app_update+0x78>
	case SHOW_WRONG_PASS_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) WRONG_PASS_TEXT);
		break;

	case SHOW_ACCESS_DENIED_TEXT_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) ACCESS_DENIED_TEXT);
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	4e ed       	ldi	r20, 0xDE	; 222
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    21ca:	43 cf       	rjmp	.-378    	; 0x2052 <app_update+0x78>
		LCD_sendStrAt(SECOND_LINE_START_POS,
				(uint8_t*) MENU_OPTIONS_LOWER_TEXT);
		break;

	case ENTER_PASS_CMD:
		LCD_sendStrAt(FIRST_LINE_START_POS, (uint8_t*) ENTER_PASS_TEXT);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	46 ec       	ldi	r20, 0xC6	; 198
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_sendStrAt>
    21d8:	c8 cf       	rjmp	.-112    	; 0x216a <app_update+0x190>

000021da <app_init>:
 * [Args]:
 * [in]: void
 * [Return]: void
 */
void app_init(void)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	29 97       	sbiw	r28, 0x09	; 9
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
	/* initialize the lcd */
	LCD_init();
    21ee:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_init>

	/* initialize the keypad */
	KEYPAD_init();
    21f2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <KEYPAD_init>

	/* initialize the uart */
	ST_UartConfig uartConfig = { UART_8_BITS, UART_PARITY_DISABLED,
			UART_STOP_BIT_1, 9600, UART_TX_INTERRUPT_DISABLED,
			UART_RX_INTERRUPT_ENABLED };
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	dc 01       	movw	r26, r24
    21fc:	e2 e3       	ldi	r30, 0x32	; 50
    21fe:	f2 e0       	ldi	r31, 0x02	; 2
    2200:	29 e0       	ldi	r18, 0x09	; 9
    2202:	01 90       	ld	r0, Z+
    2204:	0d 92       	st	X+, r0
    2206:	21 50       	subi	r18, 0x01	; 1
    2208:	e1 f7       	brne	.-8      	; 0x2202 <app_init+0x28>
	UART_init(&uartConfig);
    220a:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_init>

	/* set uart rx callback */
	UART_setRxInterruptCallback(UartRxCallback);
    220e:	8b e1       	ldi	r24, 0x1B	; 27
    2210:	91 e1       	ldi	r25, 0x11	; 17
    2212:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_setRxInterruptCallback>

	/* enable global interrupt */
	ENABLE_GLOBAL_INTERRUPT();
    2216:	78 94       	sei

	/* check if the other MCU is ready */
	if (g_receivedCmd == ACK_CMD)
    2218:	80 91 66 02 	lds	r24, 0x0266
    221c:	81 34       	cpi	r24, 0x41	; 65
    221e:	11 f4       	brne	.+4      	; 0x2224 <app_init+0x4a>
	{
		/* send ready to establish the connection */
		UART_sendByteBlocking(ACK_CMD);
    2220:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
	}
}
    2224:	29 96       	adiw	r28, 0x09	; 9
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <UartRxCallback>:
 * [in]: void
 * [Return]: void
 */
static void UartRxCallback(void)
{
	g_isDataReceived = TRUE;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	80 93 68 02 	sts	0x0268, r24

	/* save received cmd */
	g_receivedCmd = UART_receiveByteNonBlocking();
    223c:	0e 94 87 06 	call	0xd0e	; 0xd0e <UART_receiveByteNonBlocking>
    2240:	80 93 66 02 	sts	0x0266, r24
}
    2244:	08 95       	ret

00002246 <main>:
 * [Return]: int
 */
int main(void) {

	/* init the app */
	app_init();
    2246:	0e 94 ed 10 	call	0x21da	; 0x21da <app_init>

	while(1)
	{
		/* update the app */
		app_update();
    224a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <app_update>
    224e:	fd cf       	rjmp	.-6      	; 0x224a <main+0x4>

00002250 <__udivmodsi4>:
    2250:	a1 e2       	ldi	r26, 0x21	; 33
    2252:	1a 2e       	mov	r1, r26
    2254:	aa 1b       	sub	r26, r26
    2256:	bb 1b       	sub	r27, r27
    2258:	fd 01       	movw	r30, r26
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <__udivmodsi4_ep>

0000225c <__udivmodsi4_loop>:
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	ee 1f       	adc	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	a2 17       	cp	r26, r18
    2266:	b3 07       	cpc	r27, r19
    2268:	e4 07       	cpc	r30, r20
    226a:	f5 07       	cpc	r31, r21
    226c:	20 f0       	brcs	.+8      	; 0x2276 <__udivmodsi4_ep>
    226e:	a2 1b       	sub	r26, r18
    2270:	b3 0b       	sbc	r27, r19
    2272:	e4 0b       	sbc	r30, r20
    2274:	f5 0b       	sbc	r31, r21

00002276 <__udivmodsi4_ep>:
    2276:	66 1f       	adc	r22, r22
    2278:	77 1f       	adc	r23, r23
    227a:	88 1f       	adc	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	1a 94       	dec	r1
    2280:	69 f7       	brne	.-38     	; 0x225c <__udivmodsi4_loop>
    2282:	60 95       	com	r22
    2284:	70 95       	com	r23
    2286:	80 95       	com	r24
    2288:	90 95       	com	r25
    228a:	9b 01       	movw	r18, r22
    228c:	ac 01       	movw	r20, r24
    228e:	bd 01       	movw	r22, r26
    2290:	cf 01       	movw	r24, r30
    2292:	08 95       	ret

00002294 <__divmodsi4>:
    2294:	97 fb       	bst	r25, 7
    2296:	09 2e       	mov	r0, r25
    2298:	05 26       	eor	r0, r21
    229a:	0e d0       	rcall	.+28     	; 0x22b8 <__divmodsi4_neg1>
    229c:	57 fd       	sbrc	r21, 7
    229e:	04 d0       	rcall	.+8      	; 0x22a8 <__divmodsi4_neg2>
    22a0:	d7 df       	rcall	.-82     	; 0x2250 <__udivmodsi4>
    22a2:	0a d0       	rcall	.+20     	; 0x22b8 <__divmodsi4_neg1>
    22a4:	00 1c       	adc	r0, r0
    22a6:	38 f4       	brcc	.+14     	; 0x22b6 <__divmodsi4_exit>

000022a8 <__divmodsi4_neg2>:
    22a8:	50 95       	com	r21
    22aa:	40 95       	com	r20
    22ac:	30 95       	com	r19
    22ae:	21 95       	neg	r18
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	4f 4f       	sbci	r20, 0xFF	; 255
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255

000022b6 <__divmodsi4_exit>:
    22b6:	08 95       	ret

000022b8 <__divmodsi4_neg1>:
    22b8:	f6 f7       	brtc	.-4      	; 0x22b6 <__divmodsi4_exit>
    22ba:	90 95       	com	r25
    22bc:	80 95       	com	r24
    22be:	70 95       	com	r23
    22c0:	61 95       	neg	r22
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	8f 4f       	sbci	r24, 0xFF	; 255
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
