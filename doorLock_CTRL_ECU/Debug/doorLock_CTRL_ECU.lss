
doorLock_CTRL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000026ae  00002742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  0080017e  0080017e  00002860  2**0
                  ALLOC
  3 .stab         0000405c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e00  00000000  00000000  000068bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b5  00000000  00000000  0000981c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d07  00000000  00000000  000099d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001011  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eca  00000000  00000000  0000c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d5b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c7  00000000  00000000  0000d734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000082e  00000000  00000000  0000d9fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_3>
      10:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_8>
      24:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <main>
      8a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__stack+0x27>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__stack+0x123>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__stack+0x31>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__stack+0x129>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__stack+0x4d>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__stack+0x47>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__stack+0x123>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__stack+0x129>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__stack+0x5f>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__stack+0x6b>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__stack+0x129>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__stack+0xa5>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__stack+0xd3>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__stack+0xb9>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__stack+0x11b>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__stack+0x11b>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__stack+0x11b>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x10>

00000596 <__nesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__nesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__nesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__nesf2+0x58>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x18>

000005f6 <__gesf2>:
     5f6:	a8 e1       	ldi	r26, 0x18	; 24
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x18>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	89 e0       	ldi	r24, 0x09	; 9
     614:	e8 2e       	mov	r14, r24
     616:	f1 2c       	mov	r15, r1
     618:	ec 0e       	add	r14, r28
     61a:	fd 1e       	adc	r15, r29
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	b7 01       	movw	r22, r14
     622:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     626:	8e 01       	movw	r16, r28
     628:	0f 5e       	subi	r16, 0xEF	; 239
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
     62c:	ce 01       	movw	r24, r28
     62e:	05 96       	adiw	r24, 0x05	; 5
     630:	b8 01       	movw	r22, r16
     632:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     636:	89 85       	ldd	r24, Y+9	; 0x09
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	40 f0       	brcs	.+16     	; 0x64c <__gesf2+0x56>
     63c:	89 89       	ldd	r24, Y+17	; 0x11
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	28 f0       	brcs	.+10     	; 0x64c <__gesf2+0x56>
     642:	c7 01       	movw	r24, r14
     644:	b8 01       	movw	r22, r16
     646:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     64a:	01 c0       	rjmp	.+2      	; 0x64e <__gesf2+0x58>
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	68 96       	adiw	r28, 0x18	; 24
     650:	e6 e0       	ldi	r30, 0x06	; 6
     652:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x18>

00000656 <__fixsfsi>:
     656:	ac e0       	ldi	r26, 0x0C	; 12
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e1 e3       	ldi	r30, 0x31	; 49
     65c:	f3 e0       	ldi	r31, 0x03	; 3
     65e:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x20>
     662:	69 83       	std	Y+1, r22	; 0x01
     664:	7a 83       	std	Y+2, r23	; 0x02
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	9c 83       	std	Y+4, r25	; 0x04
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	be 01       	movw	r22, r28
     670:	6b 5f       	subi	r22, 0xFB	; 251
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	61 f1       	breq	.+88     	; 0x6d6 <__fixsfsi+0x80>
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	50 f1       	brcs	.+84     	; 0x6d6 <__fixsfsi+0x80>
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	21 f4       	brne	.+8      	; 0x68e <__fixsfsi+0x38>
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	88 23       	and	r24, r24
     68a:	51 f1       	breq	.+84     	; 0x6e0 <__fixsfsi+0x8a>
     68c:	2e c0       	rjmp	.+92     	; 0x6ea <__fixsfsi+0x94>
     68e:	2f 81       	ldd	r18, Y+7	; 0x07
     690:	38 85       	ldd	r19, Y+8	; 0x08
     692:	37 fd       	sbrc	r19, 7
     694:	20 c0       	rjmp	.+64     	; 0x6d6 <__fixsfsi+0x80>
     696:	6e 81       	ldd	r22, Y+6	; 0x06
     698:	2f 31       	cpi	r18, 0x1F	; 31
     69a:	31 05       	cpc	r19, r1
     69c:	1c f0       	brlt	.+6      	; 0x6a4 <__fixsfsi+0x4e>
     69e:	66 23       	and	r22, r22
     6a0:	f9 f0       	breq	.+62     	; 0x6e0 <__fixsfsi+0x8a>
     6a2:	23 c0       	rjmp	.+70     	; 0x6ea <__fixsfsi+0x94>
     6a4:	8e e1       	ldi	r24, 0x1E	; 30
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	82 1b       	sub	r24, r18
     6aa:	93 0b       	sbc	r25, r19
     6ac:	29 85       	ldd	r18, Y+9	; 0x09
     6ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     6b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     6b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__fixsfsi+0x68>
     6b6:	56 95       	lsr	r21
     6b8:	47 95       	ror	r20
     6ba:	37 95       	ror	r19
     6bc:	27 95       	ror	r18
     6be:	8a 95       	dec	r24
     6c0:	d2 f7       	brpl	.-12     	; 0x6b6 <__fixsfsi+0x60>
     6c2:	66 23       	and	r22, r22
     6c4:	b1 f0       	breq	.+44     	; 0x6f2 <__fixsfsi+0x9c>
     6c6:	50 95       	com	r21
     6c8:	40 95       	com	r20
     6ca:	30 95       	com	r19
     6cc:	21 95       	neg	r18
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	4f 4f       	sbci	r20, 0xFF	; 255
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <__fixsfsi+0x9c>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <__fixsfsi+0x9c>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	5f e7       	ldi	r21, 0x7F	; 127
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fixsfsi+0x9c>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e8       	ldi	r21, 0x80	; 128
     6f2:	b9 01       	movw	r22, r18
     6f4:	ca 01       	movw	r24, r20
     6f6:	2c 96       	adiw	r28, 0x0c	; 12
     6f8:	e2 e0       	ldi	r30, 0x02	; 2
     6fa:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x20>

000006fe <__floatunsisf>:
     6fe:	a8 e0       	ldi	r26, 0x08	; 8
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e8       	ldi	r30, 0x85	; 133
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x10>
     70a:	7b 01       	movw	r14, r22
     70c:	8c 01       	movw	r16, r24
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	81 05       	cpc	r24, r1
     714:	91 05       	cpc	r25, r1
     716:	19 f4       	brne	.+6      	; 0x71e <__floatunsisf+0x20>
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	60 c0       	rjmp	.+192    	; 0x7de <__floatunsisf+0xe0>
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	8e e1       	ldi	r24, 0x1E	; 30
     724:	c8 2e       	mov	r12, r24
     726:	d1 2c       	mov	r13, r1
     728:	dc 82       	std	Y+4, r13	; 0x04
     72a:	cb 82       	std	Y+3, r12	; 0x03
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__clzsi2>
     73c:	fc 01       	movw	r30, r24
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f7 ff       	sbrs	r31, 7
     742:	3b c0       	rjmp	.+118    	; 0x7ba <__floatunsisf+0xbc>
     744:	22 27       	eor	r18, r18
     746:	33 27       	eor	r19, r19
     748:	2e 1b       	sub	r18, r30
     74a:	3f 0b       	sbc	r19, r31
     74c:	57 01       	movw	r10, r14
     74e:	68 01       	movw	r12, r16
     750:	02 2e       	mov	r0, r18
     752:	04 c0       	rjmp	.+8      	; 0x75c <__floatunsisf+0x5e>
     754:	d6 94       	lsr	r13
     756:	c7 94       	ror	r12
     758:	b7 94       	ror	r11
     75a:	a7 94       	ror	r10
     75c:	0a 94       	dec	r0
     75e:	d2 f7       	brpl	.-12     	; 0x754 <__floatunsisf+0x56>
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	04 c0       	rjmp	.+8      	; 0x77a <__floatunsisf+0x7c>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	2a 95       	dec	r18
     77c:	d2 f7       	brpl	.-12     	; 0x772 <__floatunsisf+0x74>
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	a1 09       	sbc	r26, r1
     782:	b1 09       	sbc	r27, r1
     784:	8e 21       	and	r24, r14
     786:	9f 21       	and	r25, r15
     788:	a0 23       	and	r26, r16
     78a:	b1 23       	and	r27, r17
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	a1 05       	cpc	r26, r1
     790:	b1 05       	cpc	r27, r1
     792:	21 f0       	breq	.+8      	; 0x79c <__floatunsisf+0x9e>
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	4a 29       	or	r20, r10
     79e:	5b 29       	or	r21, r11
     7a0:	6c 29       	or	r22, r12
     7a2:	7d 29       	or	r23, r13
     7a4:	4d 83       	std	Y+5, r20	; 0x05
     7a6:	5e 83       	std	Y+6, r21	; 0x06
     7a8:	6f 83       	std	Y+7, r22	; 0x07
     7aa:	78 87       	std	Y+8, r23	; 0x08
     7ac:	8e e1       	ldi	r24, 0x1E	; 30
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8e 1b       	sub	r24, r30
     7b2:	9f 0b       	sbc	r25, r31
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	8b 83       	std	Y+3, r24	; 0x03
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <__floatunsisf+0xe0>
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	81 f0       	breq	.+32     	; 0x7de <__floatunsisf+0xe0>
     7be:	0e 2e       	mov	r0, r30
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <__floatunsisf+0xcc>
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	00 1f       	adc	r16, r16
     7c8:	11 1f       	adc	r17, r17
     7ca:	0a 94       	dec	r0
     7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <__floatunsisf+0xc4>
     7ce:	ed 82       	std	Y+5, r14	; 0x05
     7d0:	fe 82       	std	Y+6, r15	; 0x06
     7d2:	0f 83       	std	Y+7, r16	; 0x07
     7d4:	18 87       	std	Y+8, r17	; 0x08
     7d6:	ce 1a       	sub	r12, r30
     7d8:	df 0a       	sbc	r13, r31
     7da:	dc 82       	std	Y+4, r13	; 0x04
     7dc:	cb 82       	std	Y+3, r12	; 0x03
     7de:	1a 82       	std	Y+2, r1	; 0x02
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     7e8:	28 96       	adiw	r28, 0x08	; 8
     7ea:	ea e0       	ldi	r30, 0x0A	; 10
     7ec:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x10>

000007f0 <__clzsi2>:
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	7b 01       	movw	r14, r22
     7fa:	8c 01       	movw	r16, r24
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	e8 16       	cp	r14, r24
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	f8 06       	cpc	r15, r24
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 07       	cpc	r16, r24
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	18 07       	cpc	r17, r24
     80c:	88 f4       	brcc	.+34     	; 0x830 <__clzsi2+0x40>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	e8 16       	cp	r14, r24
     812:	f1 04       	cpc	r15, r1
     814:	01 05       	cpc	r16, r1
     816:	11 05       	cpc	r17, r1
     818:	31 f0       	breq	.+12     	; 0x826 <__clzsi2+0x36>
     81a:	28 f0       	brcs	.+10     	; 0x826 <__clzsi2+0x36>
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	17 c0       	rjmp	.+46     	; 0x854 <__clzsi2+0x64>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	12 c0       	rjmp	.+36     	; 0x854 <__clzsi2+0x64>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	e8 16       	cp	r14, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	f8 06       	cpc	r15, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 07       	cpc	r16, r24
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	18 07       	cpc	r17, r24
     840:	28 f0       	brcs	.+10     	; 0x84c <__clzsi2+0x5c>
     842:	88 e1       	ldi	r24, 0x18	; 24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	04 c0       	rjmp	.+8      	; 0x854 <__clzsi2+0x64>
     84c:	80 e1       	ldi	r24, 0x10	; 16
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	20 e2       	ldi	r18, 0x20	; 32
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	28 1b       	sub	r18, r24
     85e:	39 0b       	sbc	r19, r25
     860:	4a 0b       	sbc	r20, r26
     862:	5b 0b       	sbc	r21, r27
     864:	04 c0       	rjmp	.+8      	; 0x86e <__clzsi2+0x7e>
     866:	16 95       	lsr	r17
     868:	07 95       	ror	r16
     86a:	f7 94       	ror	r15
     86c:	e7 94       	ror	r14
     86e:	8a 95       	dec	r24
     870:	d2 f7       	brpl	.-12     	; 0x866 <__clzsi2+0x76>
     872:	f7 01       	movw	r30, r14
     874:	e8 59       	subi	r30, 0x98	; 152
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	80 81       	ld	r24, Z
     87a:	28 1b       	sub	r18, r24
     87c:	31 09       	sbc	r19, r1
     87e:	41 09       	sbc	r20, r1
     880:	51 09       	sbc	r21, r1
     882:	c9 01       	movw	r24, r18
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret

0000088e <__pack_f>:
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	fc 01       	movw	r30, r24
     89a:	e4 80       	ldd	r14, Z+4	; 0x04
     89c:	f5 80       	ldd	r15, Z+5	; 0x05
     89e:	06 81       	ldd	r16, Z+6	; 0x06
     8a0:	17 81       	ldd	r17, Z+7	; 0x07
     8a2:	d1 80       	ldd	r13, Z+1	; 0x01
     8a4:	80 81       	ld	r24, Z
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <__pack_f+0x2e>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 e1       	ldi	r26, 0x10	; 16
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e8 2a       	or	r14, r24
     8b4:	f9 2a       	or	r15, r25
     8b6:	0a 2b       	or	r16, r26
     8b8:	1b 2b       	or	r17, r27
     8ba:	a5 c0       	rjmp	.+330    	; 0xa06 <__pack_f+0x178>
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	09 f4       	brne	.+2      	; 0x8c2 <__pack_f+0x34>
     8c0:	9f c0       	rjmp	.+318    	; 0xa00 <__pack_f+0x172>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	21 f4       	brne	.+8      	; 0x8ce <__pack_f+0x40>
     8c6:	ee 24       	eor	r14, r14
     8c8:	ff 24       	eor	r15, r15
     8ca:	87 01       	movw	r16, r14
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__pack_f+0x4a>
     8ce:	e1 14       	cp	r14, r1
     8d0:	f1 04       	cpc	r15, r1
     8d2:	01 05       	cpc	r16, r1
     8d4:	11 05       	cpc	r17, r1
     8d6:	19 f4       	brne	.+6      	; 0x8de <__pack_f+0x50>
     8d8:	e0 e0       	ldi	r30, 0x00	; 0
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	96 c0       	rjmp	.+300    	; 0xa0a <__pack_f+0x17c>
     8de:	62 81       	ldd	r22, Z+2	; 0x02
     8e0:	73 81       	ldd	r23, Z+3	; 0x03
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	62 38       	cpi	r22, 0x82	; 130
     8e6:	79 07       	cpc	r23, r25
     8e8:	0c f0       	brlt	.+2      	; 0x8ec <__pack_f+0x5e>
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <__pack_f+0x114>
     8ec:	22 e8       	ldi	r18, 0x82	; 130
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	26 1b       	sub	r18, r22
     8f2:	37 0b       	sbc	r19, r23
     8f4:	2a 31       	cpi	r18, 0x1A	; 26
     8f6:	31 05       	cpc	r19, r1
     8f8:	2c f0       	brlt	.+10     	; 0x904 <__pack_f+0x76>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	2a c0       	rjmp	.+84     	; 0x958 <__pack_f+0xca>
     904:	b8 01       	movw	r22, r16
     906:	a7 01       	movw	r20, r14
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__pack_f+0x86>
     90c:	76 95       	lsr	r23
     90e:	67 95       	ror	r22
     910:	57 95       	ror	r21
     912:	47 95       	ror	r20
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__pack_f+0x7e>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <__pack_f+0x9c>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	aa 1f       	adc	r26, r26
     928:	bb 1f       	adc	r27, r27
     92a:	2a 95       	dec	r18
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__pack_f+0x94>
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
     934:	8e 21       	and	r24, r14
     936:	9f 21       	and	r25, r15
     938:	a0 23       	and	r26, r16
     93a:	b1 23       	and	r27, r17
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	a1 05       	cpc	r26, r1
     940:	b1 05       	cpc	r27, r1
     942:	21 f0       	breq	.+8      	; 0x94c <__pack_f+0xbe>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	9a 01       	movw	r18, r20
     94e:	ab 01       	movw	r20, r22
     950:	28 2b       	or	r18, r24
     952:	39 2b       	or	r19, r25
     954:	4a 2b       	or	r20, r26
     956:	5b 2b       	or	r21, r27
     958:	da 01       	movw	r26, r20
     95a:	c9 01       	movw	r24, r18
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	90 70       	andi	r25, 0x00	; 0
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	80 34       	cpi	r24, 0x40	; 64
     966:	91 05       	cpc	r25, r1
     968:	a1 05       	cpc	r26, r1
     96a:	b1 05       	cpc	r27, r1
     96c:	39 f4       	brne	.+14     	; 0x97c <__pack_f+0xee>
     96e:	27 ff       	sbrs	r18, 7
     970:	09 c0       	rjmp	.+18     	; 0x984 <__pack_f+0xf6>
     972:	20 5c       	subi	r18, 0xC0	; 192
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	4f 4f       	sbci	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__pack_f+0xf6>
     97c:	21 5c       	subi	r18, 0xC1	; 193
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	20 30       	cpi	r18, 0x00	; 0
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	3a 07       	cpc	r19, r26
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	4a 07       	cpc	r20, r26
     992:	a0 e4       	ldi	r26, 0x40	; 64
     994:	5a 07       	cpc	r21, r26
     996:	10 f0       	brcs	.+4      	; 0x99c <__pack_f+0x10e>
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	79 01       	movw	r14, r18
     99e:	8a 01       	movw	r16, r20
     9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <__pack_f+0x162>
     9a2:	60 38       	cpi	r22, 0x80	; 128
     9a4:	71 05       	cpc	r23, r1
     9a6:	64 f5       	brge	.+88     	; 0xa00 <__pack_f+0x172>
     9a8:	fb 01       	movw	r30, r22
     9aa:	e1 58       	subi	r30, 0x81	; 129
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	d8 01       	movw	r26, r16
     9b0:	c7 01       	movw	r24, r14
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	a0 70       	andi	r26, 0x00	; 0
     9b8:	b0 70       	andi	r27, 0x00	; 0
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	91 05       	cpc	r25, r1
     9be:	a1 05       	cpc	r26, r1
     9c0:	b1 05       	cpc	r27, r1
     9c2:	39 f4       	brne	.+14     	; 0x9d2 <__pack_f+0x144>
     9c4:	e7 fe       	sbrs	r14, 7
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__pack_f+0x154>
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x14c>
     9d2:	8f e3       	ldi	r24, 0x3F	; 63
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 0e       	add	r14, r24
     9dc:	f9 1e       	adc	r15, r25
     9de:	0a 1f       	adc	r16, r26
     9e0:	1b 1f       	adc	r17, r27
     9e2:	17 ff       	sbrs	r17, 7
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__pack_f+0x162>
     9e6:	16 95       	lsr	r17
     9e8:	07 95       	ror	r16
     9ea:	f7 94       	ror	r15
     9ec:	e7 94       	ror	r14
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	16 95       	lsr	r17
     9f4:	07 95       	ror	r16
     9f6:	f7 94       	ror	r15
     9f8:	e7 94       	ror	r14
     9fa:	8a 95       	dec	r24
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <__pack_f+0x164>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__pack_f+0x17c>
     a00:	ee 24       	eor	r14, r14
     a02:	ff 24       	eor	r15, r15
     a04:	87 01       	movw	r16, r14
     a06:	ef ef       	ldi	r30, 0xFF	; 255
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	6e 2f       	mov	r22, r30
     a0c:	67 95       	ror	r22
     a0e:	66 27       	eor	r22, r22
     a10:	67 95       	ror	r22
     a12:	90 2f       	mov	r25, r16
     a14:	9f 77       	andi	r25, 0x7F	; 127
     a16:	d7 94       	ror	r13
     a18:	dd 24       	eor	r13, r13
     a1a:	d7 94       	ror	r13
     a1c:	8e 2f       	mov	r24, r30
     a1e:	86 95       	lsr	r24
     a20:	49 2f       	mov	r20, r25
     a22:	46 2b       	or	r20, r22
     a24:	58 2f       	mov	r21, r24
     a26:	5d 29       	or	r21, r13
     a28:	b7 01       	movw	r22, r14
     a2a:	ca 01       	movw	r24, r20
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	08 95       	ret

00000a38 <__unpack_f>:
     a38:	fc 01       	movw	r30, r24
     a3a:	db 01       	movw	r26, r22
     a3c:	40 81       	ld	r20, Z
     a3e:	51 81       	ldd	r21, Z+1	; 0x01
     a40:	22 81       	ldd	r18, Z+2	; 0x02
     a42:	62 2f       	mov	r22, r18
     a44:	6f 77       	andi	r22, 0x7F	; 127
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	22 1f       	adc	r18, r18
     a4a:	22 27       	eor	r18, r18
     a4c:	22 1f       	adc	r18, r18
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	89 2f       	mov	r24, r25
     a52:	88 0f       	add	r24, r24
     a54:	82 2b       	or	r24, r18
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	99 1f       	adc	r25, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	99 1f       	adc	r25, r25
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	9c 93       	st	X, r25
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	21 15       	cp	r18, r1
     a68:	31 05       	cpc	r19, r1
     a6a:	a9 f5       	brne	.+106    	; 0xad6 <__unpack_f+0x9e>
     a6c:	41 15       	cp	r20, r1
     a6e:	51 05       	cpc	r21, r1
     a70:	61 05       	cpc	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	11 f4       	brne	.+4      	; 0xa7a <__unpack_f+0x42>
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	37 c0       	rjmp	.+110    	; 0xae8 <__unpack_f+0xb0>
     a7a:	82 e8       	ldi	r24, 0x82	; 130
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	9c 93       	st	X, r25
     a82:	8e 93       	st	-X, r24
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	9a 01       	movw	r18, r20
     a88:	ab 01       	movw	r20, r22
     a8a:	67 e0       	ldi	r22, 0x07	; 7
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	44 1f       	adc	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	6a 95       	dec	r22
     a96:	d1 f7       	brne	.-12     	; 0xa8c <__unpack_f+0x54>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	8c 93       	st	X, r24
     a9c:	0d c0       	rjmp	.+26     	; 0xab8 <__unpack_f+0x80>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	44 1f       	adc	r20, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	8d 91       	ld	r24, X+
     aaa:	9c 91       	ld	r25, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	9c 93       	st	X, r25
     ab4:	8e 93       	st	-X, r24
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	20 30       	cpi	r18, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	38 07       	cpc	r19, r24
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	48 07       	cpc	r20, r24
     ac2:	80 e4       	ldi	r24, 0x40	; 64
     ac4:	58 07       	cpc	r21, r24
     ac6:	58 f3       	brcs	.-42     	; 0xa9e <__unpack_f+0x66>
     ac8:	14 96       	adiw	r26, 0x04	; 4
     aca:	2d 93       	st	X+, r18
     acc:	3d 93       	st	X+, r19
     ace:	4d 93       	st	X+, r20
     ad0:	5c 93       	st	X, r21
     ad2:	17 97       	sbiw	r26, 0x07	; 7
     ad4:	08 95       	ret
     ad6:	2f 3f       	cpi	r18, 0xFF	; 255
     ad8:	31 05       	cpc	r19, r1
     ada:	79 f4       	brne	.+30     	; 0xafa <__unpack_f+0xc2>
     adc:	41 15       	cp	r20, r1
     ade:	51 05       	cpc	r21, r1
     ae0:	61 05       	cpc	r22, r1
     ae2:	71 05       	cpc	r23, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__unpack_f+0xb4>
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	8c 93       	st	X, r24
     aea:	08 95       	ret
     aec:	64 ff       	sbrs	r22, 4
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <__unpack_f+0xbe>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8c 93       	st	X, r24
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <__unpack_f+0xe2>
     af6:	1c 92       	st	X, r1
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <__unpack_f+0xe2>
     afa:	2f 57       	subi	r18, 0x7F	; 127
     afc:	30 40       	sbci	r19, 0x00	; 0
     afe:	13 96       	adiw	r26, 0x03	; 3
     b00:	3c 93       	st	X, r19
     b02:	2e 93       	st	-X, r18
     b04:	12 97       	sbiw	r26, 0x02	; 2
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	8c 93       	st	X, r24
     b0a:	87 e0       	ldi	r24, 0x07	; 7
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	66 1f       	adc	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	d1 f7       	brne	.-12     	; 0xb0c <__unpack_f+0xd4>
     b18:	70 64       	ori	r23, 0x40	; 64
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	4d 93       	st	X+, r20
     b1e:	5d 93       	st	X+, r21
     b20:	6d 93       	st	X+, r22
     b22:	7c 93       	st	X, r23
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	08 95       	ret

00000b28 <__fpcmp_parts_f>:
     b28:	1f 93       	push	r17
     b2a:	dc 01       	movw	r26, r24
     b2c:	fb 01       	movw	r30, r22
     b2e:	9c 91       	ld	r25, X
     b30:	92 30       	cpi	r25, 0x02	; 2
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__fpcmp_parts_f+0xe>
     b34:	47 c0       	rjmp	.+142    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b36:	80 81       	ld	r24, Z
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <__fpcmp_parts_f+0x16>
     b3c:	43 c0       	rjmp	.+134    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b3e:	94 30       	cpi	r25, 0x04	; 4
     b40:	51 f4       	brne	.+20     	; 0xb56 <__fpcmp_parts_f+0x2e>
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	1c 91       	ld	r17, X
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	99 f5       	brne	.+102    	; 0xbb0 <__fpcmp_parts_f+0x88>
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	68 2f       	mov	r22, r24
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	61 1b       	sub	r22, r17
     b52:	71 09       	sbc	r23, r1
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <__fpcmp_parts_f+0xac>
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	21 f0       	breq	.+8      	; 0xb62 <__fpcmp_parts_f+0x3a>
     b5a:	92 30       	cpi	r25, 0x02	; 2
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__fpcmp_parts_f+0x42>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	b9 f1       	breq	.+110    	; 0xbd0 <__fpcmp_parts_f+0xa8>
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	88 23       	and	r24, r24
     b66:	89 f1       	breq	.+98     	; 0xbca <__fpcmp_parts_f+0xa2>
     b68:	2d c0       	rjmp	.+90     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	1c 91       	ld	r17, X
     b6e:	11 97       	sbiw	r26, 0x01	; 1
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	f1 f0       	breq	.+60     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	18 17       	cp	r17, r24
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b7a:	12 96       	adiw	r26, 0x02	; 2
     b7c:	2d 91       	ld	r18, X+
     b7e:	3c 91       	ld	r19, X
     b80:	13 97       	sbiw	r26, 0x03	; 3
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	94 f0       	brlt	.+36     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	bc f0       	brlt	.+46     	; 0xbc0 <__fpcmp_parts_f+0x98>
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	8d 91       	ld	r24, X+
     b96:	9d 91       	ld	r25, X+
     b98:	0d 90       	ld	r0, X+
     b9a:	bc 91       	ld	r27, X
     b9c:	a0 2d       	mov	r26, r0
     b9e:	24 81       	ldd	r18, Z+4	; 0x04
     ba0:	35 81       	ldd	r19, Z+5	; 0x05
     ba2:	46 81       	ldd	r20, Z+6	; 0x06
     ba4:	57 81       	ldd	r21, Z+7	; 0x07
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	4a 07       	cpc	r20, r26
     bac:	5b 07       	cpc	r21, r27
     bae:	18 f4       	brcc	.+6      	; 0xbb6 <__fpcmp_parts_f+0x8e>
     bb0:	11 23       	and	r17, r17
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <__fpcmp_parts_f+0xa2>
     bb6:	82 17       	cp	r24, r18
     bb8:	93 07       	cpc	r25, r19
     bba:	a4 07       	cpc	r26, r20
     bbc:	b5 07       	cpc	r27, r21
     bbe:	40 f4       	brcc	.+16     	; 0xbd0 <__fpcmp_parts_f+0xa8>
     bc0:	11 23       	and	r17, r17
     bc2:	19 f0       	breq	.+6      	; 0xbca <__fpcmp_parts_f+0xa2>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__fpcmp_parts_f+0xac>
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	7f ef       	ldi	r23, 0xFF	; 255
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__fpcmp_parts_f+0xac>
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	1f 91       	pop	r17
     bd8:	08 95       	ret

00000bda <UART_init>:
 * [in]: const ST_UartConfig * a_uartConfig
 * 		 the configuration of the uart
 * [Return]: void
 */
void UART_init(const ST_UartConfig * a_uartConfig)
{
     bda:	fc 01       	movw	r30, r24
	uint16_t ubrrValue = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA_R = SELECT_BIT(U2X);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 = 0 not used
	 * UCSZ2 = 0 all available character size options (5, 6, 7, 8) has UCSZ2 = 0
	 ***********************************************************************/
	UCSRB_R = SELECT_BIT(RXEN) | SELECT_BIT(TXEN);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	8a b9       	out	0x0a, r24	; 10

	/* insert the value of rx interrupt in RXCIE */
	COPY_BITS(UCSRB_R, 0x01, a_uartConfig->rxInterrupt, RXCIE);
     be4:	9a b1       	in	r25, 0x0a	; 10
     be6:	80 85       	ldd	r24, Z+8	; 0x08
     be8:	87 95       	ror	r24
     bea:	88 27       	eor	r24, r24
     bec:	87 95       	ror	r24
     bee:	9f 77       	andi	r25, 0x7F	; 127
     bf0:	89 2b       	or	r24, r25
     bf2:	8a b9       	out	0x0a, r24	; 10

	/* insert the value of tx interrupt in TXCIE */
	COPY_BITS(UCSRB_R, 0x01, a_uartConfig->txInterrupt, TXCIE);
     bf4:	2a b1       	in	r18, 0x0a	; 10
     bf6:	87 81       	ldd	r24, Z+7	; 0x07
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	90 70       	andi	r25, 0x00	; 0
     bfe:	00 24       	eor	r0, r0
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	07 94       	ror	r0
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	07 94       	ror	r0
     c0c:	98 2f       	mov	r25, r24
     c0e:	80 2d       	mov	r24, r0
     c10:	2f 7b       	andi	r18, 0xBF	; 191
     c12:	28 2b       	or	r18, r24
     c14:	2a b9       	out	0x0a, r18	; 10
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_R = SELECT_BIT(URSEL);
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	80 bd       	out	0x20, r24	; 32

	/* insert the value of the parity in UPM0, UPM1 */
	COPY_BITS(UCSRC_R, 0x03, a_uartConfig->parity, UPM0);
     c1a:	20 b5       	in	r18, 0x20	; 32
     c1c:	81 81       	ldd	r24, Z+1	; 0x01
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	83 70       	andi	r24, 0x03	; 3
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	82 95       	swap	r24
     c26:	92 95       	swap	r25
     c28:	90 7f       	andi	r25, 0xF0	; 240
     c2a:	98 27       	eor	r25, r24
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	98 27       	eor	r25, r24
     c30:	2f 7c       	andi	r18, 0xCF	; 207
     c32:	28 2b       	or	r18, r24
     c34:	20 bd       	out	0x20, r18	; 32

	/* insert the value of the stop bit(s) number in USBS */
	COPY_BITS(UCSRC_R, 0x01, a_uartConfig->stopBit, USBS);
     c36:	20 b5       	in	r18, 0x20	; 32
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	27 7f       	andi	r18, 0xF7	; 247
     c4e:	28 2b       	or	r18, r24
     c50:	20 bd       	out	0x20, r18	; 32

	/* insert the value of the character size in UCSZ0, UCSZ1 */
	COPY_BITS(UCSRC_R, 0x03, a_uartConfig->charSize, UCSZ0);
     c52:	20 b5       	in	r18, 0x20	; 32
     c54:	80 81       	ld	r24, Z
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	29 7f       	andi	r18, 0xF9	; 249
     c62:	28 2b       	or	r18, r24
     c64:	20 bd       	out	0x20, r18	; 32

	/* Calculate the UBRR register value */
	ubrrValue = (uint16_t)(((F_CPU / (a_uartConfig->baudRate * 8UL))) - 1);
     c66:	23 81       	ldd	r18, Z+3	; 0x03
     c68:	34 81       	ldd	r19, Z+4	; 0x04
     c6a:	45 81       	ldd	r20, Z+5	; 0x05
     c6c:	56 81       	ldd	r21, Z+6	; 0x06
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	44 1f       	adc	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	44 1f       	adc	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	22 0f       	add	r18, r18
     c80:	33 1f       	adc	r19, r19
     c82:	44 1f       	adc	r20, r20
     c84:	55 1f       	adc	r21, r21
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	72 e1       	ldi	r23, 0x12	; 18
     c8a:	8a e7       	ldi	r24, 0x7A	; 122
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__udivmodsi4>
     c92:	21 50       	subi	r18, 0x01	; 1
     c94:	30 40       	sbci	r19, 0x00	; 0

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_R = (uint8_t)(ubrrValue >> 8);
     c96:	30 bd       	out	0x20, r19	; 32
	UBRRL_R = (uint8_t)(ubrrValue);
     c98:	29 b9       	out	0x09, r18	; 9
}
     c9a:	08 95       	ret

00000c9c <UART_setRxInterruptCallback>:
 * [in]: void (* volatile a_ptrToHandler)(void)
 * 		 pointer to the callback function
 * [Return]: void
 */
void UART_setRxInterruptCallback(void (* volatile a_ptrToHandler)(void))
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <UART_setRxInterruptCallback+0x6>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
	/* save the rx interrupt pointer to callback */
	g_uartRxPtrToHandler = a_ptrToHandler;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	90 93 81 01 	sts	0x0181, r25
     cb2:	80 93 80 01 	sts	0x0180, r24
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <UART_setTxInterruptCallback>:
 * [in]: void (* volatile a_ptrToHandler)(void)
 * 		 pointer to the callback function
 * [Return]: void
 */
void UART_setTxInterruptCallback(void (* volatile a_ptrToHandler)(void))
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <UART_setTxInterruptCallback+0x6>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
	/* save the tx interrupt pointer to callback */
	g_uartTxPtrToHandler = a_ptrToHandler;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	90 93 7f 01 	sts	0x017F, r25
     cd6:	80 93 7e 01 	sts	0x017E, r24
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <UART_sendByteBlocking>:
void UART_sendByteBlocking(const uint8_t a_data)
{
	/*
	 * wait till the transfer buffer is empty
	 */
	while(!UART_TxIsEmpty());
     ce4:	5d 9b       	sbis	0x0b, 5	; 11
     ce6:	fe cf       	rjmp	.-4      	; 0xce4 <UART_sendByteBlocking>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_R = a_data;
     ce8:	8c b9       	out	0x0c, r24	; 12
}
     cea:	08 95       	ret

00000cec <UART_sendByteNonBlocking>:
void UART_sendByteNonBlocking(const uint8_t a_data)
{
	/*
	 * check if the transfer buffer is empty and ready to receive new data
	 */
	if(UART_TxIsEmpty())
     cec:	5d 99       	sbic	0x0b, 5	; 11
	{
		/* send data */
		UDR_R = a_data;
     cee:	8c b9       	out	0x0c, r24	; 12
     cf0:	08 95       	ret

00000cf2 <UART_receiveByteBlocking>:
{
	uint8_t data;
	boolean rxInterruptEnabled = FALSE;

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
     cf2:	57 99       	sbic	0x0a, 7	; 10
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <UART_receiveByteBlocking+0x16>
     cf6:	90 e0       	ldi	r25, 0x00	; 0
		CLEAR_BIT(UCSRB_R, RXCIE);
		rxInterruptEnabled = TRUE;
	}

	/* wait till data is available in receive buffer */
	while(!UART_DataIsAvailable());
     cf8:	5f 9b       	sbis	0x0b, 7	; 11
     cfa:	fe cf       	rjmp	.-4      	; 0xcf8 <UART_receiveByteBlocking+0x6>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data = UDR_R;
     cfc:	8c b1       	in	r24, 0x0c	; 12

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
     cfe:	91 30       	cpi	r25, 0x01	; 1
     d00:	09 f0       	breq	.+2      	; 0xd04 <UART_receiveByteBlocking+0x12>
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
	}

	return data;
}
     d02:	08 95       	ret

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
	{
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
     d04:	57 9a       	sbi	0x0a, 7	; 10
	}

	return data;
}
     d06:	08 95       	ret

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
	{
		/* disable it temporarely */
		CLEAR_BIT(UCSRB_R, RXCIE);
     d08:	57 98       	cbi	0x0a, 7	; 10
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	f5 cf       	rjmp	.-22     	; 0xcf8 <UART_receiveByteBlocking+0x6>

00000d0e <UART_receiveByteNonBlocking>:
 * 			 the received byte
 */
uint8_t UART_receiveByteNonBlocking(void)
{
	/* check if data is available in the receive buffer */
	if(UART_DataIsAvailable())
     d0e:	5f 9b       	sbis	0x0b, 7	; 11
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <UART_receiveByteNonBlocking+0x8>
	{
		/*
		 * Read the received data from the Rx buffer (UDR)
		 */
		return UDR_R;
     d12:	8c b1       	in	r24, 0x0c	; 12
	}

	/* return 0 if the receive buffer is empty */
	return 0;
}
     d14:	08 95       	ret
 * 			 the received byte
 */
uint8_t UART_receiveByteNonBlocking(void)
{
	/* check if data is available in the receive buffer */
	if(UART_DataIsAvailable())
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret

00000d1a <UART_sendString>:
 * [in]: const char * a_str
 * 		 string to be sent
 * [Return]: void
 */
void UART_sendString(const char * a_str)
{
     d1a:	fc 01       	movw	r30, r24
	while(*a_str)
     d1c:	80 81       	ld	r24, Z
     d1e:	88 23       	and	r24, r24
     d20:	39 f0       	breq	.+14     	; 0xd30 <UART_sendString+0x16>
void UART_sendByteBlocking(const uint8_t a_data)
{
	/*
	 * wait till the transfer buffer is empty
	 */
	while(!UART_TxIsEmpty());
     d22:	5d 9b       	sbis	0x0b, 5	; 11
     d24:	fe cf       	rjmp	.-4      	; 0xd22 <UART_sendString+0x8>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_R = a_data;
     d26:	8c b9       	out	0x0c, r24	; 12
	{
		/* send char by char */
		UART_sendByteBlocking(*a_str);

		/* increment the pointer */
		a_str ++;
     d28:	31 96       	adiw	r30, 0x01	; 1
 * 		 string to be sent
 * [Return]: void
 */
void UART_sendString(const char * a_str)
{
	while(*a_str)
     d2a:	80 81       	ld	r24, Z
     d2c:	88 23       	and	r24, r24
     d2e:	c9 f7       	brne	.-14     	; 0xd22 <UART_sendString+0x8>
     d30:	08 95       	ret

00000d32 <UART_DataIsAvailable>:
 * 			 FALSE otherwise
 */
uint8_t UART_DataIsAvailable(void)
{
	/* check if RXC flag is set (the UART receive data) */
	return BIT_IS_SET(UCSRA_R, RXC);
     d32:	8b b1       	in	r24, 0x0b	; 11
}
     d34:	80 78       	andi	r24, 0x80	; 128
     d36:	08 95       	ret

00000d38 <UART_TxIsEmpty>:
 * 			 FALSE otherwise
 */
uint8_t UART_TxIsEmpty(void)
{
	/* check if transfer buffer is empty */
	return BIT_IS_SET(UCSRA_R, UDRE);
     d38:	8b b1       	in	r24, 0x0b	; 11
}
     d3a:	80 72       	andi	r24, 0x20	; 32
     d3c:	08 95       	ret

00000d3e <__vector_11>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* ISR for uart Rx */
ISR(USART_RXC_vect)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
	if(g_uartRxPtrToHandler != NULL)
     d60:	80 91 80 01 	lds	r24, 0x0180
     d64:	90 91 81 01 	lds	r25, 0x0181
     d68:	89 2b       	or	r24, r25
     d6a:	29 f0       	breq	.+10     	; 0xd76 <__vector_11+0x38>
	{
		(*g_uartRxPtrToHandler)();
     d6c:	e0 91 80 01 	lds	r30, 0x0180
     d70:	f0 91 81 01 	lds	r31, 0x0181
     d74:	09 95       	icall

	/* The RX flag is cleared only when data is read
	 * so, this condition checks if it's not cleared (read) in the
	 * callback, it reads the data to clear it
	 */
	if(UART_DataIsAvailable())
     d76:	5f 9b       	sbis	0x0b, 7	; 11
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <__vector_11+0x40>
 * 			 the received byte
 */
uint8_t UART_receiveByteNonBlocking(void)
{
	/* check if data is available in the receive buffer */
	if(UART_DataIsAvailable())
     d7a:	5f 99       	sbic	0x0b, 7	; 11
	{
		/*
		 * Read the received data from the Rx buffer (UDR)
		 */
		return UDR_R;
     d7c:	8c b1       	in	r24, 0x0c	; 12
	 */
	if(UART_DataIsAvailable())
	{
		UART_receiveByteNonBlocking();
	}
}
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	7f 91       	pop	r23
     d8c:	6f 91       	pop	r22
     d8e:	5f 91       	pop	r21
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_13>:

/* ISR for uart Tx */
ISR(USART_TXC_vect)
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
	if(g_uartTxPtrToHandler != NULL)
     dc2:	80 91 7e 01 	lds	r24, 0x017E
     dc6:	90 91 7f 01 	lds	r25, 0x017F
     dca:	89 2b       	or	r24, r25
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <__vector_13+0x38>
	{
		(*g_uartTxPtrToHandler)();
     dce:	e0 91 7e 01 	lds	r30, 0x017E
     dd2:	f0 91 7f 01 	lds	r31, 0x017F
     dd6:	09 95       	icall
	}
}
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <UART_receiveString>:
 * 		 It's the total size considering the null terminator, i.e if
 * 		 max size of 20 is passed, only 19 char will be saved and the 20th is '\0'
 * [Return]: void
 */
void UART_receiveString(uint8_t * a_str, uint8_t a_maxSize)
{
     dfa:	fc 01       	movw	r30, r24
	/* counter to keep track of the size */
	uint8_t counter = 0;

	/* return if size is 0 or 1 */
	if(a_maxSize == 0)
     dfc:	66 23       	and	r22, r22
     dfe:	49 f1       	breq	.+82     	; 0xe52 <UART_receiveString+0x58>
	{
		return;
	}
	else if(a_maxSize == 1)
     e00:	61 30       	cpi	r22, 0x01	; 1
     e02:	41 f1       	breq	.+80     	; 0xe54 <UART_receiveString+0x5a>
{
	uint8_t data;
	boolean rxInterruptEnabled = FALSE;

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
     e04:	57 99       	sbic	0x0a, 7	; 10
     e06:	2d c0       	rjmp	.+90     	; 0xe62 <UART_receiveString+0x68>
     e08:	90 e0       	ldi	r25, 0x00	; 0
		CLEAR_BIT(UCSRB_R, RXCIE);
		rxInterruptEnabled = TRUE;
	}

	/* wait till data is available in receive buffer */
	while(!UART_DataIsAvailable());
     e0a:	5f 9b       	sbis	0x0b, 7	; 11
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <UART_receiveString+0x10>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data = UDR_R;
     e0e:	8c b1       	in	r24, 0x0c	; 12

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
     e10:	91 30       	cpi	r25, 0x01	; 1
     e12:	29 f1       	breq	.+74     	; 0xe5e <UART_receiveString+0x64>
		*a_str = '\0';
		return;
	}

	/* get the first character */
	*a_str = UART_receiveByteBlocking();
     e14:	80 83       	st	Z, r24

	/* loop till the UART_RECEIVE_STRING_TILL is found */
	while(*a_str != UART_RECEIVE_STRING_TILL)
     e16:	8d 30       	cpi	r24, 0x0D	; 13
     e18:	d9 f0       	breq	.+54     	; 0xe50 <UART_receiveString+0x56>
	{
		/* increment the counter and the pointer */
		counter ++;
		a_str ++;
     e1a:	31 96       	adiw	r30, 0x01	; 1

		/* break the loop if the length reached the max size - 1 to leave space for '\0' */
		if(counter >= a_maxSize - 1) break;
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	61 50       	subi	r22, 0x01	; 1
     e20:	70 40       	sbci	r23, 0x00	; 0
     e22:	62 30       	cpi	r22, 0x02	; 2
     e24:	71 05       	cpc	r23, r1
     e26:	a4 f0       	brlt	.+40     	; 0xe50 <UART_receiveString+0x56>
     e28:	21 e0       	ldi	r18, 0x01	; 1
{
	uint8_t data;
	boolean rxInterruptEnabled = FALSE;

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
     e2a:	57 99       	sbic	0x0a, 7	; 10
     e2c:	15 c0       	rjmp	.+42     	; 0xe58 <UART_receiveString+0x5e>
     e2e:	90 e0       	ldi	r25, 0x00	; 0
		CLEAR_BIT(UCSRB_R, RXCIE);
		rxInterruptEnabled = TRUE;
	}

	/* wait till data is available in receive buffer */
	while(!UART_DataIsAvailable());
     e30:	5f 9b       	sbis	0x0b, 7	; 11
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <UART_receiveString+0x36>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data = UDR_R;
     e34:	8c b1       	in	r24, 0x0c	; 12

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
     e36:	91 30       	cpi	r25, 0x01	; 1
     e38:	09 f4       	brne	.+2      	; 0xe3c <UART_receiveString+0x42>
	{
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
     e3a:	57 9a       	sbi	0x0a, 7	; 10

		/* break the loop if the length reached the max size - 1 to leave space for '\0' */
		if(counter >= a_maxSize - 1) break;

		/* get the next character */
		*a_str = UART_receiveByteBlocking();
     e3c:	80 83       	st	Z, r24

	/* get the first character */
	*a_str = UART_receiveByteBlocking();

	/* loop till the UART_RECEIVE_STRING_TILL is found */
	while(*a_str != UART_RECEIVE_STRING_TILL)
     e3e:	8d 30       	cpi	r24, 0x0D	; 13
     e40:	39 f0       	breq	.+14     	; 0xe50 <UART_receiveString+0x56>
	{
		/* increment the counter and the pointer */
		counter ++;
     e42:	2f 5f       	subi	r18, 0xFF	; 255
		a_str ++;
     e44:	31 96       	adiw	r30, 0x01	; 1

		/* break the loop if the length reached the max size - 1 to leave space for '\0' */
		if(counter >= a_maxSize - 1) break;
     e46:	82 2f       	mov	r24, r18
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	86 17       	cp	r24, r22
     e4c:	97 07       	cpc	r25, r23
     e4e:	6c f3       	brlt	.-38     	; 0xe2a <UART_receiveString+0x30>
		/* get the next character */
		*a_str = UART_receiveByteBlocking();
	}

	/* add null terminator */
	*a_str = '\0';
     e50:	10 82       	st	Z, r1
     e52:	08 95       	ret
	{
		return;
	}
	else if(a_maxSize == 1)
	{
		*a_str = '\0';
     e54:	10 82       	st	Z, r1
     e56:	08 95       	ret

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
	{
		/* disable it temporarely */
		CLEAR_BIT(UCSRB_R, RXCIE);
     e58:	57 98       	cbi	0x0a, 7	; 10
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	e9 cf       	rjmp	.-46     	; 0xe30 <UART_receiveString+0x36>

	/* re-enable rx enterrupt if it was enabled before entering the function */
	if(rxInterruptEnabled == TRUE)
	{
		/* re-enable it */
		SET_BIT(UCSRB_R, RXCIE);
     e5e:	57 9a       	sbi	0x0a, 7	; 10
     e60:	d9 cf       	rjmp	.-78     	; 0xe14 <UART_receiveString+0x1a>

	/* check if the rx interrput is enabled */
	if(BIT_IS_SET(UCSRB_R, RXCIE))
	{
		/* disable it temporarely */
		CLEAR_BIT(UCSRB_R, RXCIE);
     e62:	57 98       	cbi	0x0a, 7	; 10
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	d1 cf       	rjmp	.-94     	; 0xe0a <UART_receiveString+0x10>

00000e68 <TWI_init>:
 * [in]: ST_TwiConfig * a_twiConfig
 * 		 pointer to structure of the twi config
 * [Return]: void
 */
void TWI_init(ST_TwiConfig * a_twiConfig)
{
     e68:	fc 01       	movw	r30, r24

	/* copy the value of the prescaler to TWSR_R */
	TWSR_R = a_twiConfig->prescaler;
     e6a:	81 81       	ldd	r24, Z+1	; 0x01
     e6c:	81 b9       	out	0x01, r24	; 1

	/* copy the value of the bit rate to TWBR_R */
	TWBR_R = a_twiConfig->bitRate;
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	80 b9       	out	0x00, r24	; 0

	/* General Call Recognition: Off */
	CLEAR_BIT(TWAR_R, TWGCE);
     e72:	10 98       	cbi	0x02, 0	; 2

	/* Two Wire Bus address my address if any master device want to call me:
	 * (used in case this MC is a slave device)
	 * General Call Recognition: Off
	 */
	COPY_BITS(TWAR_R, 0xFE, a_twiConfig->slaveAddress, TWA0);
     e74:	22 b1       	in	r18, 0x02	; 2
     e76:	80 81       	ld	r24, Z
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	8e 7f       	andi	r24, 0xFE	; 254
     e7c:	90 70       	andi	r25, 0x00	; 0
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	23 70       	andi	r18, 0x03	; 3
     e84:	28 2b       	or	r18, r24
     e86:	22 b9       	out	0x02, r18	; 2

	/* enable TWI */
	TWCR_R = SELECT_BIT(TWEN);
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	86 bf       	out	0x36, r24	; 54
}
     e8c:	08 95       	ret

00000e8e <TWI_start>:
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_R = SELECT_BIT(TWINT) | SELECT_BIT(TWSTA) | SELECT_BIT(TWEN);
     e8e:	84 ea       	ldi	r24, 0xA4	; 164
     e90:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT flag set in TWCR_R Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR_R, TWINT));
     e92:	06 b6       	in	r0, 0x36	; 54
     e94:	07 fe       	sbrs	r0, 7
     e96:	fd cf       	rjmp	.-6      	; 0xe92 <TWI_start+0x4>
}
     e98:	08 95       	ret

00000e9a <TWI_stop>:
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_R = SELECT_BIT(TWINT) | SELECT_BIT(TWSTO) | SELECT_BIT(TWEN);
     e9a:	84 e9       	ldi	r24, 0x94	; 148
     e9c:	86 bf       	out	0x36, r24	; 54
}
     e9e:	08 95       	ret

00000ea0 <TWI_writeByte>:
 * [Return]: void
 */
void TWI_writeByte(uint8_t a_data)
{
	/* Put data On TWI data Register */
	TWDR_R = a_data;
     ea0:	83 b9       	out	0x03, r24	; 3
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_R = SELECT_BIT(TWINT) | SELECT_BIT(TWEN);
     ea2:	84 e8       	ldi	r24, 0x84	; 132
     ea4:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR_R, TWINT));
     ea6:	06 b6       	in	r0, 0x36	; 54
     ea8:	07 fe       	sbrs	r0, 7
     eaa:	fd cf       	rjmp	.-6      	; 0xea6 <TWI_writeByte+0x6>
}
     eac:	08 95       	ret

00000eae <TWI_readByteWithACK>:
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_R = SELECT_BIT(TWINT) | SELECT_BIT(TWEN) | SELECT_BIT(TWEA);
     eae:	84 ec       	ldi	r24, 0xC4	; 196
     eb0:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR_R, TWINT));
     eb2:	06 b6       	in	r0, 0x36	; 54
     eb4:	07 fe       	sbrs	r0, 7
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <TWI_readByteWithACK+0x4>

	/* Read Data */
	return TWDR_R;
     eb8:	83 b1       	in	r24, 0x03	; 3
}
     eba:	08 95       	ret

00000ebc <TWI_readByteWithoutACK>:
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_R = SELECT_BIT(TWINT) | SELECT_BIT(TWEN);
     ebc:	84 e8       	ldi	r24, 0x84	; 132
     ebe:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT flag set in TWCR_R Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR_R, TWINT));
     ec0:	06 b6       	in	r0, 0x36	; 54
     ec2:	07 fe       	sbrs	r0, 7
     ec4:	fd cf       	rjmp	.-6      	; 0xec0 <TWI_readByteWithoutACK+0x4>

	/* Read Data */
	return TWDR_R;
     ec6:	83 b1       	in	r24, 0x03	; 3
}
     ec8:	08 95       	ret

00000eca <TWI_getStatus>:
 * [Return]: void
 */
uint8_t TWI_getStatus(void)
{
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	return (TWSR_R & 0xF8);
     eca:	81 b1       	in	r24, 0x01	; 1
}
     ecc:	88 7f       	andi	r24, 0xF8	; 248
     ece:	08 95       	ret

00000ed0 <TIMER_start>:
 * 		 timer to start
 * [Return]: uint8_t
 * 			 TIMER_INIT_SUCCESS or TIMER_INIT_ERROR
 */
uint8_t TIMER_start(uint8_t a_timer) {
	switch(a_timer)
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	79 f0       	breq	.+30     	; 0xef2 <TIMER_start+0x22>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	20 f0       	brcs	.+8      	; 0xee0 <TIMER_start+0x10>
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	a1 f0       	breq	.+40     	; 0xf04 <TIMER_start+0x34>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	08 95       	ret
	{
	case TIMER_0:
		COPY_BITS(TCCR0_R, 0b00000111, g_timers_init_prescaler[TIMER_0], 0);
     ee0:	93 b7       	in	r25, 0x33	; 51
     ee2:	80 91 9c 01 	lds	r24, 0x019C
     ee6:	87 70       	andi	r24, 0x07	; 7
     ee8:	98 7f       	andi	r25, 0xF8	; 248
     eea:	89 2b       	or	r24, r25
     eec:	83 bf       	out	0x33, r24	; 51
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
		break;
	case TIMER_1:
		COPY_BITS(TCCR1B_R, 0b00000111, g_timers_init_prescaler[TIMER_1], 0);
     ef2:	9e b5       	in	r25, 0x2e	; 46
     ef4:	80 91 9d 01 	lds	r24, 0x019D
     ef8:	87 70       	andi	r24, 0x07	; 7
     efa:	98 7f       	andi	r25, 0xF8	; 248
     efc:	89 2b       	or	r24, r25
     efe:	8e bd       	out	0x2e, r24	; 46
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	08 95       	ret
		break;
	case TIMER_2:
		COPY_BITS(TCCR2_R, 0b00000111, g_timers_init_prescaler[TIMER_2], 0);
     f04:	95 b5       	in	r25, 0x25	; 37
     f06:	80 91 9e 01 	lds	r24, 0x019E
     f0a:	87 70       	andi	r24, 0x07	; 7
     f0c:	98 7f       	andi	r25, 0xF8	; 248
     f0e:	89 2b       	or	r24, r25
     f10:	85 bd       	out	0x25, r24	; 37
     f12:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_SUCCESS;
}
     f14:	08 95       	ret

00000f16 <TIMER_stop>:
 * 		 timer to stop
 * [Return]: uint8_t
 * 			 TIMER_INIT_SUCCESS or TIMER_INIT_ERROR
 */
uint8_t TIMER_stop(uint8_t a_timer){
	switch(a_timer)
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	59 f0       	breq	.+22     	; 0xf30 <TIMER_stop+0x1a>
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <TIMER_stop+0x10>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	61 f0       	breq	.+24     	; 0xf3a <TIMER_stop+0x24>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret
	{
	case TIMER_0:
		COPY_BITS(TCCR0_R, 0b00000111, 0, 0);
     f26:	83 b7       	in	r24, 0x33	; 51
     f28:	88 7f       	andi	r24, 0xF8	; 248
     f2a:	83 bf       	out	0x33, r24	; 51
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	08 95       	ret
		break;
	case TIMER_1:
		COPY_BITS(TCCR1B_R, 0b00000111, 0, 0);
     f30:	8e b5       	in	r24, 0x2e	; 46
     f32:	88 7f       	andi	r24, 0xF8	; 248
     f34:	8e bd       	out	0x2e, r24	; 46
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret
		break;
	case TIMER_2:
		COPY_BITS(TCCR2_R, 0b00000111, 0, 0);
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	88 7f       	andi	r24, 0xF8	; 248
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return TIMER_ERROR;
	}
	return TIMER_SUCCESS;
}
     f42:	08 95       	ret

00000f44 <TIMER_read>:
 * 			 2 bytes => TIMER_1
 */
uint16_t TIMER_read(uint8_t a_timer)
{
	uint16_t count;
	switch(a_timer)
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	69 f0       	breq	.+26     	; 0xf62 <TIMER_read+0x1e>
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	30 f0       	brcs	.+12     	; 0xf58 <TIMER_read+0x14>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	69 f0       	breq	.+26     	; 0xf6a <TIMER_read+0x26>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
		break;
	default:
		return 0;
	}
	return count;
}
     f54:	c9 01       	movw	r24, r18
     f56:	08 95       	ret
{
	uint16_t count;
	switch(a_timer)
	{
	case TIMER_0:
		count = TCNT0_R;
     f58:	82 b7       	in	r24, 0x32	; 50
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
		break;
	default:
		return 0;
	}
	return count;
}
     f5e:	c9 01       	movw	r24, r18
     f60:	08 95       	ret
	{
	case TIMER_0:
		count = TCNT0_R;
		break;
	case TIMER_1:
		count = TCNT1_R;
     f62:	2c b5       	in	r18, 0x2c	; 44
     f64:	3d b5       	in	r19, 0x2d	; 45
		break;
	default:
		return 0;
	}
	return count;
}
     f66:	c9 01       	movw	r24, r18
     f68:	08 95       	ret
		break;
	case TIMER_1:
		count = TCNT1_R;
		break;
	case TIMER_2:
		count = TCNT2_R;
     f6a:	84 b5       	in	r24, 0x24	; 36
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
		break;
	default:
		return 0;
	}
	return count;
}
     f70:	c9 01       	movw	r24, r18
     f72:	08 95       	ret

00000f74 <TIMER_delayTicks>:
 * 		 prescaler to start the timer with, use defined prescalers depending
 * 		 on the DELAY_TIMER used
 * [Return]: void
 */
void TIMER_delayTicks(uint16_t ticks, uint32_t iterations, uint8_t prescaler)
{
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	7a 01       	movw	r14, r20
     f7e:	8b 01       	movw	r16, r22
#elif DELAY_TIMER == TIMER_2
	/* loop counter */
	uint32_t loopCounter;

	/* make sure count is initially = 0 */
	TCNT2_R = 0;
     f80:	14 bc       	out	0x24, r1	; 36

	/* make sure interrupt is closed */
	CLEAR_BIT(TIMSK_R, OCIE2);
     f82:	99 b7       	in	r25, 0x39	; 57
     f84:	9f 77       	andi	r25, 0x7F	; 127
     f86:	99 bf       	out	0x39, r25	; 57

	/* put ticks in OCR2_R */
	OCR2_R = ticks;
     f88:	83 bd       	out	0x23, r24	; 35

	/* set the timer to work in CTC mode */
	TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);
     f8a:	88 e8       	ldi	r24, 0x88	; 136
     f8c:	85 bd       	out	0x25, r24	; 37

	/* start the timer with the input prescaler */
	COPY_BITS(TCCR2_R, 0b00000111, prescaler, 0);
     f8e:	85 b5       	in	r24, 0x25	; 37
     f90:	27 70       	andi	r18, 0x07	; 7
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	82 2b       	or	r24, r18
     f96:	85 bd       	out	0x25, r24	; 37

	for(loopCounter = 0; loopCounter < iterations; loopCounter ++)
     f98:	41 15       	cp	r20, r1
     f9a:	51 05       	cpc	r21, r1
     f9c:	61 05       	cpc	r22, r1
     f9e:	71 05       	cpc	r23, r1
     fa0:	99 f0       	breq	.+38     	; 0xfc8 <TIMER_delayTicks+0x54>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
	{
		/* wait till the flag is 1, then clear it */
		while(BIT_IS_CLEAR(TIFR_R, OCF2));
     faa:	08 b6       	in	r0, 0x38	; 56
     fac:	07 fe       	sbrs	r0, 7
     fae:	fd cf       	rjmp	.-6      	; 0xfaa <TIMER_delayTicks+0x36>
		SET_BIT(TIFR_R, OCF2);
     fb0:	88 b7       	in	r24, 0x38	; 56
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	88 bf       	out	0x38, r24	; 56
	TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);

	/* start the timer with the input prescaler */
	COPY_BITS(TCCR2_R, 0b00000111, prescaler, 0);

	for(loopCounter = 0; loopCounter < iterations; loopCounter ++)
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	4f 4f       	sbci	r20, 0xFF	; 255
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	2e 15       	cp	r18, r14
     fc0:	3f 05       	cpc	r19, r15
     fc2:	40 07       	cpc	r20, r16
     fc4:	51 07       	cpc	r21, r17
     fc6:	88 f3       	brcs	.-30     	; 0xfaa <TIMER_delayTicks+0x36>
		while(BIT_IS_CLEAR(TIFR_R, OCF2));
		SET_BIT(TIFR_R, OCF2);
	}

	/* stop the timer */
	TCCR2_R = 0;
     fc8:	15 bc       	out	0x25, r1	; 37
#endif /* DELAY_TIMER == TIMER_0 */
}
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	08 95       	ret

00000fd4 <ticksPerIteration>:
 * 		 max number of ticks available for each timer
 * [Return]: uint16_t
 * 			 number of ticks that can fit in the timer count register (in OVF mood)
 * 			 or in OCRx (in CTC mood)
 */
static uint16_t ticksPerIteration(uint8_t a_timer, uint32_t a_ticks, uint16_t a_maxCounts) {
     fd4:	6f 92       	push	r6
     fd6:	7f 92       	push	r7
     fd8:	8f 92       	push	r8
     fda:	9f 92       	push	r9
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
	uint32_t counts;									/* number of ticks in each interrupt */
	float64_t countsTemp;								/* used to calculate  */
	g_timersInterruptActualCount[a_timer] = 1;			/* reset the actual interrupt count to 1 */
     ff0:	c8 2f       	mov	r28, r24
     ff2:	d0 e0       	ldi	r29, 0x00	; 0
     ff4:	cc 0f       	add	r28, r28
     ff6:	dd 1f       	adc	r29, r29
     ff8:	cc 0f       	add	r28, r28
     ffa:	dd 1f       	adc	r29, r29
     ffc:	fe 01       	movw	r30, r28
     ffe:	ee 57       	subi	r30, 0x7E	; 126
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	a8 2e       	mov	r10, r24
    1006:	b1 2c       	mov	r11, r1
    1008:	c1 2c       	mov	r12, r1
    100a:	d1 2c       	mov	r13, r1
    100c:	a0 82       	st	Z, r10
    100e:	b1 82       	std	Z+1, r11	; 0x01
    1010:	c2 82       	std	Z+2, r12	; 0x02
    1012:	d3 82       	std	Z+3, r13	; 0x03
	if (a_ticks <= a_maxCounts) {						/* if the ticks <= maxCounts there will be only one interrupt */
    1014:	79 01       	movw	r14, r18
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	e4 16       	cp	r14, r20
    101c:	f5 06       	cpc	r15, r21
    101e:	06 07       	cpc	r16, r22
    1020:	17 07       	cpc	r17, r23
    1022:	08 f0       	brcs	.+2      	; 0x1026 <ticksPerIteration+0x52>
    1024:	51 c0       	rjmp	.+162    	; 0x10c8 <ticksPerIteration+0xf4>
		g_timersInterruptCount[a_timer] = 1;
		return (uint16_t) (a_ticks);
	}
	/* counts will  be equal to countsTemp or countsTemp + 1
	   depending on whether countsTemp has fractions or not */
	countsTemp = (float64_t) a_ticks / ((uint32_t)a_maxCounts + 1);
    1026:	cb 01       	movw	r24, r22
    1028:	ba 01       	movw	r22, r20
    102a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    102e:	3b 01       	movw	r6, r22
    1030:	4c 01       	movw	r8, r24
    1032:	08 94       	sec
    1034:	e1 1c       	adc	r14, r1
    1036:	f1 1c       	adc	r15, r1
    1038:	01 1d       	adc	r16, r1
    103a:	11 1d       	adc	r17, r1
    103c:	c8 01       	movw	r24, r16
    103e:	b7 01       	movw	r22, r14
    1040:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c4 01       	movw	r24, r8
    104a:	b3 01       	movw	r22, r6
    104c:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1050:	7b 01       	movw	r14, r22
    1052:	8c 01       	movw	r16, r24
	counts = (uint32_t) countsTemp;
    1054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1058:	5b 01       	movw	r10, r22
    105a:	6c 01       	movw	r12, r24
	if (counts != countsTemp) {
    105c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    1060:	a8 01       	movw	r20, r16
    1062:	97 01       	movw	r18, r14
    1064:	0e 94 cb 02 	call	0x596	; 0x596 <__nesf2>
    1068:	88 23       	and	r24, r24
    106a:	41 f5       	brne	.+80     	; 0x10bc <ticksPerIteration+0xe8>
		counts++;
	}
	g_timersInterruptCount[a_timer] = counts;
    106c:	c2 57       	subi	r28, 0x72	; 114
    106e:	de 4f       	sbci	r29, 0xFE	; 254
    1070:	a8 82       	st	Y, r10
    1072:	b9 82       	std	Y+1, r11	; 0x01
    1074:	ca 82       	std	Y+2, r12	; 0x02
    1076:	db 82       	std	Y+3, r13	; 0x03
	return (uint16_t) (((float64_t)a_ticks / counts) + 0.5);			/* number of ticks in each interrupt */
    1078:	c6 01       	movw	r24, r12
    107a:	b5 01       	movw	r22, r10
    107c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    1080:	9b 01       	movw	r18, r22
    1082:	ac 01       	movw	r20, r24
    1084:	c4 01       	movw	r24, r8
    1086:	b3 01       	movw	r22, r6
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	cb 01       	movw	r24, r22
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	08 95       	ret
	/* counts will  be equal to countsTemp or countsTemp + 1
	   depending on whether countsTemp has fractions or not */
	countsTemp = (float64_t) a_ticks / ((uint32_t)a_maxCounts + 1);
	counts = (uint32_t) countsTemp;
	if (counts != countsTemp) {
		counts++;
    10bc:	08 94       	sec
    10be:	a1 1c       	adc	r10, r1
    10c0:	b1 1c       	adc	r11, r1
    10c2:	c1 1c       	adc	r12, r1
    10c4:	d1 1c       	adc	r13, r1
    10c6:	d2 cf       	rjmp	.-92     	; 0x106c <ticksPerIteration+0x98>
static uint16_t ticksPerIteration(uint8_t a_timer, uint32_t a_ticks, uint16_t a_maxCounts) {
	uint32_t counts;									/* number of ticks in each interrupt */
	float64_t countsTemp;								/* used to calculate  */
	g_timersInterruptActualCount[a_timer] = 1;			/* reset the actual interrupt count to 1 */
	if (a_ticks <= a_maxCounts) {						/* if the ticks <= maxCounts there will be only one interrupt */
		g_timersInterruptCount[a_timer] = 1;
    10c8:	c2 57       	subi	r28, 0x72	; 114
    10ca:	de 4f       	sbci	r29, 0xFE	; 254
    10cc:	a8 82       	st	Y, r10
    10ce:	b9 82       	std	Y+1, r11	; 0x01
    10d0:	ca 82       	std	Y+2, r12	; 0x02
    10d2:	db 82       	std	Y+3, r13	; 0x03
		return (uint16_t) (a_ticks);
    10d4:	ca 01       	movw	r24, r20
    10d6:	e3 cf       	rjmp	.-58     	; 0x109e <ticksPerIteration+0xca>

000010d8 <__vector_19>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* ISR for timer 0 CTC */
ISR(TIMER0_COMP_vect) {
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
    10fa:	20 91 82 01 	lds	r18, 0x0182
    10fe:	30 91 83 01 	lds	r19, 0x0183
    1102:	40 91 84 01 	lds	r20, 0x0184
    1106:	50 91 85 01 	lds	r21, 0x0185
    110a:	80 91 8e 01 	lds	r24, 0x018E
    110e:	90 91 8f 01 	lds	r25, 0x018F
    1112:	a0 91 90 01 	lds	r26, 0x0190
    1116:	b0 91 91 01 	lds	r27, 0x0191
    111a:	28 17       	cp	r18, r24
    111c:	39 07       	cpc	r19, r25
    111e:	4a 07       	cpc	r20, r26
    1120:	5b 07       	cpc	r21, r27
    1122:	21 f1       	breq	.+72     	; 0x116c <__vector_19+0x94>
		(*g_timerInterruptHandler[TIMER_0])();
		g_timersInterruptActualCount[TIMER_0] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_0]++;
    1124:	80 91 82 01 	lds	r24, 0x0182
    1128:	90 91 83 01 	lds	r25, 0x0183
    112c:	a0 91 84 01 	lds	r26, 0x0184
    1130:	b0 91 85 01 	lds	r27, 0x0185
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	a1 1d       	adc	r26, r1
    1138:	b1 1d       	adc	r27, r1
    113a:	80 93 82 01 	sts	0x0182, r24
    113e:	90 93 83 01 	sts	0x0183, r25
    1142:	a0 93 84 01 	sts	0x0184, r26
    1146:	b0 93 85 01 	sts	0x0185, r27
	}
}
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti
 *******************************************************************************/

/* ISR for timer 0 CTC */
ISR(TIMER0_COMP_vect) {
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
		(*g_timerInterruptHandler[TIMER_0])();
    116c:	e0 91 9f 01 	lds	r30, 0x019F
    1170:	f0 91 a0 01 	lds	r31, 0x01A0
    1174:	09 95       	icall
		g_timersInterruptActualCount[TIMER_0] = 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	80 93 82 01 	sts	0x0182, r24
    1182:	90 93 83 01 	sts	0x0183, r25
    1186:	a0 93 84 01 	sts	0x0184, r26
    118a:	b0 93 85 01 	sts	0x0185, r27
    118e:	dd cf       	rjmp	.-70     	; 0x114a <__vector_19+0x72>

00001190 <__vector_9>:
		g_timersInterruptActualCount[TIMER_0]++;
	}
}

/* ISR for timer 0 OVF */
ISR(TIMER0_OVF_vect) {
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
	TCNT0_R = g_timer0_ovf_start;
    11b2:	80 91 a5 01 	lds	r24, 0x01A5
    11b6:	82 bf       	out	0x32, r24	; 50
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
    11b8:	20 91 82 01 	lds	r18, 0x0182
    11bc:	30 91 83 01 	lds	r19, 0x0183
    11c0:	40 91 84 01 	lds	r20, 0x0184
    11c4:	50 91 85 01 	lds	r21, 0x0185
    11c8:	80 91 8e 01 	lds	r24, 0x018E
    11cc:	90 91 8f 01 	lds	r25, 0x018F
    11d0:	a0 91 90 01 	lds	r26, 0x0190
    11d4:	b0 91 91 01 	lds	r27, 0x0191
    11d8:	28 17       	cp	r18, r24
    11da:	39 07       	cpc	r19, r25
    11dc:	4a 07       	cpc	r20, r26
    11de:	5b 07       	cpc	r21, r27
    11e0:	21 f1       	breq	.+72     	; 0x122a <__vector_9+0x9a>
		(*g_timerInterruptHandler[TIMER_0])();
		g_timersInterruptActualCount[TIMER_0] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_0]++;
    11e2:	80 91 82 01 	lds	r24, 0x0182
    11e6:	90 91 83 01 	lds	r25, 0x0183
    11ea:	a0 91 84 01 	lds	r26, 0x0184
    11ee:	b0 91 85 01 	lds	r27, 0x0185
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	a1 1d       	adc	r26, r1
    11f6:	b1 1d       	adc	r27, r1
    11f8:	80 93 82 01 	sts	0x0182, r24
    11fc:	90 93 83 01 	sts	0x0183, r25
    1200:	a0 93 84 01 	sts	0x0184, r26
    1204:	b0 93 85 01 	sts	0x0185, r27
	}
}
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

/* ISR for timer 0 OVF */
ISR(TIMER0_OVF_vect) {
	TCNT0_R = g_timer0_ovf_start;
	if (g_timersInterruptActualCount[TIMER_0] == g_timersInterruptCount[TIMER_0]) {
		(*g_timerInterruptHandler[TIMER_0])();
    122a:	e0 91 9f 01 	lds	r30, 0x019F
    122e:	f0 91 a0 01 	lds	r31, 0x01A0
    1232:	09 95       	icall
		g_timersInterruptActualCount[TIMER_0] = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	80 93 82 01 	sts	0x0182, r24
    1240:	90 93 83 01 	sts	0x0183, r25
    1244:	a0 93 84 01 	sts	0x0184, r26
    1248:	b0 93 85 01 	sts	0x0185, r27
    124c:	dd cf       	rjmp	.-70     	; 0x1208 <__vector_9+0x78>

0000124e <__vector_3>:
		g_timersInterruptActualCount[TIMER_0]++;
	}
}

/* ISR for timer 2 CTC */
ISR(TIMER2_COMP_vect) {
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
    1270:	20 91 8a 01 	lds	r18, 0x018A
    1274:	30 91 8b 01 	lds	r19, 0x018B
    1278:	40 91 8c 01 	lds	r20, 0x018C
    127c:	50 91 8d 01 	lds	r21, 0x018D
    1280:	80 91 96 01 	lds	r24, 0x0196
    1284:	90 91 97 01 	lds	r25, 0x0197
    1288:	a0 91 98 01 	lds	r26, 0x0198
    128c:	b0 91 99 01 	lds	r27, 0x0199
    1290:	28 17       	cp	r18, r24
    1292:	39 07       	cpc	r19, r25
    1294:	4a 07       	cpc	r20, r26
    1296:	5b 07       	cpc	r21, r27
    1298:	21 f1       	breq	.+72     	; 0x12e2 <__vector_3+0x94>
		(*g_timerInterruptHandler[TIMER_2])();
		g_timersInterruptActualCount[TIMER_2] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_2]++;
    129a:	80 91 8a 01 	lds	r24, 0x018A
    129e:	90 91 8b 01 	lds	r25, 0x018B
    12a2:	a0 91 8c 01 	lds	r26, 0x018C
    12a6:	b0 91 8d 01 	lds	r27, 0x018D
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	a1 1d       	adc	r26, r1
    12ae:	b1 1d       	adc	r27, r1
    12b0:	80 93 8a 01 	sts	0x018A, r24
    12b4:	90 93 8b 01 	sts	0x018B, r25
    12b8:	a0 93 8c 01 	sts	0x018C, r26
    12bc:	b0 93 8d 01 	sts	0x018D, r27
	}
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti
}

/* ISR for timer 2 CTC */
ISR(TIMER2_COMP_vect) {
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
		(*g_timerInterruptHandler[TIMER_2])();
    12e2:	e0 91 a3 01 	lds	r30, 0x01A3
    12e6:	f0 91 a4 01 	lds	r31, 0x01A4
    12ea:	09 95       	icall
		g_timersInterruptActualCount[TIMER_2] = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	80 93 8a 01 	sts	0x018A, r24
    12f8:	90 93 8b 01 	sts	0x018B, r25
    12fc:	a0 93 8c 01 	sts	0x018C, r26
    1300:	b0 93 8d 01 	sts	0x018D, r27
    1304:	dd cf       	rjmp	.-70     	; 0x12c0 <__vector_3+0x72>

00001306 <__vector_4>:
		g_timersInterruptActualCount[TIMER_2]++;
	}
}

/* ISR for timer 2 OVF */
ISR(TIMER2_OVF_vect) {
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
	TCNT2_R = g_timer2_ovf_start;
    1328:	80 91 a6 01 	lds	r24, 0x01A6
    132c:	84 bd       	out	0x24, r24	; 36
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
    132e:	20 91 8a 01 	lds	r18, 0x018A
    1332:	30 91 8b 01 	lds	r19, 0x018B
    1336:	40 91 8c 01 	lds	r20, 0x018C
    133a:	50 91 8d 01 	lds	r21, 0x018D
    133e:	80 91 96 01 	lds	r24, 0x0196
    1342:	90 91 97 01 	lds	r25, 0x0197
    1346:	a0 91 98 01 	lds	r26, 0x0198
    134a:	b0 91 99 01 	lds	r27, 0x0199
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	4a 07       	cpc	r20, r26
    1354:	5b 07       	cpc	r21, r27
    1356:	21 f1       	breq	.+72     	; 0x13a0 <__vector_4+0x9a>
		(*g_timerInterruptHandler[TIMER_2])();
		g_timersInterruptActualCount[TIMER_2] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_2]++;
    1358:	80 91 8a 01 	lds	r24, 0x018A
    135c:	90 91 8b 01 	lds	r25, 0x018B
    1360:	a0 91 8c 01 	lds	r26, 0x018C
    1364:	b0 91 8d 01 	lds	r27, 0x018D
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	a1 1d       	adc	r26, r1
    136c:	b1 1d       	adc	r27, r1
    136e:	80 93 8a 01 	sts	0x018A, r24
    1372:	90 93 8b 01 	sts	0x018B, r25
    1376:	a0 93 8c 01 	sts	0x018C, r26
    137a:	b0 93 8d 01 	sts	0x018D, r27
	}
}
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

/* ISR for timer 2 OVF */
ISR(TIMER2_OVF_vect) {
	TCNT2_R = g_timer2_ovf_start;
	if (g_timersInterruptActualCount[TIMER_2] == g_timersInterruptCount[TIMER_2]) {
		(*g_timerInterruptHandler[TIMER_2])();
    13a0:	e0 91 a3 01 	lds	r30, 0x01A3
    13a4:	f0 91 a4 01 	lds	r31, 0x01A4
    13a8:	09 95       	icall
		g_timersInterruptActualCount[TIMER_2] = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	80 93 8a 01 	sts	0x018A, r24
    13b6:	90 93 8b 01 	sts	0x018B, r25
    13ba:	a0 93 8c 01 	sts	0x018C, r26
    13be:	b0 93 8d 01 	sts	0x018D, r27
    13c2:	dd cf       	rjmp	.-70     	; 0x137e <__vector_4+0x78>

000013c4 <__vector_8>:
		g_timersInterruptActualCount[TIMER_2]++;
	}
}

/* ISR for timer 1 OVF */
ISR(TIMER1_OVF_vect) {
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
	TCNT1_R = g_timer1_ovf_start;
    13e6:	80 91 9a 01 	lds	r24, 0x019A
    13ea:	90 91 9b 01 	lds	r25, 0x019B
    13ee:	9d bd       	out	0x2d, r25	; 45
    13f0:	8c bd       	out	0x2c, r24	; 44
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
    13f2:	20 91 86 01 	lds	r18, 0x0186
    13f6:	30 91 87 01 	lds	r19, 0x0187
    13fa:	40 91 88 01 	lds	r20, 0x0188
    13fe:	50 91 89 01 	lds	r21, 0x0189
    1402:	80 91 92 01 	lds	r24, 0x0192
    1406:	90 91 93 01 	lds	r25, 0x0193
    140a:	a0 91 94 01 	lds	r26, 0x0194
    140e:	b0 91 95 01 	lds	r27, 0x0195
    1412:	28 17       	cp	r18, r24
    1414:	39 07       	cpc	r19, r25
    1416:	4a 07       	cpc	r20, r26
    1418:	5b 07       	cpc	r21, r27
    141a:	21 f1       	breq	.+72     	; 0x1464 <__vector_8+0xa0>
		(*g_timerInterruptHandler[TIMER_1])();
		g_timersInterruptActualCount[TIMER_1] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_1]++;
    141c:	80 91 86 01 	lds	r24, 0x0186
    1420:	90 91 87 01 	lds	r25, 0x0187
    1424:	a0 91 88 01 	lds	r26, 0x0188
    1428:	b0 91 89 01 	lds	r27, 0x0189
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	a1 1d       	adc	r26, r1
    1430:	b1 1d       	adc	r27, r1
    1432:	80 93 86 01 	sts	0x0186, r24
    1436:	90 93 87 01 	sts	0x0187, r25
    143a:	a0 93 88 01 	sts	0x0188, r26
    143e:	b0 93 89 01 	sts	0x0189, r27
	}
}
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

/* ISR for timer 1 OVF */
ISR(TIMER1_OVF_vect) {
	TCNT1_R = g_timer1_ovf_start;
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
		(*g_timerInterruptHandler[TIMER_1])();
    1464:	e0 91 a1 01 	lds	r30, 0x01A1
    1468:	f0 91 a2 01 	lds	r31, 0x01A2
    146c:	09 95       	icall
		g_timersInterruptActualCount[TIMER_1] = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	80 93 86 01 	sts	0x0186, r24
    147a:	90 93 87 01 	sts	0x0187, r25
    147e:	a0 93 88 01 	sts	0x0188, r26
    1482:	b0 93 89 01 	sts	0x0189, r27
    1486:	dd cf       	rjmp	.-70     	; 0x1442 <__vector_8+0x7e>

00001488 <__vector_6>:
		g_timersInterruptActualCount[TIMER_1]++;
	}
}

/* ISR for timer 1A CTC */
ISR(TIMER1_COMPA_vect) {
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	0f 92       	push	r0
    1490:	11 24       	eor	r1, r1
    1492:	2f 93       	push	r18
    1494:	3f 93       	push	r19
    1496:	4f 93       	push	r20
    1498:	5f 93       	push	r21
    149a:	6f 93       	push	r22
    149c:	7f 93       	push	r23
    149e:	8f 93       	push	r24
    14a0:	9f 93       	push	r25
    14a2:	af 93       	push	r26
    14a4:	bf 93       	push	r27
    14a6:	ef 93       	push	r30
    14a8:	ff 93       	push	r31
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
    14aa:	20 91 86 01 	lds	r18, 0x0186
    14ae:	30 91 87 01 	lds	r19, 0x0187
    14b2:	40 91 88 01 	lds	r20, 0x0188
    14b6:	50 91 89 01 	lds	r21, 0x0189
    14ba:	80 91 92 01 	lds	r24, 0x0192
    14be:	90 91 93 01 	lds	r25, 0x0193
    14c2:	a0 91 94 01 	lds	r26, 0x0194
    14c6:	b0 91 95 01 	lds	r27, 0x0195
    14ca:	28 17       	cp	r18, r24
    14cc:	39 07       	cpc	r19, r25
    14ce:	4a 07       	cpc	r20, r26
    14d0:	5b 07       	cpc	r21, r27
    14d2:	21 f1       	breq	.+72     	; 0x151c <__vector_6+0x94>
		(*g_timerInterruptHandler[TIMER_1])();
		g_timersInterruptActualCount[TIMER_1] = 1;
	} else {
		g_timersInterruptActualCount[TIMER_1]++;
    14d4:	80 91 86 01 	lds	r24, 0x0186
    14d8:	90 91 87 01 	lds	r25, 0x0187
    14dc:	a0 91 88 01 	lds	r26, 0x0188
    14e0:	b0 91 89 01 	lds	r27, 0x0189
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	a1 1d       	adc	r26, r1
    14e8:	b1 1d       	adc	r27, r1
    14ea:	80 93 86 01 	sts	0x0186, r24
    14ee:	90 93 87 01 	sts	0x0187, r25
    14f2:	a0 93 88 01 	sts	0x0188, r26
    14f6:	b0 93 89 01 	sts	0x0189, r27
	}
}
    14fa:	ff 91       	pop	r31
    14fc:	ef 91       	pop	r30
    14fe:	bf 91       	pop	r27
    1500:	af 91       	pop	r26
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	7f 91       	pop	r23
    1508:	6f 91       	pop	r22
    150a:	5f 91       	pop	r21
    150c:	4f 91       	pop	r20
    150e:	3f 91       	pop	r19
    1510:	2f 91       	pop	r18
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti
}

/* ISR for timer 1A CTC */
ISR(TIMER1_COMPA_vect) {
	if (g_timersInterruptActualCount[TIMER_1] == g_timersInterruptCount[TIMER_1]) {
		(*g_timerInterruptHandler[TIMER_1])();
    151c:	e0 91 a1 01 	lds	r30, 0x01A1
    1520:	f0 91 a2 01 	lds	r31, 0x01A2
    1524:	09 95       	icall
		g_timersInterruptActualCount[TIMER_1] = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	80 93 86 01 	sts	0x0186, r24
    1532:	90 93 87 01 	sts	0x0187, r25
    1536:	a0 93 88 01 	sts	0x0188, r26
    153a:	b0 93 89 01 	sts	0x0189, r27
    153e:	dd cf       	rjmp	.-70     	; 0x14fa <__vector_6+0x72>

00001540 <TIMER_init>:
 * [in]: TIMER_config* a_timerConfig
 * 		 pointer to a struct containing the config for the timer
 * [Return]: uint8_t
 * 			 TIMER_SUCCESS or TIMER_ERROR
 */
uint8_t TIMER_init(TIMER_config* a_timerConfig){
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ec 01       	movw	r28, r24
	/* Check if ticks is equal to zero */
	if (a_timerConfig->ticks == 0) {
    1546:	4b 81       	ldd	r20, Y+3	; 0x03
    1548:	5c 81       	ldd	r21, Y+4	; 0x04
    154a:	6d 81       	ldd	r22, Y+5	; 0x05
    154c:	7e 81       	ldd	r23, Y+6	; 0x06
    154e:	41 15       	cp	r20, r1
    1550:	51 05       	cpc	r21, r1
    1552:	61 05       	cpc	r22, r1
    1554:	71 05       	cpc	r23, r1
    1556:	89 f1       	breq	.+98     	; 0x15ba <TIMER_init+0x7a>
		return TIMER_ERROR;
	}
	/* Select TIMER_0, TIMER_1, or TIMER_2 */
	switch (a_timerConfig->timer) {
    1558:	88 81       	ld	r24, Y
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	41 f1       	breq	.+80     	; 0x15ae <TIMER_init+0x6e>
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	80 f1       	brcs	.+96     	; 0x15c2 <TIMER_init+0x82>
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	51 f5       	brne	.+84     	; 0x15ba <TIMER_init+0x7a>
			/* store timer1 prescaler to start the timer with it when calling TIMER_start() */
			g_timers_init_prescaler[TIMER_1] = a_timerConfig->prescaler;

			break;
			case TIMER_2:
				switch (a_timerConfig->mode) {
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	80 32       	cpi	r24, 0x20	; 32
    156a:	09 f4       	brne	.+2      	; 0x156e <TIMER_init+0x2e>
    156c:	88 c0       	rjmp	.+272    	; 0x167e <TIMER_init+0x13e>
    156e:	80 32       	cpi	r24, 0x20	; 32
    1570:	20 f1       	brcs	.+72     	; 0x15ba <TIMER_init+0x7a>
    1572:	83 32       	cpi	r24, 0x23	; 35
    1574:	10 f5       	brcc	.+68     	; 0x15ba <TIMER_init+0x7a>

					break;
				case TIMER_2_CTC:
				case TIMER_2_CTC_TOGGLE_OC2:
					/* set  timer start to 0 */
					TCNT2_R = 0;
    1576:	14 bc       	out	0x24, r1	; 36

					/* compare on the value of ticks per interrupt */
					OCR2_R = ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, TIMER_2_MAX_COUNT) - 1;
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	2f ef       	ldi	r18, 0xFF	; 255
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ticksPerIteration>
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	83 bd       	out	0x23, r24	; 35

					/* set timer pointer to handler */
					g_timerInterruptHandler[TIMER_2] = a_timerConfig->ptrToHandler;
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	98 85       	ldd	r25, Y+8	; 0x08
    158a:	90 93 a4 01 	sts	0x01A4, r25
    158e:	80 93 a3 01 	sts	0x01A3, r24
					/* select comp mode
					 * FOC2 = 1
					 * WGM20 = 0, WGM21 = 1
					 * COM20 = 0, COM21 = 0
					 *  */
					TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);
    1592:	88 e8       	ldi	r24, 0x88	; 136
    1594:	85 bd       	out	0x25, r24	; 37

					/* enable OC2 if mode is TIMER_2_CTC_TOGGLE_OC2  */
					if (a_timerConfig->mode == TIMER_2_CTC_TOGGLE_OC2) {
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	82 32       	cpi	r24, 0x22	; 34
    159a:	09 f4       	brne	.+2      	; 0x159e <TIMER_init+0x5e>
    159c:	a0 c0       	rjmp	.+320    	; 0x16de <TIMER_init+0x19e>
						DIO_pinInit(OC2, PIN_OUTPUT);
						SET_BIT(TCCR2_R, COM20);
					}

					/* enable timer0 comp interrupt */
					SET_BIT(TIMSK_R, OCIE2);
    159e:	89 b7       	in	r24, 0x39	; 57
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	89 bf       	out	0x39, r24	; 57
					break;
				default:
					return TIMER_ERROR;
				}
				/* store timer2 prescaler to start the timer with it when calling TIMER_start() */
				g_timers_init_prescaler[TIMER_2] = a_timerConfig->prescaler;
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	80 93 9e 01 	sts	0x019E, r24
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <TIMER_init+0x7c>
		/* store timer0 prescaler to start the timer with it when calling TIMER_start() */
		g_timers_init_prescaler[TIMER_0] = a_timerConfig->prescaler;

		break;
		case TIMER_1:
			switch (a_timerConfig->mode) {
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	80 31       	cpi	r24, 0x10	; 16
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <TIMER_init+0x76>
    15b4:	79 c0       	rjmp	.+242    	; 0x16a8 <TIMER_init+0x168>
    15b6:	80 31       	cpi	r24, 0x10	; 16
    15b8:	d0 f5       	brcc	.+116    	; 0x162e <TIMER_init+0xee>
					return TIMER_ERROR;
				}
				/* store timer2 prescaler to start the timer with it when calling TIMER_start() */
				g_timers_init_prescaler[TIMER_2] = a_timerConfig->prescaler;

				break;
    15ba:	80 e0       	ldi	r24, 0x00	; 0
					/* timer not defined */
					return TIMER_ERROR;
	}
	/* return success */
	return TIMER_SUCCESS;
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret
		return TIMER_ERROR;
	}
	/* Select TIMER_0, TIMER_1, or TIMER_2 */
	switch (a_timerConfig->timer) {
	case TIMER_0:
		switch (a_timerConfig->mode) {
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	88 23       	and	r24, r24
    15c6:	c9 f4       	brne	.+50     	; 0x15fa <TIMER_init+0xba>
		case TIMER_0_OVF:
			/* set start value of the timer to be equal 256 - ticks per interrupt */
			g_timer0_ovf_start = TIMER_0_MAX_COUNT + 1 - ticksPerIteration(a_timerConfig->timer, \
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	2f ef       	ldi	r18, 0xFF	; 255
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ticksPerIteration>
    15d2:	81 95       	neg	r24
    15d4:	80 93 a5 01 	sts	0x01A5, r24
					a_timerConfig->ticks, TIMER_0_MAX_COUNT);
			TCNT0_R = g_timer0_ovf_start;
    15d8:	82 bf       	out	0x32, r24	; 50

			/* set timer pointer to handler */
			g_timerInterruptHandler[TIMER_0] = a_timerConfig->ptrToHandler;
    15da:	8f 81       	ldd	r24, Y+7	; 0x07
    15dc:	98 85       	ldd	r25, Y+8	; 0x08
    15de:	90 93 a0 01 	sts	0x01A0, r25
    15e2:	80 93 9f 01 	sts	0x019F, r24
			/* select ovf mode
			 * FOC0 = 1
			 * WGM00 = 0, WGM01 = 0
			 * COM00 = 0, COM01 = 0
			 * */
			TCCR0_R = SELECT_BIT(FOC0);
    15e6:	80 e8       	ldi	r24, 0x80	; 128
    15e8:	83 bf       	out	0x33, r24	; 51

			/* enable timer0 ovf interrupt */
			SET_BIT(TIMSK_R, TOIE0);
    15ea:	89 b7       	in	r24, 0x39	; 57
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	89 bf       	out	0x39, r24	; 57
		default:
			return TIMER_ERROR;
		}

		/* store timer0 prescaler to start the timer with it when calling TIMER_start() */
		g_timers_init_prescaler[TIMER_0] = a_timerConfig->prescaler;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 93 9c 01 	sts	0x019C, r24
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	e1 cf       	rjmp	.-62     	; 0x15bc <TIMER_init+0x7c>
		return TIMER_ERROR;
	}
	/* Select TIMER_0, TIMER_1, or TIMER_2 */
	switch (a_timerConfig->timer) {
	case TIMER_0:
		switch (a_timerConfig->mode) {
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	f0 f6       	brcc	.-68     	; 0x15ba <TIMER_init+0x7a>
			SET_BIT(TIMSK_R, TOIE0);
			break;
		case TIMER_0_CTC:
		case TIMER_0_CTC_TOGGLE_OC0:
			/* set  timer start to 0 */
			TCNT0_R = 0;
    15fe:	12 be       	out	0x32, r1	; 50

			/* compare on the value of ticks per interrupt */
			OCR0_R = ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, TIMER_0_MAX_COUNT) - 1;
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ticksPerIteration>
    160a:	81 50       	subi	r24, 0x01	; 1
    160c:	8c bf       	out	0x3c, r24	; 60

			/* set timer pointer to handler */
			g_timerInterruptHandler[TIMER_0] = a_timerConfig->ptrToHandler;
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	98 85       	ldd	r25, Y+8	; 0x08
    1612:	90 93 a0 01 	sts	0x01A0, r25
    1616:	80 93 9f 01 	sts	0x019F, r24
			/* select comp mode
			 * FOC0 = 1
			 * WGM00 = 0, WGM01 = 1
			 * COM00 = 0, COM01 = 0
			 *  */
			TCCR0_R = SELECT_BIT(FOC0) | SELECT_BIT(WGM01);
    161a:	88 e8       	ldi	r24, 0x88	; 136
    161c:	83 bf       	out	0x33, r24	; 51

			/* enable OC0 if mode is TIMER_0_CTC_TOGGLE_OC0  */
			if (a_timerConfig->mode == TIMER_0_CTC_TOGGLE_OC0) {
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	09 f4       	brne	.+2      	; 0x1626 <TIMER_init+0xe6>
    1624:	64 c0       	rjmp	.+200    	; 0x16ee <TIMER_init+0x1ae>
				DIO_pinInit(OC0, PIN_OUTPUT);
				SET_BIT(TCCR0_R, COM00);
			}

			/* enable timer0 comp interrupt */
			SET_BIT(TIMSK_R, OCIE0);
    1626:	89 b7       	in	r24, 0x39	; 57
    1628:	82 60       	ori	r24, 0x02	; 2
    162a:	89 bf       	out	0x39, r24	; 57
    162c:	e1 cf       	rjmp	.-62     	; 0x15f0 <TIMER_init+0xb0>
		/* store timer0 prescaler to start the timer with it when calling TIMER_start() */
		g_timers_init_prescaler[TIMER_0] = a_timerConfig->prescaler;

		break;
		case TIMER_1:
			switch (a_timerConfig->mode) {
    162e:	85 31       	cpi	r24, 0x15	; 21
    1630:	20 f6       	brcc	.-120    	; 0x15ba <TIMER_init+0x7a>
			case TIMER_1_CTC:
			case TIMER_1_CTC_TOGGLE_OC1A:
			case TIMER_1_CTC_TOGGLE_OC1B:
			case TIMER_1_CTC_TOGGLE_OC1A_OC1B:
				/* set  timer start to 0 */
				TCNT1_R = 0;
    1632:	1d bc       	out	0x2d, r1	; 45
    1634:	1c bc       	out	0x2c, r1	; 44

				/* compare on the value of ticks per interrupt */
				OCR1A_R = ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, TIMER_1_MAX_COUNT) - 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	2f ef       	ldi	r18, 0xFF	; 255
    163a:	3f ef       	ldi	r19, 0xFF	; 255
    163c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ticksPerIteration>
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9b bd       	out	0x2b, r25	; 43
    1644:	8a bd       	out	0x2a, r24	; 42

				/* set timer pointer to handler */
				g_timerInterruptHandler[TIMER_1] = a_timerConfig->ptrToHandler;
    1646:	8f 81       	ldd	r24, Y+7	; 0x07
    1648:	98 85       	ldd	r25, Y+8	; 0x08
    164a:	90 93 a2 01 	sts	0x01A2, r25
    164e:	80 93 a1 01 	sts	0x01A1, r24
				/* select comp mode
				 * FOC1A = 1, FOC1B = 1
				 * WGM10 = 0, WGM11 = 0, WGM12 = 1, WGM13 = 0
				 * COM1A0 = 0, COM1B0 = 0, COM1A1 = 0, COM1B1 = 0
				 *  */
				TCCR1A_R = SELECT_BIT(FOC1A) | SELECT_BIT(FOC1B);
    1652:	8c e0       	ldi	r24, 0x0C	; 12
    1654:	8f bd       	out	0x2f, r24	; 47
				TCCR1B_R = SELECT_BIT(WGM12);
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	8e bd       	out	0x2e, r24	; 46

				/* enable timer1 compA interrupt */
				SET_BIT(TIMSK_R, OCIE1A);
    165a:	89 b7       	in	r24, 0x39	; 57
    165c:	80 61       	ori	r24, 0x10	; 16
    165e:	89 bf       	out	0x39, r24	; 57

				/* enable OC1A if mode is TIMER_1_CTC_TOGGLE_OC1A  */
				if (a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A) {
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	82 31       	cpi	r24, 0x12	; 18
    1664:	09 f4       	brne	.+2      	; 0x1668 <TIMER_init+0x128>
    1666:	4b c0       	rjmp	.+150    	; 0x16fe <TIMER_init+0x1be>
					DIO_pinInit(OC1A, PIN_OUTPUT);
					SET_BIT(TCCR1A_R, COM1A0);
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1B) {
    1668:	83 31       	cpi	r24, 0x13	; 19
    166a:	09 f4       	brne	.+2      	; 0x166e <TIMER_init+0x12e>
    166c:	50 c0       	rjmp	.+160    	; 0x170e <TIMER_init+0x1ce>
					DIO_pinInit(OC1B, PIN_OUTPUT);
					SET_BIT(TCCR1A_R, COM1B0);
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A_OC1B) {
    166e:	84 31       	cpi	r24, 0x14	; 20
    1670:	09 f4       	brne	.+2      	; 0x1674 <TIMER_init+0x134>
    1672:	55 c0       	rjmp	.+170    	; 0x171e <TIMER_init+0x1de>
			default:
				return TIMER_ERROR;
			}

			/* store timer1 prescaler to start the timer with it when calling TIMER_start() */
			g_timers_init_prescaler[TIMER_1] = a_timerConfig->prescaler;
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 93 9d 01 	sts	0x019D, r24
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	9f cf       	rjmp	.-194    	; 0x15bc <TIMER_init+0x7c>
			break;
			case TIMER_2:
				switch (a_timerConfig->mode) {
				case TIMER_2_OVF:
					/* set start value of the timer to be equal 256 - ticks per interrupt */
					g_timer2_ovf_start = TIMER_2_MAX_COUNT + 1 - ticksPerIteration(a_timerConfig->timer, a_timerConfig->ticks, \
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	2f ef       	ldi	r18, 0xFF	; 255
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ticksPerIteration>
    1688:	81 95       	neg	r24
    168a:	80 93 a6 01 	sts	0x01A6, r24
							TIMER_2_MAX_COUNT);
					TCNT2_R = g_timer2_ovf_start;
    168e:	84 bd       	out	0x24, r24	; 36

					/* set timer pointer to handler */
					g_timerInterruptHandler[TIMER_2] = a_timerConfig->ptrToHandler;
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	90 93 a4 01 	sts	0x01A4, r25
    1698:	80 93 a3 01 	sts	0x01A3, r24
					/* select ovf mode
					 * FOC2 = 1
					 * WGM20 = 0, WGM21 = 0
					 * COM20 = 0, COM21 = 0
					 * */
					TCCR2_R = SELECT_BIT(FOC2);
    169c:	80 e8       	ldi	r24, 0x80	; 128
    169e:	85 bd       	out	0x25, r24	; 37

					/* enable timer2 ovf interrupt */
					SET_BIT(TIMSK_R, TOIE2);
    16a0:	89 b7       	in	r24, 0x39	; 57
    16a2:	80 64       	ori	r24, 0x40	; 64
    16a4:	89 bf       	out	0x39, r24	; 57
    16a6:	7e cf       	rjmp	.-260    	; 0x15a4 <TIMER_init+0x64>
		case TIMER_1:
			switch (a_timerConfig->mode) {

			case TIMER_1_OVF:
				/* set start value of the timer to be equal 65536 - ticks per interrupt */
				g_timer1_ovf_start = TIMER_1_MAX_COUNT + 1 - ticksPerIteration(a_timerConfig->timer, \
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	2f ef       	ldi	r18, 0xFF	; 255
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ticksPerIteration>
    16b2:	90 95       	com	r25
    16b4:	81 95       	neg	r24
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	90 93 9b 01 	sts	0x019B, r25
    16bc:	80 93 9a 01 	sts	0x019A, r24
						a_timerConfig->ticks, TIMER_1_MAX_COUNT);
				TCNT1_R = g_timer1_ovf_start;
    16c0:	9d bd       	out	0x2d, r25	; 45
    16c2:	8c bd       	out	0x2c, r24	; 44

				/* set timer pointer to handler */
				g_timerInterruptHandler[TIMER_1] = a_timerConfig->ptrToHandler;
    16c4:	8f 81       	ldd	r24, Y+7	; 0x07
    16c6:	98 85       	ldd	r25, Y+8	; 0x08
    16c8:	90 93 a2 01 	sts	0x01A2, r25
    16cc:	80 93 a1 01 	sts	0x01A1, r24
				 * FOC1A = 1, FOC1B = 1
				 * WGM10 = 0, WGM11 = 0, WGM12 = 0, WGM13 = 0,
				 * COM1A0 = 0, COM1A1 = 0, COM1B0 = 0, COM1B1 = 0
				 * ICNC1 = 0, ICES1 = 0
				 */
				TCCR1A_R = SELECT_BIT(FOC1A) | SELECT_BIT(FOC1B);
    16d0:	8c e0       	ldi	r24, 0x0C	; 12
    16d2:	8f bd       	out	0x2f, r24	; 47
				TCCR1B_R = 0;
    16d4:	1e bc       	out	0x2e, r1	; 46

				/* enable timer1 ovf interrupt */
				SET_BIT(TIMSK_R, TOIE1);
    16d6:	89 b7       	in	r24, 0x39	; 57
    16d8:	84 60       	ori	r24, 0x04	; 4
    16da:	89 bf       	out	0x39, r24	; 57
    16dc:	cb cf       	rjmp	.-106    	; 0x1674 <TIMER_init+0x134>
					 *  */
					TCCR2_R = SELECT_BIT(FOC2) | SELECT_BIT(WGM21);

					/* enable OC2 if mode is TIMER_2_CTC_TOGGLE_OC2  */
					if (a_timerConfig->mode == TIMER_2_CTC_TOGGLE_OC2) {
						DIO_pinInit(OC2, PIN_OUTPUT);
    16de:	87 e3       	ldi	r24, 0x37	; 55
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
						SET_BIT(TCCR2_R, COM20);
    16e6:	85 b5       	in	r24, 0x25	; 37
    16e8:	80 61       	ori	r24, 0x10	; 16
    16ea:	85 bd       	out	0x25, r24	; 37
    16ec:	58 cf       	rjmp	.-336    	; 0x159e <TIMER_init+0x5e>
			 *  */
			TCCR0_R = SELECT_BIT(FOC0) | SELECT_BIT(WGM01);

			/* enable OC0 if mode is TIMER_0_CTC_TOGGLE_OC0  */
			if (a_timerConfig->mode == TIMER_0_CTC_TOGGLE_OC0) {
				DIO_pinInit(OC0, PIN_OUTPUT);
    16ee:	83 e1       	ldi	r24, 0x13	; 19
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
				SET_BIT(TCCR0_R, COM00);
    16f6:	83 b7       	in	r24, 0x33	; 51
    16f8:	80 61       	ori	r24, 0x10	; 16
    16fa:	83 bf       	out	0x33, r24	; 51
    16fc:	94 cf       	rjmp	.-216    	; 0x1626 <TIMER_init+0xe6>
				/* enable timer1 compA interrupt */
				SET_BIT(TIMSK_R, OCIE1A);

				/* enable OC1A if mode is TIMER_1_CTC_TOGGLE_OC1A  */
				if (a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A) {
					DIO_pinInit(OC1A, PIN_OUTPUT);
    16fe:	85 e3       	ldi	r24, 0x35	; 53
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
					SET_BIT(TCCR1A_R, COM1A0);
    1706:	8f b5       	in	r24, 0x2f	; 47
    1708:	80 64       	ori	r24, 0x40	; 64
    170a:	8f bd       	out	0x2f, r24	; 47
    170c:	b3 cf       	rjmp	.-154    	; 0x1674 <TIMER_init+0x134>
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1B) {
					DIO_pinInit(OC1B, PIN_OUTPUT);
    170e:	84 e3       	ldi	r24, 0x34	; 52
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
					SET_BIT(TCCR1A_R, COM1B0);
    1716:	8f b5       	in	r24, 0x2f	; 47
    1718:	80 61       	ori	r24, 0x10	; 16
    171a:	8f bd       	out	0x2f, r24	; 47
    171c:	ab cf       	rjmp	.-170    	; 0x1674 <TIMER_init+0x134>
				}

				/* enable OC1B if mode is TIMER_1_CTC_TOGGLE_OC1B  */
				else if(a_timerConfig->mode == TIMER_1_CTC_TOGGLE_OC1A_OC1B) {
					DIO_pinInit(OC1A, PIN_OUTPUT);
    171e:	85 e3       	ldi	r24, 0x35	; 53
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
					DIO_pinInit(OC1B, PIN_OUTPUT);
    1726:	84 e3       	ldi	r24, 0x34	; 52
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
					SET_BIT(TCCR1A_R, COM1A0);
    172e:	8f b5       	in	r24, 0x2f	; 47
    1730:	80 64       	ori	r24, 0x40	; 64
    1732:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A_R, COM1B0);
    1734:	8f b5       	in	r24, 0x2f	; 47
    1736:	80 61       	ori	r24, 0x10	; 16
    1738:	8f bd       	out	0x2f, r24	; 47
    173a:	9c cf       	rjmp	.-200    	; 0x1674 <TIMER_init+0x134>

0000173c <PWM_disable>:
 * 			 PWM_SUCCESS if pin supports pwm and dudtyCycle is within the range
 * 			 or PWM_ERROR otherwise
 */
uint8_t PWM_disable(uint8_t a_pin)
{
	switch(a_pin)
    173c:	84 33       	cpi	r24, 0x34	; 52
    173e:	91 f0       	breq	.+36     	; 0x1764 <PWM_disable+0x28>
    1740:	85 33       	cpi	r24, 0x35	; 53
    1742:	38 f0       	brcs	.+14     	; 0x1752 <PWM_disable+0x16>
    1744:	85 33       	cpi	r24, 0x35	; 53
    1746:	49 f0       	breq	.+18     	; 0x175a <PWM_disable+0x1e>
    1748:	87 33       	cpi	r24, 0x37	; 55
    174a:	29 f4       	brne	.+10     	; 0x1756 <PWM_disable+0x1a>
		/* disable pwm channel 1B and output low on OCR1B */
		TCCR1A_R &= SELECT_INV_BIT(COM1B1);
		break;
	case PWM2:
		/* reset timer 2 and output low on OCR2 */
		TCCR2_R = 0;
    174c:	15 bc       	out	0x25, r1	; 37
    174e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return PWM_ERROR;
	}
	return PWM_SUCCESS;
}
    1750:	08 95       	ret
 * 			 PWM_SUCCESS if pin supports pwm and dudtyCycle is within the range
 * 			 or PWM_ERROR otherwise
 */
uint8_t PWM_disable(uint8_t a_pin)
{
	switch(a_pin)
    1752:	83 31       	cpi	r24, 0x13	; 19
    1754:	61 f0       	breq	.+24     	; 0x176e <PWM_disable+0x32>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	08 95       	ret
		/* reset timer 0 and output low on OCR0 */
		TCCR0_R = 0;
		break;
	case PWM1A:
		/* disable pwm channel 1A and output low on OCR1A */
		TCCR1A_R &= SELECT_INV_BIT(COM1A1);
    175a:	8f b5       	in	r24, 0x2f	; 47
    175c:	8f 77       	andi	r24, 0x7F	; 127
    175e:	8f bd       	out	0x2f, r24	; 47
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	08 95       	ret
		break;
	case PWM1B:
		/* disable pwm channel 1B and output low on OCR1B */
		TCCR1A_R &= SELECT_INV_BIT(COM1B1);
    1764:	8f b5       	in	r24, 0x2f	; 47
    1766:	8f 7d       	andi	r24, 0xDF	; 223
    1768:	8f bd       	out	0x2f, r24	; 47
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	08 95       	ret
{
	switch(a_pin)
	{
	case PWM0:
		/* reset timer 0 and output low on OCR0 */
		TCCR0_R = 0;
    176e:	13 be       	out	0x33, r1	; 51
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	08 95       	ret

00001774 <PWM_enable>:
 * [Return]: uint8_t
 * 			 PWM_SUCCESS if pin supports pwm and dutyCycle is within the range
 * 			 or PWM_ERROR otherwise
 */
uint8_t PWM_enable(uint8_t a_pin, uint8_t a_dutyCycle)
{
    1774:	1f 93       	push	r17
    1776:	18 2f       	mov	r17, r24
	uint16_t ticks;
	/* return error if the duty cycle value is not within range (> 100) */
	if(a_dutyCycle > 100)
    1778:	65 36       	cpi	r22, 0x65	; 101
    177a:	28 f4       	brcc	.+10     	; 0x1786 <PWM_enable+0x12>
	{
		return PWM_ERROR;
	}
	switch(a_pin)
    177c:	86 33       	cpi	r24, 0x36	; 54
    177e:	30 f0       	brcs	.+12     	; 0x178c <PWM_enable+0x18>
    1780:	87 33       	cpi	r24, 0x37	; 55
    1782:	09 f4       	brne	.+2      	; 0x1786 <PWM_enable+0x12>
    1784:	56 c0       	rjmp	.+172    	; 0x1832 <PWM_enable+0xbe>
		/* init OC2 as output */
		DIO_pinInit(OC2, PIN_OUTPUT);

		/* start timer 2 */
		COPY_BITS(TCCR2_R, 0b00000111, PWM_2_PRESCALER, 0);
		break;
    1786:	80 e0       	ldi	r24, 0x00	; 0
	default:
		return PWM_ERROR;
	}
	return PWM_SUCCESS;
}
    1788:	1f 91       	pop	r17
    178a:	08 95       	ret
	/* return error if the duty cycle value is not within range (> 100) */
	if(a_dutyCycle > 100)
	{
		return PWM_ERROR;
	}
	switch(a_pin)
    178c:	84 33       	cpi	r24, 0x34	; 52
    178e:	90 f1       	brcs	.+100    	; 0x17f4 <PWM_enable+0x80>

		break;
	case PWM1A:
	case PWM1B:
		/* calculate number of ticks from duty cycle */
		ticks = (uint16_t)((uint32_t)a_dutyCycle * PWM_1_TOP / 100);
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	2f ef       	ldi	r18, 0xFF	; 255
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__mulsi3>
    17a2:	24 e6       	ldi	r18, 0x64	; 100
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__udivmodsi4>

		/* set pwm 1 top */
		ICR1_R = PWM_1_TOP;
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	97 bd       	out	0x27, r25	; 39
    17b4:	86 bd       	out	0x26, r24	; 38
		/* select fast pwm mode (common for both channels)
		 * FOC1A = 0, FOC1B = 0
		 * WGM10 = 0, WGM11 = 1, WGM12 = 1, WGM13 = 1
		 * COM1A0 = 0, COM1B0 = 1 (non-inverting)
		 */
		TCCR1A_R &= SELECT_INV_BIT(FOC1A) & SELECT_INV_BIT(FOC1B) \
    17b6:	8f b5       	in	r24, 0x2f	; 47
    17b8:	82 7a       	andi	r24, 0xA2	; 162
    17ba:	8f bd       	out	0x2f, r24	; 47
				& SELECT_INV_BIT(COM1A0) & SELECT_INV_BIT(COM1B0) \
				& SELECT_INV_BIT(WGM10);
		TCCR1A_R |= SELECT_BIT(WGM11);
    17bc:	8f b5       	in	r24, 0x2f	; 47
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	8f bd       	out	0x2f, r24	; 47
		TCCR1B_R |= SELECT_BIT(WGM12) | SELECT_BIT(WGM13);
    17c2:	8e b5       	in	r24, 0x2e	; 46
    17c4:	88 61       	ori	r24, 0x18	; 24
    17c6:	8e bd       	out	0x2e, r24	; 46
		TCCR1B_R &= SELECT_INV_BIT(ICNC1);
    17c8:	8e b5       	in	r24, 0x2e	; 46
    17ca:	8f 77       	andi	r24, 0x7F	; 127
    17cc:	8e bd       	out	0x2e, r24	; 46

		if(a_pin == PWM1A)
    17ce:	15 33       	cpi	r17, 0x35	; 53
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <PWM_enable+0x60>
    17d2:	4c c0       	rjmp	.+152    	; 0x186c <PWM_enable+0xf8>
			DIO_pinInit(OC1A, PIN_OUTPUT);
		}
		else
		{
			/* set OCR1B to ticks */
			OCR1B_R = ticks;
    17d4:	39 bd       	out	0x29, r19	; 41
    17d6:	28 bd       	out	0x28, r18	; 40

			/* enable pwm channel B */
			TCCR1A_R |= SELECT_BIT(COM1B1);
    17d8:	8f b5       	in	r24, 0x2f	; 47
    17da:	80 62       	ori	r24, 0x20	; 32
    17dc:	8f bd       	out	0x2f, r24	; 47

			/* init OC1B as output */
			DIO_pinInit(OC1B, PIN_OUTPUT);
    17de:	84 e3       	ldi	r24, 0x34	; 52
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>

		}
		/* start timer 1 */
		COPY_BITS(TCCR1B_R, 0b00000111, PWM_1_PRESCALER, 0);
    17e6:	8e b5       	in	r24, 0x2e	; 46
    17e8:	88 7f       	andi	r24, 0xF8	; 248
    17ea:	83 60       	ori	r24, 0x03	; 3
    17ec:	8e bd       	out	0x2e, r24	; 46
    17ee:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return PWM_ERROR;
	}
	return PWM_SUCCESS;
}
    17f0:	1f 91       	pop	r17
    17f2:	08 95       	ret
	/* return error if the duty cycle value is not within range (> 100) */
	if(a_dutyCycle > 100)
	{
		return PWM_ERROR;
	}
	switch(a_pin)
    17f4:	83 31       	cpi	r24, 0x13	; 19
    17f6:	39 f6       	brne	.-114    	; 0x1786 <PWM_enable+0x12>
	case PWM0:
		/* calculate number of ticks from duty cycle */
		ticks = (uint16_t)((uint32_t)a_dutyCycle * TIMER_0_MAX_COUNT / 100);

		/* set OCR0 = ticks */
		OCR0_R = ticks;
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2f ef       	ldi	r18, 0xFF	; 255
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__mulsi3>
    180a:	24 e6       	ldi	r18, 0x64	; 100
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__udivmodsi4>
    1816:	2c bf       	out	0x3c, r18	; 60
		/* select fast pwm mode
		 * FOC0 = 0
		 * WGM00 = 1, WGM01 = 1
		 * COM00 = 0, COM01 = 1 (non-inverting)
		 */
		TCCR0_R = SELECT_BIT(WGM00) | SELECT_BIT(WGM01) | SELECT_BIT(COM01);
    1818:	88 e6       	ldi	r24, 0x68	; 104
    181a:	83 bf       	out	0x33, r24	; 51

		/* init OC0 as output */
		DIO_pinInit(OC0, PIN_OUTPUT);
    181c:	83 e1       	ldi	r24, 0x13	; 19
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>

		/* start timer 0 */
		COPY_BITS(TCCR0_R, 0b00000111, PWM_0_PRESCALER, 0);
    1824:	83 b7       	in	r24, 0x33	; 51
    1826:	88 7f       	andi	r24, 0xF8	; 248
    1828:	83 60       	ori	r24, 0x03	; 3
    182a:	83 bf       	out	0x33, r24	; 51
    182c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return PWM_ERROR;
	}
	return PWM_SUCCESS;
}
    182e:	1f 91       	pop	r17
    1830:	08 95       	ret
	case PWM2:
		/* calculate number of ticks from duty cycle */
		ticks = (uint16_t)((uint32_t)a_dutyCycle * TIMER_2_MAX_COUNT / 100);

		/* set OCR2 = ticks */
		OCR2_R = ticks;
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	2f ef       	ldi	r18, 0xFF	; 255
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__mulsi3>
    1844:	24 e6       	ldi	r18, 0x64	; 100
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__udivmodsi4>
    1850:	23 bd       	out	0x23, r18	; 35
		/* select fast pwm mode
		 * FOC2 = 0
		 * WGM20 = 1, WGM21 = 1
		 * COM20 = 0, COM21 = 1 (non-inverting)
		 */
		TCCR2_R = SELECT_BIT(WGM20) | SELECT_BIT(WGM21) | SELECT_BIT(COM21);
    1852:	88 e6       	ldi	r24, 0x68	; 104
    1854:	85 bd       	out	0x25, r24	; 37

		/* init OC2 as output */
		DIO_pinInit(OC2, PIN_OUTPUT);
    1856:	87 e3       	ldi	r24, 0x37	; 55
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>

		/* start timer 2 */
		COPY_BITS(TCCR2_R, 0b00000111, PWM_2_PRESCALER, 0);
    185e:	85 b5       	in	r24, 0x25	; 37
    1860:	88 7f       	andi	r24, 0xF8	; 248
    1862:	84 60       	ori	r24, 0x04	; 4
    1864:	85 bd       	out	0x25, r24	; 37
    1866:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return PWM_ERROR;
	}
	return PWM_SUCCESS;
}
    1868:	1f 91       	pop	r17
    186a:	08 95       	ret
		TCCR1B_R &= SELECT_INV_BIT(ICNC1);

		if(a_pin == PWM1A)
		{
			/* set OCR1A to ticks */
			OCR1A_R = ticks;
    186c:	3b bd       	out	0x2b, r19	; 43
    186e:	2a bd       	out	0x2a, r18	; 42

			/* enable pwm channel A */
			TCCR1A_R |= SELECT_BIT(COM1A1);
    1870:	8f b5       	in	r24, 0x2f	; 47
    1872:	80 68       	ori	r24, 0x80	; 128
    1874:	8f bd       	out	0x2f, r24	; 47

			/* init OC1A as output */
			DIO_pinInit(OC1A, PIN_OUTPUT);
    1876:	85 e3       	ldi	r24, 0x35	; 53
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
    187e:	b3 cf       	rjmp	.-154    	; 0x17e6 <PWM_enable+0x72>

00001880 <DIO_portInit>:
 * [in]: DIO_PORTDirectionType a_direction
 * 		 the direction of the port PORT_INPUT or PORT_OUTPUT
 * [Return]: void
 */
void DIO_portInit(uint8_t a_port, DIO_PORTDirectionType a_direction)
{
    1880:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	48 f4       	brcc	.+18     	; 0x1898 <DIO_portInit+0x18>
	{
		GET_DDR_FROM_PORT_NO(a_port) = a_direction;
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	98 9f       	mul	r25, r24
    188a:	80 2d       	mov	r24, r0
    188c:	11 24       	eor	r1, r1
    188e:	ea e3       	ldi	r30, 0x3A	; 58
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	e8 1b       	sub	r30, r24
    1894:	f1 09       	sbc	r31, r1
    1896:	60 83       	st	Z, r22
    1898:	08 95       	ret

0000189a <DIO_portInitPartial>:
 * [in]: uint8_t a_mask
 * 		 the pin to start writing from, it represents the shift amount
 * [Return]: void
 */
void DIO_portInitPartial(uint8_t a_port, DIO_PORTDirectionType a_direction, uint8_t a_mask, uint8_t a_startPin)
{
    189a:	38 2f       	mov	r19, r24
    189c:	94 2f       	mov	r25, r20
	uint8_t startPinNumber = GET_PIN_NO(a_startPin);
	if(DIO_PORT_IS_VALID(a_port))
    189e:	84 30       	cpi	r24, 0x04	; 4
    18a0:	f8 f4       	brcc	.+62     	; 0x18e0 <DIO_portInitPartial+0x46>
	{
		COPY_BITS(GET_DDR_FROM_PORT_NO(a_port), a_mask, a_direction, startPinNumber);
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	38 9f       	mul	r19, r24
    18a6:	80 2d       	mov	r24, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	ea e3       	ldi	r30, 0x3A	; 58
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	e8 1b       	sub	r30, r24
    18b0:	f1 09       	sbc	r31, r1
    18b2:	80 81       	ld	r24, Z
    18b4:	42 2f       	mov	r20, r18
    18b6:	4f 70       	andi	r20, 0x0F	; 15
    18b8:	29 2f       	mov	r18, r25
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	04 2e       	mov	r0, r20
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_portInitPartial+0x2a>
    18c0:	22 0f       	add	r18, r18
    18c2:	33 1f       	adc	r19, r19
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <DIO_portInitPartial+0x26>
    18c8:	20 95       	com	r18
    18ca:	28 23       	and	r18, r24
    18cc:	96 23       	and	r25, r22
    18ce:	89 2f       	mov	r24, r25
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_portInitPartial+0x3e>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	4a 95       	dec	r20
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_portInitPartial+0x3a>
    18dc:	28 2b       	or	r18, r24
    18de:	20 83       	st	Z, r18
    18e0:	08 95       	ret

000018e2 <DIO_pinInit>:
 * [Return]: void
 */
void  DIO_pinInit(uint8_t a_pin, DIO_PinDirectionType a_direction)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    18e2:	98 2f       	mov	r25, r24
    18e4:	92 95       	swap	r25
    18e6:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    18e8:	94 30       	cpi	r25, 0x04	; 4
    18ea:	c0 f4       	brcc	.+48     	; 0x191c <DIO_pinInit+0x3a>
 */
void  DIO_pinInit(uint8_t a_pin, DIO_PinDirectionType a_direction)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    18ec:	38 2f       	mov	r19, r24
    18ee:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    18f0:	38 30       	cpi	r19, 0x08	; 8
    18f2:	a0 f4       	brcc	.+40     	; 0x191c <DIO_pinInit+0x3a>
	{
		if(a_direction == PIN_INPUT)
    18f4:	66 23       	and	r22, r22
    18f6:	99 f0       	breq	.+38     	; 0x191e <DIO_pinInit+0x3c>
		{
			CLEAR_BIT(GET_DDR_FROM_PORT_NO(portNo), pinNo);
		}
		else
		{
			SET_BIT(GET_DDR_FROM_PORT_NO(portNo), pinNo);
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	98 9f       	mul	r25, r24
    18fc:	80 2d       	mov	r24, r0
    18fe:	11 24       	eor	r1, r1
    1900:	ea e3       	ldi	r30, 0x3A	; 58
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	e8 1b       	sub	r30, r24
    1906:	f1 09       	sbc	r31, r1
    1908:	20 81       	ld	r18, Z
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_pinInit+0x32>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	3a 95       	dec	r19
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_pinInit+0x2e>
    1918:	28 2b       	or	r18, r24
    191a:	20 83       	st	Z, r18
    191c:	08 95       	ret
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
	{
		if(a_direction == PIN_INPUT)
		{
			CLEAR_BIT(GET_DDR_FROM_PORT_NO(portNo), pinNo);
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	98 9f       	mul	r25, r24
    1922:	80 2d       	mov	r24, r0
    1924:	11 24       	eor	r1, r1
    1926:	ea e3       	ldi	r30, 0x3A	; 58
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	e8 1b       	sub	r30, r24
    192c:	f1 09       	sbc	r31, r1
    192e:	20 81       	ld	r18, Z
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_pinInit+0x58>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	3a 95       	dec	r19
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_pinInit+0x54>
    193e:	80 95       	com	r24
    1940:	28 23       	and	r18, r24
    1942:	20 83       	st	Z, r18
    1944:	08 95       	ret

00001946 <DIO_writePort>:
 * 		 if a pin is input the corrsponding bit in the a_data controls
 * 		 the internal pullup resistor, 1 => enable, 0 => disable
 * [Return]: void
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
    1946:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    1948:	84 30       	cpi	r24, 0x04	; 4
    194a:	48 f4       	brcc	.+18     	; 0x195e <DIO_writePort+0x18>
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	98 9f       	mul	r25, r24
    1950:	80 2d       	mov	r24, r0
    1952:	11 24       	eor	r1, r1
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	e8 1b       	sub	r30, r24
    195a:	f1 09       	sbc	r31, r1
    195c:	60 83       	st	Z, r22
    195e:	08 95       	ret

00001960 <DIO_writePortPartial>:
 * [in]: uint8_t a_startPin
 * 		 the pin to start writing from, it represents the shift amount
 * [Return]: void
 */
void DIO_writePortPartial(uint8_t a_port, uint8_t a_data, uint8_t a_dataMask, uint8_t a_startPin)
{
    1960:	38 2f       	mov	r19, r24
    1962:	94 2f       	mov	r25, r20
	uint8_t startPinNumber = GET_PIN_NO(a_startPin);
	if(DIO_PORT_IS_VALID(a_port))
    1964:	84 30       	cpi	r24, 0x04	; 4
    1966:	f8 f4       	brcc	.+62     	; 0x19a6 <DIO_writePortPartial+0x46>
	{
		COPY_BITS(GET_PORT_FROM_PORT_NO(a_port), a_dataMask, a_data, startPinNumber);
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	38 9f       	mul	r19, r24
    196c:	80 2d       	mov	r24, r0
    196e:	11 24       	eor	r1, r1
    1970:	eb e3       	ldi	r30, 0x3B	; 59
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	e8 1b       	sub	r30, r24
    1976:	f1 09       	sbc	r31, r1
    1978:	80 81       	ld	r24, Z
    197a:	42 2f       	mov	r20, r18
    197c:	4f 70       	andi	r20, 0x0F	; 15
    197e:	29 2f       	mov	r18, r25
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	04 2e       	mov	r0, r20
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_writePortPartial+0x2a>
    1986:	22 0f       	add	r18, r18
    1988:	33 1f       	adc	r19, r19
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_writePortPartial+0x26>
    198e:	20 95       	com	r18
    1990:	28 23       	and	r18, r24
    1992:	96 23       	and	r25, r22
    1994:	89 2f       	mov	r24, r25
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_writePortPartial+0x3e>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	4a 95       	dec	r20
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_writePortPartial+0x3a>
    19a2:	28 2b       	or	r18, r24
    19a4:	20 83       	st	Z, r18
    19a6:	08 95       	ret

000019a8 <DIO_writePin>:
 * [Return]: void
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    19a8:	98 2f       	mov	r25, r24
    19aa:	92 95       	swap	r25
    19ac:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    19ae:	94 30       	cpi	r25, 0x04	; 4
    19b0:	c0 f4       	brcc	.+48     	; 0x19e2 <DIO_writePin+0x3a>
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    19b2:	38 2f       	mov	r19, r24
    19b4:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    19b6:	38 30       	cpi	r19, 0x08	; 8
    19b8:	a0 f4       	brcc	.+40     	; 0x19e2 <DIO_writePin+0x3a>
	{
		if(a_data == LOW)
    19ba:	66 23       	and	r22, r22
    19bc:	99 f0       	breq	.+38     	; 0x19e4 <DIO_writePin+0x3c>
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
		}
		else
		{
			SET_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	98 9f       	mul	r25, r24
    19c2:	80 2d       	mov	r24, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	eb e3       	ldi	r30, 0x3B	; 59
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	e8 1b       	sub	r30, r24
    19cc:	f1 09       	sbc	r31, r1
    19ce:	20 81       	ld	r18, Z
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_writePin+0x32>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	3a 95       	dec	r19
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_writePin+0x2e>
    19de:	28 2b       	or	r18, r24
    19e0:	20 83       	st	Z, r18
    19e2:	08 95       	ret
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
	{
		if(a_data == LOW)
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	98 9f       	mul	r25, r24
    19e8:	80 2d       	mov	r24, r0
    19ea:	11 24       	eor	r1, r1
    19ec:	eb e3       	ldi	r30, 0x3B	; 59
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	e8 1b       	sub	r30, r24
    19f2:	f1 09       	sbc	r31, r1
    19f4:	20 81       	ld	r18, Z
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_writePin+0x58>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	3a 95       	dec	r19
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_writePin+0x54>
    1a04:	80 95       	com	r24
    1a06:	28 23       	and	r18, r24
    1a08:	20 83       	st	Z, r18
    1a0a:	08 95       	ret

00001a0c <DIO_readPort>:
 * 		 the port number to read from
 * [Return]: uint8_t
 * 			 the data read from the port
 */
uint8_t DIO_readPort(uint8_t a_port)
{
    1a0c:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	50 f4       	brcc	.+20     	; 0x1a26 <DIO_readPort+0x1a>
	{
		return GET_PIN_FROM_PORT_NO(a_port);
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	98 9f       	mul	r25, r24
    1a16:	80 2d       	mov	r24, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	e9 e3       	ldi	r30, 0x39	; 57
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	e8 1b       	sub	r30, r24
    1a20:	f1 09       	sbc	r31, r1
    1a22:	80 81       	ld	r24, Z
	}
	return 0;
}
    1a24:	08 95       	ret
 * [Return]: uint8_t
 * 			 the data read from the port
 */
uint8_t DIO_readPort(uint8_t a_port)
{
	if(DIO_PORT_IS_VALID(a_port))
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	08 95       	ret

00001a2a <DIO_readPin>:
 * 			 the data read from the pin HIGH or LOW
 */
uint8_t DIO_readPin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	92 95       	swap	r25
    1a2e:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1a30:	94 30       	cpi	r25, 0x04	; 4
    1a32:	f0 f4       	brcc	.+60     	; 0x1a70 <DIO_readPin+0x46>
 */
uint8_t DIO_readPin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1a34:	48 2f       	mov	r20, r24
    1a36:	4f 70       	andi	r20, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1a38:	48 30       	cpi	r20, 0x08	; 8
    1a3a:	d0 f4       	brcc	.+52     	; 0x1a70 <DIO_readPin+0x46>
	{
		return GET_BIT(GET_PIN_FROM_PORT_NO(portNo), pinNo);
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	98 9f       	mul	r25, r24
    1a40:	80 2d       	mov	r24, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	e9 e3       	ldi	r30, 0x39	; 57
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	e8 1b       	sub	r30, r24
    1a4a:	f1 09       	sbc	r31, r1
    1a4c:	80 81       	ld	r24, Z
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	21 e0       	ldi	r18, 0x01	; 1
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	04 2e       	mov	r0, r20
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_readPin+0x32>
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_readPin+0x2e>
    1a60:	82 23       	and	r24, r18
    1a62:	93 23       	and	r25, r19
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_readPin+0x40>
    1a66:	95 95       	asr	r25
    1a68:	87 95       	ror	r24
    1a6a:	4a 95       	dec	r20
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_readPin+0x3c>
    1a6e:	08 95       	ret
    1a70:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    1a72:	08 95       	ret

00001a74 <DIO_togglePort>:
 * [in]: uint8_t a_port
 * 		 the port number to toggle
 * [Return]: void
 */
void DIO_togglePort(uint8_t a_port)
{
    1a74:	98 2f       	mov	r25, r24
	if(DIO_PORT_IS_VALID(a_port))
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	58 f4       	brcc	.+22     	; 0x1a90 <DIO_togglePort+0x1c>
	{
		GET_PORT_FROM_PORT_NO(a_port) ^= ALL_HIGH;
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	98 9f       	mul	r25, r24
    1a7e:	80 2d       	mov	r24, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	eb e3       	ldi	r30, 0x3B	; 59
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	e8 1b       	sub	r30, r24
    1a88:	f1 09       	sbc	r31, r1
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 95       	com	r24
    1a8e:	80 83       	st	Z, r24
    1a90:	08 95       	ret

00001a92 <DIO_togglePin>:
 * [Return]: void
 */
void DIO_togglePin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    1a92:	98 2f       	mov	r25, r24
    1a94:	92 95       	swap	r25
    1a96:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1a98:	94 30       	cpi	r25, 0x04	; 4
    1a9a:	b0 f4       	brcc	.+44     	; 0x1ac8 <DIO_togglePin+0x36>
 */
void DIO_togglePin(uint8_t a_pin)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1a9c:	38 2f       	mov	r19, r24
    1a9e:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1aa0:	38 30       	cpi	r19, 0x08	; 8
    1aa2:	90 f4       	brcc	.+36     	; 0x1ac8 <DIO_togglePin+0x36>
	{
		TOGGLE_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	98 9f       	mul	r25, r24
    1aa8:	80 2d       	mov	r24, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	eb e3       	ldi	r30, 0x3B	; 59
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	e8 1b       	sub	r30, r24
    1ab2:	f1 09       	sbc	r31, r1
    1ab4:	20 81       	ld	r18, Z
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_togglePin+0x2e>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	3a 95       	dec	r19
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <DIO_togglePin+0x2a>
    1ac4:	28 27       	eor	r18, r24
    1ac6:	20 83       	st	Z, r18
    1ac8:	08 95       	ret

00001aca <DIO_controlPortInternalPull>:
 * 		 the internal pull option
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPortInternalPull(uint8_t a_port, DIO_InternalPullOptions a_pull)
{
    1aca:	98 2f       	mov	r25, r24
	switch(a_pull)
    1acc:	66 23       	and	r22, r22
    1ace:	69 f4       	brne	.+26     	; 0x1aea <DIO_controlPortInternalPull+0x20>
 * 		 the internal pullup resistor, 1 => enable, 0 => disable
 * [Return]: void
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
	if(DIO_PORT_IS_VALID(a_port))
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	88 f4       	brcc	.+34     	; 0x1af6 <DIO_controlPortInternalPull+0x2c>
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	98 9f       	mul	r25, r24
    1ad8:	80 2d       	mov	r24, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	eb e3       	ldi	r30, 0x3B	; 59
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	e8 1b       	sub	r30, r24
    1ae2:	f1 09       	sbc	r31, r1
    1ae4:	10 82       	st	Z, r1
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	08 95       	ret
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPortInternalPull(uint8_t a_port, DIO_InternalPullOptions a_pull)
{
	switch(a_pull)
    1aea:	61 30       	cpi	r22, 0x01	; 1
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <DIO_controlPortInternalPull+0x28>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	08 95       	ret
 * 		 the internal pullup resistor, 1 => enable, 0 => disable
 * [Return]: void
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
	if(DIO_PORT_IS_VALID(a_port))
    1af2:	84 30       	cpi	r24, 0x04	; 4
    1af4:	10 f0       	brcs	.+4      	; 0x1afa <DIO_controlPortInternalPull+0x30>
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return DIO_INTERNAL_PULL_NOT_SUPPORTED;
	}
	return DIO_INTERNAL_PULL_SUPPORTED;
}
    1af8:	08 95       	ret
 */
void DIO_writePort(uint8_t a_port, uint8_t a_data)
{
	if(DIO_PORT_IS_VALID(a_port))
	{
		GET_PORT_FROM_PORT_NO(a_port) = a_data;
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	98 9f       	mul	r25, r24
    1afe:	80 2d       	mov	r24, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	eb e3       	ldi	r30, 0x3B	; 59
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	e8 1b       	sub	r30, r24
    1b08:	f1 09       	sbc	r31, r1
    1b0a:	60 83       	st	Z, r22
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	08 95       	ret

00001b10 <DIO_controlPinInternalPull>:
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPinInternalPull(uint8_t a_pin, DIO_InternalPullOptions a_pull)
{
	switch(a_pull)
    1b10:	66 23       	and	r22, r22
    1b12:	f1 f4       	brne	.+60     	; 0x1b50 <DIO_controlPinInternalPull+0x40>
 * [Return]: void
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    1b14:	98 2f       	mov	r25, r24
    1b16:	92 95       	swap	r25
    1b18:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1b1a:	94 30       	cpi	r25, 0x04	; 4
    1b1c:	10 f5       	brcc	.+68     	; 0x1b62 <DIO_controlPinInternalPull+0x52>
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1b1e:	38 2f       	mov	r19, r24
    1b20:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1b22:	38 30       	cpi	r19, 0x08	; 8
    1b24:	f0 f4       	brcc	.+60     	; 0x1b62 <DIO_controlPinInternalPull+0x52>
	{
		if(a_data == LOW)
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	98 9f       	mul	r25, r24
    1b2a:	80 2d       	mov	r24, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	e8 1b       	sub	r30, r24
    1b34:	f1 09       	sbc	r31, r1
    1b36:	20 81       	ld	r18, Z
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_controlPinInternalPull+0x32>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	3a 95       	dec	r19
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_controlPinInternalPull+0x2e>
    1b46:	80 95       	com	r24
    1b48:	28 23       	and	r18, r24
    1b4a:	20 83       	st	Z, r18
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	08 95       	ret
 * [Return]: uint8_t
 * 			 returns DIO_INTERNAL_PULL_SUPPORTED or DIO_INTERNAL_PULL_NOT_SUPPORTED
 */
uint8_t DIO_controlPinInternalPull(uint8_t a_pin, DIO_InternalPullOptions a_pull)
{
	switch(a_pull)
    1b50:	61 30       	cpi	r22, 0x01	; 1
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <DIO_controlPinInternalPull+0x48>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	08 95       	ret
 * [Return]: void
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
    1b58:	98 2f       	mov	r25, r24
    1b5a:	92 95       	swap	r25
    1b5c:	9f 70       	andi	r25, 0x0F	; 15
	pinNo = GET_PIN_NO(a_pin);
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1b5e:	94 30       	cpi	r25, 0x04	; 4
    1b60:	10 f0       	brcs	.+4      	; 0x1b66 <DIO_controlPinInternalPull+0x56>
	{
		if(a_data == LOW)
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		return DIO_INTERNAL_PULL_NOT_SUPPORTED;
	}
	return DIO_INTERNAL_PULL_SUPPORTED;
}
    1b64:	08 95       	ret
 */
void DIO_writePin(uint8_t a_pin, uint8_t a_data)
{
	uint8_t portNo, pinNo;
	portNo = GET_PORT_NO(a_pin);
	pinNo = GET_PIN_NO(a_pin);
    1b66:	38 2f       	mov	r19, r24
    1b68:	3f 70       	andi	r19, 0x0F	; 15
	if(DIO_PORT_IS_VALID(portNo) && DIO_PIN_IS_VALID(pinNo))
    1b6a:	38 30       	cpi	r19, 0x08	; 8
    1b6c:	d0 f7       	brcc	.-12     	; 0x1b62 <DIO_controlPinInternalPull+0x52>
		{
			CLEAR_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
		}
		else
		{
			SET_BIT(GET_PORT_FROM_PORT_NO(portNo), pinNo);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	98 9f       	mul	r25, r24
    1b72:	80 2d       	mov	r24, r0
    1b74:	11 24       	eor	r1, r1
    1b76:	eb e3       	ldi	r30, 0x3B	; 59
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	e8 1b       	sub	r30, r24
    1b7c:	f1 09       	sbc	r31, r1
    1b7e:	20 81       	ld	r18, Z
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_controlPinInternalPull+0x7a>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	3a 95       	dec	r19
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_controlPinInternalPull+0x76>
    1b8e:	28 2b       	or	r18, r24
    1b90:	20 83       	st	Z, r18
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	08 95       	ret

00001b96 <EEPROM_readByte>:
 * 		 pointer to the location where the data will be saved
 * [Return]: uint8_t
 * 			 EEPROM_ERROR or EEPROM_SUCCESS
 */
uint8_t EEPROM_readByte(uint16_t a_u16addr, uint8_t * a_u8data)
{
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	0f 92       	push	r0
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	7c 01       	movw	r14, r24
    1baa:	8b 01       	movw	r16, r22
	/* Send the Start Bit */
	TWI_start();
    1bac:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1bb0:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1bb4:	88 30       	cpi	r24, 0x08	; 8
    1bb6:	49 f0       	breq	.+18     	; 0x1bca <EEPROM_readByte+0x34>
		return EEPROM_ERROR;

	/* Send the Stop Bit */
	TWI_stop();

	return EEPROM_SUCCESS;
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
}
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	08 95       	ret
	if (TWI_getStatus() != TWI_START)
		return EEPROM_ERROR;

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8_t)((0xA0) | ((a_u16addr & 0x0700) >> 7)));
    1bca:	c7 01       	movw	r24, r14
    1bcc:	88 0f       	add	r24, r24
    1bce:	89 2f       	mov	r24, r25
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	99 0b       	sbc	r25, r25
    1bd4:	91 95       	neg	r25
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	2e 70       	andi	r18, 0x0E	; 14
    1bda:	29 83       	std	Y+1, r18	; 0x01
    1bdc:	82 2f       	mov	r24, r18
    1bde:	80 6a       	ori	r24, 0xA0	; 160
    1be0:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1be4:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1be8:	88 31       	cpi	r24, 0x18	; 24
    1bea:	31 f7       	brne	.-52     	; 0x1bb8 <EEPROM_readByte+0x22>
		return EEPROM_ERROR;

	/* Send the required memory location address */
	TWI_writeByte((uint8_t)(a_u16addr));
    1bec:	8e 2d       	mov	r24, r14
    1bee:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bf2:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1bf6:	88 32       	cpi	r24, 0x28	; 40
    1bf8:	f9 f6       	brne	.-66     	; 0x1bb8 <EEPROM_readByte+0x22>
		return EEPROM_ERROR;

	/* Send the Repeated Start Bit */
	TWI_start();
    1bfa:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1bfe:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c02:	80 31       	cpi	r24, 0x10	; 16
    1c04:	c9 f6       	brne	.-78     	; 0x1bb8 <EEPROM_readByte+0x22>
		return EEPROM_ERROR;

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8_t)((0xA0) | ((a_u16addr & 0x0700) >> 7) | 1));
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	81 6a       	ori	r24, 0xA1	; 161
    1c0a:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c0e:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c12:	80 34       	cpi	r24, 0x40	; 64
    1c14:	89 f6       	brne	.-94     	; 0x1bb8 <EEPROM_readByte+0x22>
		return EEPROM_ERROR;

	/* Read Byte from Memory without send ACK */
	*a_u8data = TWI_readByteWithoutACK();
    1c16:	0e 94 5e 07 	call	0xebc	; 0xebc <TWI_readByteWithoutACK>
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c1e:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c22:	88 35       	cpi	r24, 0x58	; 88
    1c24:	49 f6       	brne	.-110    	; 0x1bb8 <EEPROM_readByte+0x22>
		return EEPROM_ERROR;

	/* Send the Stop Bit */
	TWI_stop();
    1c26:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TWI_stop>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	c6 cf       	rjmp	.-116    	; 0x1bba <EEPROM_readByte+0x24>

00001c2e <EEPROM_writeByte>:
 * 		 the data to write in the eeprom
 * [Return]: uint8_t
 * 			 EEPROM_ERROR or EEPROM_SUCCESS
 */
uint8_t EEPROM_writeByte(uint16_t a_u16addr, uint8_t a_u8data)
{
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
    1c36:	16 2f       	mov	r17, r22
	/* Send the Start Bit */
	TWI_start();
    1c38:	0e 94 47 07 	call	0xe8e	; 0xe8e <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1c3c:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c40:	88 30       	cpi	r24, 0x08	; 8
    1c42:	29 f0       	breq	.+10     	; 0x1c4e <EEPROM_writeByte+0x20>
		return EEPROM_ERROR;

	/* Send the Stop Bit */
	TWI_stop();

	return EEPROM_SUCCESS;
    1c44:	80 e0       	ldi	r24, 0x00	; 0
}
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	08 95       	ret
	if (TWI_getStatus() != TWI_START)
		return EEPROM_ERROR;

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8_t)(0xA0 | ((a_u16addr & 0x0700) >> 7)));
    1c4e:	ce 01       	movw	r24, r28
    1c50:	80 70       	andi	r24, 0x00	; 0
    1c52:	97 70       	andi	r25, 0x07	; 7
    1c54:	88 0f       	add	r24, r24
    1c56:	89 2f       	mov	r24, r25
    1c58:	88 1f       	adc	r24, r24
    1c5a:	99 0b       	sbc	r25, r25
    1c5c:	91 95       	neg	r25
    1c5e:	80 6a       	ori	r24, 0xA0	; 160
    1c60:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c64:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c68:	88 31       	cpi	r24, 0x18	; 24
    1c6a:	61 f7       	brne	.-40     	; 0x1c44 <EEPROM_writeByte+0x16>
		return EEPROM_ERROR;

	/* Send the required memory location address */
	TWI_writeByte((uint8_t)(a_u16addr));
    1c6c:	8c 2f       	mov	r24, r28
    1c6e:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c72:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c76:	88 32       	cpi	r24, 0x28	; 40
    1c78:	29 f7       	brne	.-54     	; 0x1c44 <EEPROM_writeByte+0x16>
		return EEPROM_ERROR;

	/* write byte to eeprom */
	TWI_writeByte(a_u8data);
    1c7a:	81 2f       	mov	r24, r17
    1c7c:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c80:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_getStatus>
    1c84:	88 32       	cpi	r24, 0x28	; 40
    1c86:	f1 f6       	brne	.-68     	; 0x1c44 <EEPROM_writeByte+0x16>
		return EEPROM_ERROR;

	/* Send the Stop Bit */
	TWI_stop();
    1c88:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TWI_stop>
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	db cf       	rjmp	.-74     	; 0x1c46 <EEPROM_writeByte+0x18>

00001c90 <DCMOTOR_stop>:
 * [Return]: void
 */
void DCMOTOR_stop(void)
{
	/* write low to both pins to stop the motor */
	DIO_writePin(DCMOTOR_PIN1, LOW);
    1c90:	86 e3       	ldi	r24, 0x36	; 54
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
	DIO_writePin(DCMOTOR_PIN2, LOW);
    1c98:	87 e3       	ldi	r24, 0x37	; 55
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>

#if DCMOTOR_ENABLE_PIN_IS_CONNECTED == 1
	/* check if enable pin is connected to a pin that supports pwm */
	if(PWM_disable(DCMOTOR_ENABLE_PIN) == PWM_ERROR)
    1ca0:	85 e3       	ldi	r24, 0x35	; 53
    1ca2:	0e 94 9e 0b 	call	0x173c	; 0x173c <PWM_disable>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	08 95       	ret
	{
		/* write low if pwm is not supported on enable pin */
		DIO_writePin(DCMOTOR_ENABLE_PIN, LOW);
    1caa:	85 e3       	ldi	r24, 0x35	; 53
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
    1cb2:	08 95       	ret

00001cb4 <DCMOTOR_start>:
 * [in]: uint8_t a_speedPercent
 * 		 speed of the motor - ignored if enable pin is not connected
 * [Return]: void
 */
void DCMOTOR_start(EN_DcMotorDirection a_direction, uint8_t a_speedPercent)
{
    1cb4:	1f 93       	push	r17
    1cb6:	16 2f       	mov	r17, r22
	switch(a_direction)
    1cb8:	88 23       	and	r24, r24
    1cba:	61 f4       	brne	.+24     	; 0x1cd4 <DCMOTOR_start+0x20>
	{
	case DCMOTOR_FORWARD:
		/* move motor in the forward direction */
		DIO_writePin(DCMOTOR_PIN1, HIGH);
    1cbc:	86 e3       	ldi	r24, 0x36	; 54
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
		DIO_writePin(DCMOTOR_PIN2, LOW);
    1cc4:	87 e3       	ldi	r24, 0x37	; 55
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
	default:
		return;
	}
#if DCMOTOR_ENABLE_PIN_IS_CONNECTED == 1
	/* check if the input speed is greater than 100 */
	if(a_speedPercent > 100)
    1ccc:	15 36       	cpi	r17, 0x65	; 101
    1cce:	70 f0       	brcs	.+28     	; 0x1cec <DCMOTOR_start+0x38>
	{
		/* write high if pwm is not supported on enable pin */
		DIO_writePin(DCMOTOR_ENABLE_PIN, HIGH);
	}
#endif /* DCMOTOR_ENABLE_PIN_IS_CONNECTED == 1 */
}
    1cd0:	1f 91       	pop	r17
    1cd2:	08 95       	ret
 * 		 speed of the motor - ignored if enable pin is not connected
 * [Return]: void
 */
void DCMOTOR_start(EN_DcMotorDirection a_direction, uint8_t a_speedPercent)
{
	switch(a_direction)
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <DCMOTOR_start+0x1c>
		DIO_writePin(DCMOTOR_PIN1, HIGH);
		DIO_writePin(DCMOTOR_PIN2, LOW);
		break;
	case DCMOTOR_REVERSE:
		/* move motor in the reverse direction */
		DIO_writePin(DCMOTOR_PIN1, LOW);
    1cd8:	86 e3       	ldi	r24, 0x36	; 54
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
		DIO_writePin(DCMOTOR_PIN2, HIGH);
    1ce0:	87 e3       	ldi	r24, 0x37	; 55
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
	default:
		return;
	}
#if DCMOTOR_ENABLE_PIN_IS_CONNECTED == 1
	/* check if the input speed is greater than 100 */
	if(a_speedPercent > 100)
    1ce8:	15 36       	cpi	r17, 0x65	; 101
    1cea:	90 f7       	brcc	.-28     	; 0x1cd0 <DCMOTOR_start+0x1c>
	{
		return;
	}
	/* check if enable pin is connected to a pin that supports pwm */
	if(PWM_enable(DCMOTOR_ENABLE_PIN, a_speedPercent) == PWM_ERROR)
    1cec:	85 e3       	ldi	r24, 0x35	; 53
    1cee:	61 2f       	mov	r22, r17
    1cf0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <PWM_enable>
    1cf4:	88 23       	and	r24, r24
    1cf6:	61 f7       	brne	.-40     	; 0x1cd0 <DCMOTOR_start+0x1c>
	{
		/* write high if pwm is not supported on enable pin */
		DIO_writePin(DCMOTOR_ENABLE_PIN, HIGH);
    1cf8:	85 e3       	ldi	r24, 0x35	; 53
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
    1d00:	e7 cf       	rjmp	.-50     	; 0x1cd0 <DCMOTOR_start+0x1c>

00001d02 <DCMOTOR_init>:
 * [in]: void
 * [Return]: void
 */
void DCMOTOR_init(void)
{
	DIO_pinInit(DCMOTOR_PIN1, PIN_OUTPUT);
    1d02:	86 e3       	ldi	r24, 0x36	; 54
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
	DIO_pinInit(DCMOTOR_PIN2, PIN_OUTPUT);
    1d0a:	87 e3       	ldi	r24, 0x37	; 55
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>

#if DCMOTOR_ENABLE_PIN_IS_CONNECTED == 1

	DIO_pinInit(DCMOTOR_ENABLE_PIN, PIN_OUTPUT);
    1d12:	85 e3       	ldi	r24, 0x35	; 53
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>

#endif /* DCMOTOR_ENABLE_PIN_IS_CONNECTED == 1 */
}
    1d1a:	08 95       	ret

00001d1c <BUZZER_off>:
 * [Return]: void
 */
void BUZZER_off(void)
{
	/* write low to the buzzer pin */
	DIO_writePin(BUZZER_PIN, LOW);
    1d1c:	87 e1       	ldi	r24, 0x17	; 23
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
}
    1d24:	08 95       	ret

00001d26 <BUZZER_on>:
 * [Return]: void
 */
void BUZZER_on(void)
{
	/* write high to the buzzer pin */
	DIO_writePin(BUZZER_PIN, HIGH);
    1d26:	87 e1       	ldi	r24, 0x17	; 23
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_writePin>
}
    1d2e:	08 95       	ret

00001d30 <BUZZER_init>:
 * [Return]: void
 */
void BUZZER_init(void)
{
	/* init the buzzer pin as output */
	DIO_pinInit(BUZZER_PIN, PIN_OUTPUT);
    1d30:	87 e1       	ldi	r24, 0x17	; 23
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_pinInit>
}
    1d38:	08 95       	ret

00001d3a <mainTimerCallback>:
 * [in]: void
 * [Return]: void
 */
static void mainTimerCallback(void)
{
	g_hasMainTimerFinished = TRUE;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	80 93 a9 01 	sts	0x01A9, r24

	/* stop the timer each time the callback is executed */
	TIMER_stop(TIMER_0);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	0e 94 8b 07 	call	0xf16	; 0xf16 <TIMER_stop>
}
    1d46:	08 95       	ret

00001d48 <openDoor>:
 * 		 if TRUE, a password is required,
 * 		 otherwise a password is not required, if the password is already entered
 * [Return]: void
 */
static void openDoor(boolean a_isAuthRequired)
{
    1d48:	1f 93       	push	r17
	switch(g_innerState)
    1d4a:	10 91 ad 01 	lds	r17, 0x01AD
    1d4e:	11 30       	cpi	r17, 0x01	; 1
    1d50:	11 f1       	breq	.+68     	; 0x1d96 <openDoor+0x4e>
    1d52:	11 30       	cpi	r17, 0x01	; 1
    1d54:	38 f0       	brcs	.+14     	; 0x1d64 <openDoor+0x1c>
    1d56:	12 30       	cpi	r17, 0x02	; 2
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <openDoor+0x14>
    1d5a:	3f c0       	rjmp	.+126    	; 0x1dda <openDoor+0x92>
    1d5c:	13 30       	cpi	r17, 0x03	; 3
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <openDoor+0x34>
		DCMOTOR_stop();
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;
	}
}
    1d60:	1f 91       	pop	r17
    1d62:	08 95       	ret
{
	switch(g_innerState)
	{
	case 0:
		/* go to authorization if auth is required */
		if(a_isAuthRequired)
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <openDoor+0x22>
    1d68:	5b c0       	rjmp	.+182    	; 0x1e20 <openDoor+0xd8>
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    1d6a:	80 91 aa 01 	lds	r24, 0x01AA
    1d6e:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	80 93 aa 01 	sts	0x01AA, r24
		DCMOTOR_stop();
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;
	}
}
    1d78:	1f 91       	pop	r17
    1d7a:	08 95       	ret
		g_awaitOption = AWAIT_TIMER;
		g_innerState ++;
		break;

	case 3:
		DCMOTOR_stop();
    1d7c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DCMOTOR_stop>
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    1d80:	80 91 aa 01 	lds	r24, 0x01AA
    1d84:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	80 93 aa 01 	sts	0x01AA, r24
		break;

	case 3:
		DCMOTOR_stop();
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
    1d8e:	10 92 ad 01 	sts	0x01AD, r1
		break;
	}
}
    1d92:	1f 91       	pop	r17
    1d94:	08 95       	ret
		}
		break;


	case 1:
		g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, MOTOR_HOLD_TIME_MS);
    1d96:	8d e8       	ldi	r24, 0x8D	; 141
    1d98:	9b e5       	ldi	r25, 0x5B	; 91
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	80 93 6b 01 	sts	0x016B, r24
    1da2:	90 93 6c 01 	sts	0x016C, r25
    1da6:	a0 93 6d 01 	sts	0x016D, r26
    1daa:	b0 93 6e 01 	sts	0x016E, r27
		TIMER_init(&g_mainTimerConfig);
    1dae:	88 e6       	ldi	r24, 0x68	; 104
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
		TIMER_start(TIMER_0);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
		DCMOTOR_stop();
    1dbc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <DCMOTOR_stop>
		UART_sendByteBlocking(SHOW_DOOR_IS_UNLOCKED_TEXT_CMD);
    1dc0:	82 e5       	ldi	r24, 0x52	; 82
    1dc2:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
		g_awaitOption = AWAIT_TIMER;
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	80 93 a7 01 	sts	0x01A7, r24
		g_innerState ++;
    1dcc:	80 91 ad 01 	lds	r24, 0x01AD
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	80 93 ad 01 	sts	0x01AD, r24
		DCMOTOR_stop();
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;
	}
}
    1dd6:	1f 91       	pop	r17
    1dd8:	08 95       	ret
		g_awaitOption = AWAIT_TIMER;
		g_innerState ++;
		break;

	case 2:
		g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, MOTOR_LOCK_TIME_MS);
    1dda:	83 ec       	ldi	r24, 0xC3	; 195
    1ddc:	99 ec       	ldi	r25, 0xC9	; 201
    1dde:	a1 e0       	ldi	r26, 0x01	; 1
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	80 93 6b 01 	sts	0x016B, r24
    1de6:	90 93 6c 01 	sts	0x016C, r25
    1dea:	a0 93 6d 01 	sts	0x016D, r26
    1dee:	b0 93 6e 01 	sts	0x016E, r27
		TIMER_init(&g_mainTimerConfig);
    1df2:	88 e6       	ldi	r24, 0x68	; 104
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
		TIMER_start(TIMER_0);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
		DCMOTOR_start(DCMOTOR_REVERSE, 50);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	62 e3       	ldi	r22, 0x32	; 50
    1e04:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <DCMOTOR_start>
		UART_sendByteBlocking(SHOW_DOOR_LOCKING_TEXT_CMD);
    1e08:	81 e5       	ldi	r24, 0x51	; 81
    1e0a:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
		g_awaitOption = AWAIT_TIMER;
    1e0e:	10 93 a7 01 	sts	0x01A7, r17
		g_innerState ++;
    1e12:	80 91 ad 01 	lds	r24, 0x01AD
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	80 93 ad 01 	sts	0x01AD, r24
		DCMOTOR_stop();
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;
	}
}
    1e1c:	1f 91       	pop	r17
    1e1e:	08 95       	ret
			setAppState(AUTHORIZING_STATE);
		}
		else
		{
			/* four inner states controlling unlocking, holding and locking the door rescpectively */
			g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, MOTOR_UNLOCK_TIME_MS);
    1e20:	83 ec       	ldi	r24, 0xC3	; 195
    1e22:	99 ec       	ldi	r25, 0xC9	; 201
    1e24:	a1 e0       	ldi	r26, 0x01	; 1
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	80 93 6b 01 	sts	0x016B, r24
    1e2c:	90 93 6c 01 	sts	0x016C, r25
    1e30:	a0 93 6d 01 	sts	0x016D, r26
    1e34:	b0 93 6e 01 	sts	0x016E, r27
			TIMER_init(&g_mainTimerConfig);
    1e38:	88 e6       	ldi	r24, 0x68	; 104
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
			TIMER_start(TIMER_0);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
			DCMOTOR_start(DCMOTOR_FORWARD, 50);
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	62 e3       	ldi	r22, 0x32	; 50
    1e4a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <DCMOTOR_start>
			UART_sendByteBlocking(SHOW_DOOR_UNLOCKING_TEXT_CMD);
    1e4e:	80 e5       	ldi	r24, 0x50	; 80
    1e50:	b8 cf       	rjmp	.-144    	; 0x1dc2 <openDoor+0x7a>

00001e52 <app_init>:
 * [Args]:
 * [in]: void
 * [Return]: void
 */
void app_init(void)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	2c 97       	sbiw	r28, 0x0c	; 12
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
	/* init the buzzer */
	BUZZER_init();
    1e66:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <BUZZER_init>

	/* init the dc motor */
	DCMOTOR_init();
    1e6a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DCMOTOR_init>
	 */
	ST_TwiConfig twiConfig = {
			0x01,
			TWI_PRESCALER_1,
			0x02
	};
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	dc 01       	movw	r26, r24
    1e74:	ea e7       	ldi	r30, 0x7A	; 122
    1e76:	f1 e0       	ldi	r31, 0x01	; 1
    1e78:	23 e0       	ldi	r18, 0x03	; 3
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	0d 92       	st	X+, r0
    1e7e:	21 50       	subi	r18, 0x01	; 1
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <app_init+0x28>
	TWI_init(&twiConfig);
    1e82:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_init>
			UART_PARITY_DISABLED,
			UART_STOP_BIT_1,
			9600,
			UART_TX_INTERRUPT_DISABLED,
			UART_RX_INTERRUPT_ENABLED
	};
    1e86:	ce 01       	movw	r24, r28
    1e88:	04 96       	adiw	r24, 0x04	; 4
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	e1 e7       	ldi	r30, 0x71	; 113
    1e8e:	f1 e0       	ldi	r31, 0x01	; 1
    1e90:	29 e0       	ldi	r18, 0x09	; 9
    1e92:	01 90       	ld	r0, Z+
    1e94:	0d 92       	st	X+, r0
    1e96:	21 50       	subi	r18, 0x01	; 1
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <app_init+0x40>
	UART_init(&uartConfig);
    1e9a:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_init>

	/* set uart rx callback */
	UART_setRxInterruptCallback(uartRxCallback);
    1e9e:	8d e5       	ldi	r24, 0x5D	; 93
    1ea0:	9f e0       	ldi	r25, 0x0F	; 15
    1ea2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_setRxInterruptCallback>

	/* enable global interrupt */
	ENABLE_GLOBAL_INTERRUPT();
    1ea6:	78 94       	sei

}
    1ea8:	2c 96       	adiw	r28, 0x0c	; 12
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <uartRxCallback>:
 * [in]: void
 * [Return]: void
 */
static void uartRxCallback(void)
{
	g_isDataReceived = TRUE;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 a8 01 	sts	0x01A8, r24

	/* save the received data */
	g_receivedData = UART_receiveByteNonBlocking();
    1ec0:	0e 94 87 06 	call	0xd0e	; 0xd0e <UART_receiveByteNonBlocking>
    1ec4:	80 93 ae 01 	sts	0x01AE, r24
}
    1ec8:	08 95       	ret

00001eca <changePass>:
 * 		 otherwise a password is not required, like in the case of a first-time user
 * 		 or if the password is already entered
 * [Return]: void
 */
static void changePass(boolean a_isAuthRequired)
{
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
	/* store new entered pass and confirmation pass */
	static uint8_t newPass[PASSWORD_LENGTH], confirmationPass[PASSWORD_LENGTH];

	switch(g_innerState)
    1ed2:	10 91 ad 01 	lds	r17, 0x01AD
    1ed6:	12 30       	cpi	r17, 0x02	; 2
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <changePass+0x12>
    1eda:	60 c0       	rjmp	.+192    	; 0x1f9c <changePass+0xd2>
    1edc:	13 30       	cpi	r17, 0x03	; 3
    1ede:	48 f0       	brcs	.+18     	; 0x1ef2 <changePass+0x28>
    1ee0:	13 30       	cpi	r17, 0x03	; 3
    1ee2:	91 f1       	breq	.+100    	; 0x1f48 <changePass+0x7e>
    1ee4:	14 30       	cpi	r17, 0x04	; 4
    1ee6:	11 f1       	breq	.+68     	; 0x1f2c <changePass+0x62>
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;

	}
}
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	08 95       	ret
static void changePass(boolean a_isAuthRequired)
{
	/* store new entered pass and confirmation pass */
	static uint8_t newPass[PASSWORD_LENGTH], confirmationPass[PASSWORD_LENGTH];

	switch(g_innerState)
    1ef2:	11 23       	and	r17, r17
    1ef4:	89 f0       	breq	.+34     	; 0x1f18 <changePass+0x4e>
    1ef6:	11 30       	cpi	r17, 0x01	; 1
    1ef8:	b9 f7       	brne	.-18     	; 0x1ee8 <changePass+0x1e>
		g_passTrials = 0;
		g_innerState ++;
		break;

	case 1:
		if(a_isAuthRequired)
    1efa:	88 23       	and	r24, r24
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <changePass+0x36>
    1efe:	c8 c0       	rjmp	.+400    	; 0x2090 <changePass+0x1c6>
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    1f00:	80 91 aa 01 	lds	r24, 0x01AA
    1f04:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    1f08:	84 e0       	ldi	r24, 0x04	; 4
    1f0a:	80 93 aa 01 	sts	0x01AA, r24
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;

	}
}
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	08 95       	ret

	switch(g_innerState)
	{
	case 0:
		/* set trials to 0 at the beginning */
		g_passTrials = 0;
    1f18:	10 92 af 01 	sts	0x01AF, r1
		g_innerState ++;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	80 93 ad 01 	sts	0x01AD, r24
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;

	}
}
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    1f2c:	80 91 aa 01 	lds	r24, 0x01AA
    1f30:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 aa 01 	sts	0x01AA, r24
		break;

	case 4:
		/* go to main menu */
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
    1f3a:	10 92 ad 01 	sts	0x01AD, r1
		break;

	}
}
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	08 95       	ret
 */
static boolean readPassword(uint8_t * password)
{
	static uint8_t passIndex = 0, passInnerState = 0;

	switch(passInnerState)
    1f48:	80 91 ba 01 	lds	r24, 0x01BA
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <changePass+0x88>
    1f50:	59 c0       	rjmp	.+178    	; 0x2004 <changePass+0x13a>
	{
	case 0:
		/* delete a character from the password */
		if(g_receivedData == PASS_BACKSPACE_CHAR && passIndex != 0)
    1f52:	80 91 ae 01 	lds	r24, 0x01AE
    1f56:	8d 32       	cpi	r24, 0x2D	; 45
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <changePass+0x92>
    1f5a:	b1 c0       	rjmp	.+354    	; 0x20be <changePass+0x1f4>
		{
			passIndex --;
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
		}
		/* clear password */
		else if(g_receivedData == PASS_CLEAR_SCREEN_CHAR)
    1f5c:	80 91 ae 01 	lds	r24, 0x01AE
    1f60:	83 36       	cpi	r24, 0x63	; 99
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <changePass+0x9c>
    1f64:	b2 c0       	rjmp	.+356    	; 0x20ca <changePass+0x200>
		{
			passIndex = 0;
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
		}
		/* save entered char to password if it's a number */
		else if(passIndex != PASSWORD_LENGTH && g_receivedData >= PASS_ALLOWED_START_CHAR && g_receivedData <= PASS_ALLOWED_END_CHAR)
    1f66:	90 91 bb 01 	lds	r25, 0x01BB
    1f6a:	95 30       	cpi	r25, 0x05	; 5
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <changePass+0xa6>
    1f6e:	f1 c0       	rjmp	.+482    	; 0x2152 <changePass+0x288>
    1f70:	80 91 ae 01 	lds	r24, 0x01AE
    1f74:	80 33       	cpi	r24, 0x30	; 48
    1f76:	70 f1       	brcs	.+92     	; 0x1fd4 <changePass+0x10a>
    1f78:	80 91 ae 01 	lds	r24, 0x01AE
    1f7c:	8a 33       	cpi	r24, 0x3A	; 58
    1f7e:	50 f5       	brcc	.+84     	; 0x1fd4 <changePass+0x10a>
		{
			password[passIndex] = g_receivedData;
    1f80:	80 91 ae 01 	lds	r24, 0x01AE
    1f84:	e9 2f       	mov	r30, r25
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	e0 55       	subi	r30, 0x50	; 80
    1f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8c:	80 83       	st	Z, r24
			passIndex ++;
    1f8e:	9f 5f       	subi	r25, 0xFF	; 255
    1f90:	90 93 bb 01 	sts	0x01BB, r25
			UART_sendByteBlocking(READ_NEXT_PASS_CHAR_CMD);
    1f94:	85 e4       	ldi	r24, 0x45	; 69
    1f96:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    1f9a:	2c c0       	rjmp	.+88     	; 0x1ff4 <changePass+0x12a>
 */
static boolean readPassword(uint8_t * password)
{
	static uint8_t passIndex = 0, passInnerState = 0;

	switch(passInnerState)
    1f9c:	80 91 ba 01 	lds	r24, 0x01BA
    1fa0:	88 23       	and	r24, r24
    1fa2:	e1 f4       	brne	.+56     	; 0x1fdc <changePass+0x112>
	{
	case 0:
		/* delete a character from the password */
		if(g_receivedData == PASS_BACKSPACE_CHAR && passIndex != 0)
    1fa4:	80 91 ae 01 	lds	r24, 0x01AE
    1fa8:	8d 32       	cpi	r24, 0x2D	; 45
    1faa:	09 f4       	brne	.+2      	; 0x1fae <changePass+0xe4>
    1fac:	7c c0       	rjmp	.+248    	; 0x20a6 <changePass+0x1dc>
		{
			passIndex --;
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
		}
		/* clear password */
		else if(g_receivedData == PASS_CLEAR_SCREEN_CHAR)
    1fae:	80 91 ae 01 	lds	r24, 0x01AE
    1fb2:	83 36       	cpi	r24, 0x63	; 99
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <changePass+0xee>
    1fb6:	89 c0       	rjmp	.+274    	; 0x20ca <changePass+0x200>
		{
			passIndex = 0;
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
		}
		/* save entered char to password if it's a number */
		else if(passIndex != PASSWORD_LENGTH && g_receivedData >= PASS_ALLOWED_START_CHAR && g_receivedData <= PASS_ALLOWED_END_CHAR)
    1fb8:	90 91 bb 01 	lds	r25, 0x01BB
    1fbc:	95 30       	cpi	r25, 0x05	; 5
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <changePass+0xf8>
    1fc0:	c8 c0       	rjmp	.+400    	; 0x2152 <changePass+0x288>
    1fc2:	80 91 ae 01 	lds	r24, 0x01AE
    1fc6:	80 33       	cpi	r24, 0x30	; 48
    1fc8:	28 f0       	brcs	.+10     	; 0x1fd4 <changePass+0x10a>
    1fca:	80 91 ae 01 	lds	r24, 0x01AE
    1fce:	8a 33       	cpi	r24, 0x3A	; 58
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <changePass+0x10a>
    1fd2:	db c0       	rjmp	.+438    	; 0x218a <changePass+0x2c0>
			passInnerState ++;
		}
		/* undefined char, skip it */
		else
		{
			UART_sendByteBlocking(SKIP_PASS_CHAR_CMD);
    1fd4:	86 e4       	ldi	r24, 0x46	; 70
    1fd6:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    1fda:	0c c0       	rjmp	.+24     	; 0x1ff4 <changePass+0x12a>
 */
static boolean readPassword(uint8_t * password)
{
	static uint8_t passIndex = 0, passInnerState = 0;

	switch(passInnerState)
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	51 f4       	brne	.+20     	; 0x1ff4 <changePass+0x12a>

		return FALSE;
		break;

	case 1:
		passInnerState = 0;
    1fe0:	10 92 ba 01 	sts	0x01BA, r1

	case 2:
		if(readPassword(newPass))
		{
			/* user has finished entering the pass */
			UART_sendByteBlocking(CONFIRM_PASS_CMD);
    1fe4:	84 e4       	ldi	r24, 0x44	; 68
    1fe6:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
			g_innerState ++;
    1fea:	80 91 ad 01 	lds	r24, 0x01AD
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	80 93 ad 01 	sts	0x01AD, r24
		{
			UART_sendByteBlocking(SKIP_PASS_CHAR_CMD);
		}

		/* await next char */
		g_awaitOption = AWAIT_RESPONSE;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	80 93 a7 01 	sts	0x01A7, r24
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
		break;

	}
}
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret
 */
static boolean readPassword(uint8_t * password)
{
	static uint8_t passIndex = 0, passInnerState = 0;

	switch(passInnerState)
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	09 f0       	breq	.+2      	; 0x200a <changePass+0x140>
    2008:	6f cf       	rjmp	.-290    	; 0x1ee8 <changePass+0x1e>

		return FALSE;
		break;

	case 1:
		passInnerState = 0;
    200a:	10 92 ba 01 	sts	0x01BA, r1
	uint8_t passIndex;

	/* looping through the passwords and return false when meeting a mismatch, otherwise return true */
	for(passIndex = 0; passIndex < PASSWORD_LENGTH; passIndex ++)
	{
		if(pass1[passIndex] != pass2[passIndex])
    200e:	90 91 b5 01 	lds	r25, 0x01B5
    2012:	80 91 b0 01 	lds	r24, 0x01B0
    2016:	98 17       	cp	r25, r24
    2018:	09 f0       	breq	.+2      	; 0x201c <changePass+0x152>
    201a:	5d c0       	rjmp	.+186    	; 0x20d6 <changePass+0x20c>
    201c:	90 91 b6 01 	lds	r25, 0x01B6
    2020:	80 91 b1 01 	lds	r24, 0x01B1
    2024:	98 17       	cp	r25, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <changePass+0x160>
    2028:	56 c0       	rjmp	.+172    	; 0x20d6 <changePass+0x20c>
    202a:	90 91 b7 01 	lds	r25, 0x01B7
    202e:	80 91 b2 01 	lds	r24, 0x01B2
    2032:	98 17       	cp	r25, r24
    2034:	09 f0       	breq	.+2      	; 0x2038 <changePass+0x16e>
    2036:	4f c0       	rjmp	.+158    	; 0x20d6 <changePass+0x20c>
    2038:	90 91 b8 01 	lds	r25, 0x01B8
    203c:	80 91 b3 01 	lds	r24, 0x01B3
    2040:	98 17       	cp	r25, r24
    2042:	09 f0       	breq	.+2      	; 0x2046 <changePass+0x17c>
    2044:	48 c0       	rjmp	.+144    	; 0x20d6 <changePass+0x20c>
    2046:	90 91 b9 01 	lds	r25, 0x01B9
    204a:	80 91 b4 01 	lds	r24, 0x01B4
    204e:	98 17       	cp	r25, r24
    2050:	09 f0       	breq	.+2      	; 0x2054 <changePass+0x18a>
    2052:	41 c0       	rjmp	.+130    	; 0x20d6 <changePass+0x20c>
			{
				/* show "pass mismatch" */
				UART_sendByteBlocking(SHOW_PASS_MISMATCH_TEXT_CMD);

				/* check the trials and return to menu if NEW_PASSWORD_TRIALS is reached */
				if(!g_firstTime)
    2054:	c1 e0       	ldi	r28, 0x01	; 1
    2056:	d0 e0       	ldi	r29, 0x00	; 0
    2058:	01 eb       	ldi	r16, 0xB1	; 177
    205a:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t passIndex;

	for(passIndex = 0; passIndex < PASSWORD_LENGTH; passIndex ++)
	{
		/* write char by char to eeprom */
		while(EEPROM_writeByte(PASSWORD_EEPROM_START_ADDRESS + passIndex, password[passIndex]) == EEPROM_ERROR);
    205c:	f8 01       	movw	r30, r16
    205e:	31 97       	sbiw	r30, 0x01	; 1
    2060:	ce 01       	movw	r24, r28
    2062:	60 81       	ld	r22, Z
    2064:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <EEPROM_writeByte>
    2068:	88 23       	and	r24, r24
    206a:	c1 f3       	breq	.-16     	; 0x205c <changePass+0x192>
		TIMER_DELAY_MS(20);
    206c:	8e ef       	ldi	r24, 0xFE	; 254
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	4e e6       	ldi	r20, 0x6E	; 110
    2072:	52 e0       	ldi	r21, 0x02	; 2
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_delayTicks>
    207e:	21 96       	adiw	r28, 0x01	; 1
 */
static void savePassToEeprom(uint8_t * password)
{
	uint8_t passIndex;

	for(passIndex = 0; passIndex < PASSWORD_LENGTH; passIndex ++)
    2080:	c6 30       	cpi	r28, 0x06	; 6
    2082:	d1 05       	cpc	r29, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <changePass+0x1be>
    2086:	4e c0       	rjmp	.+156    	; 0x2124 <changePass+0x25a>
    2088:	8e 01       	movw	r16, r28
    208a:	00 55       	subi	r16, 0x50	; 80
    208c:	1e 4f       	sbci	r17, 0xFE	; 254
    208e:	e6 cf       	rjmp	.-52     	; 0x205c <changePass+0x192>
			setAppState(AUTHORIZING_STATE);
		}
		else
		{
			/* show "enter new pass" and wait for response */
			UART_sendByteBlocking(READ_NEW_PASS_CMD);
    2090:	83 e4       	ldi	r24, 0x43	; 67
    2092:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
			g_awaitOption = AWAIT_RESPONSE;
    2096:	10 93 a7 01 	sts	0x01A7, r17
			g_innerState ++;
    209a:	80 91 ad 01 	lds	r24, 0x01AD
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	80 93 ad 01 	sts	0x01AD, r24
    20a4:	21 cf       	rjmp	.-446    	; 0x1ee8 <changePass+0x1e>

	switch(passInnerState)
	{
	case 0:
		/* delete a character from the password */
		if(g_receivedData == PASS_BACKSPACE_CHAR && passIndex != 0)
    20a6:	80 91 bb 01 	lds	r24, 0x01BB
    20aa:	88 23       	and	r24, r24
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <changePass+0x1e6>
    20ae:	7f cf       	rjmp	.-258    	; 0x1fae <changePass+0xe4>
		{
			passIndex --;
    20b0:	81 50       	subi	r24, 0x01	; 1
    20b2:	80 93 bb 01 	sts	0x01BB, r24
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
    20b6:	87 e4       	ldi	r24, 0x47	; 71
    20b8:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    20bc:	9b cf       	rjmp	.-202    	; 0x1ff4 <changePass+0x12a>

	switch(passInnerState)
	{
	case 0:
		/* delete a character from the password */
		if(g_receivedData == PASS_BACKSPACE_CHAR && passIndex != 0)
    20be:	80 91 bb 01 	lds	r24, 0x01BB
    20c2:	88 23       	and	r24, r24
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <changePass+0x1fe>
    20c6:	4a cf       	rjmp	.-364    	; 0x1f5c <changePass+0x92>
    20c8:	f3 cf       	rjmp	.-26     	; 0x20b0 <changePass+0x1e6>
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
		}
		/* clear password */
		else if(g_receivedData == PASS_CLEAR_SCREEN_CHAR)
		{
			passIndex = 0;
    20ca:	10 92 bb 01 	sts	0x01BB, r1
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
    20ce:	88 e4       	ldi	r24, 0x48	; 72
    20d0:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    20d4:	8f cf       	rjmp	.-226    	; 0x1ff4 <changePass+0x12a>
				g_innerState ++;
			}
			else
			{
				/* show "pass mismatch" */
				UART_sendByteBlocking(SHOW_PASS_MISMATCH_TEXT_CMD);
    20d6:	89 e4       	ldi	r24, 0x49	; 73
    20d8:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>

				/* check the trials and return to menu if NEW_PASSWORD_TRIALS is reached */
				if(!g_firstTime)
    20dc:	80 91 ab 01 	lds	r24, 0x01AB
    20e0:	88 23       	and	r24, r24
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <changePass+0x21c>
    20e4:	4c c0       	rjmp	.+152    	; 0x217e <changePass+0x2b4>
    20e6:	80 91 af 01 	lds	r24, 0x01AF
				{
					g_passTrials ++;
				}
				if(g_passTrials < NEW_PASSWORD_TRIALS)
    20ea:	85 30       	cpi	r24, 0x05	; 5
    20ec:	08 f0       	brcs	.+2      	; 0x20f0 <changePass+0x226>
    20ee:	41 c0       	rjmp	.+130    	; 0x2172 <changePass+0x2a8>
				{
					g_innerState = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 ad 01 	sts	0x01AD, r24
				}

			}

			/* wait for the specified msg to be showed on the screen for some time */
			g_awaitOption = AWAIT_RESPONSE_AND_TIMER;
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	80 93 a7 01 	sts	0x01A7, r24
			g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, DEFAULT_MSG_TIME_MS);
    20fc:	84 e8       	ldi	r24, 0x84	; 132
    20fe:	9e e1       	ldi	r25, 0x1E	; 30
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	80 93 6b 01 	sts	0x016B, r24
    2108:	90 93 6c 01 	sts	0x016C, r25
    210c:	a0 93 6d 01 	sts	0x016D, r26
    2110:	b0 93 6e 01 	sts	0x016E, r27
			TIMER_init(&g_mainTimerConfig);
    2114:	88 e6       	ldi	r24, 0x68	; 104
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
			TIMER_start(TIMER_0);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
    2122:	e2 ce       	rjmp	.-572    	; 0x1ee8 <changePass+0x1e>
			if(comparePasswords(newPass, confirmationPass))
			{
				/* save pass to eeprom if two passwords match */
				savePassToEeprom(confirmationPass);

				if(g_firstTime)
    2124:	80 91 ab 01 	lds	r24, 0x01AB
    2128:	88 23       	and	r24, r24
    212a:	49 f4       	brne	.+18     	; 0x213e <changePass+0x274>
					while(EEPROM_writeByte(FIRST_TIME_CHECK_ADDRESS, NOT_FIRST_TIME_EEPROM_VAL) == EEPROM_ERROR);
					g_firstTime = FALSE;
				}

				/* show "pass changed" */
				UART_sendByteBlocking(SHOW_PASS_CHANGED_CMD);
    212c:	8a e4       	ldi	r24, 0x4A	; 74
    212e:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
				g_innerState ++;
    2132:	80 91 ad 01 	lds	r24, 0x01AD
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 93 ad 01 	sts	0x01AD, r24
    213c:	dc cf       	rjmp	.-72     	; 0x20f6 <changePass+0x22c>
				savePassToEeprom(confirmationPass);

				if(g_firstTime)
				{
					/* write to the eeprom that the user is not a first-time user */
					while(EEPROM_writeByte(FIRST_TIME_CHECK_ADDRESS, NOT_FIRST_TIME_EEPROM_VAL) == EEPROM_ERROR);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	65 e5       	ldi	r22, 0x55	; 85
    2144:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <EEPROM_writeByte>
    2148:	88 23       	and	r24, r24
    214a:	c9 f3       	breq	.-14     	; 0x213e <changePass+0x274>
					g_firstTime = FALSE;
    214c:	10 92 ab 01 	sts	0x01AB, r1
    2150:	ed cf       	rjmp	.-38     	; 0x212c <changePass+0x262>
			password[passIndex] = g_receivedData;
			passIndex ++;
			UART_sendByteBlocking(READ_NEXT_PASS_CHAR_CMD);
		}
		/* submit entered pass */
		else if(passIndex == PASSWORD_LENGTH && g_receivedData == PASS_ENTER_CHAR)
    2152:	80 91 ae 01 	lds	r24, 0x01AE
    2156:	8d 33       	cpi	r24, 0x3D	; 61
    2158:	09 f0       	breq	.+2      	; 0x215c <changePass+0x292>
    215a:	3c cf       	rjmp	.-392    	; 0x1fd4 <changePass+0x10a>
		{
			passIndex = 0;
    215c:	10 92 bb 01 	sts	0x01BB, r1
			UART_sendByteBlocking(STOP_RECEIVING_PASS_CMD);
    2160:	8d e4       	ldi	r24, 0x4D	; 77
    2162:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
			passInnerState ++;
    2166:	80 91 ba 01 	lds	r24, 0x01BA
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	80 93 ba 01 	sts	0x01BA, r24
    2170:	41 cf       	rjmp	.-382    	; 0x1ff4 <changePass+0x12a>
				{
					g_innerState = 1;
				}
				else
				{
					g_innerState ++;
    2172:	80 91 ad 01 	lds	r24, 0x01AD
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 93 ad 01 	sts	0x01AD, r24
    217c:	bc cf       	rjmp	.-136    	; 0x20f6 <changePass+0x22c>
				UART_sendByteBlocking(SHOW_PASS_MISMATCH_TEXT_CMD);

				/* check the trials and return to menu if NEW_PASSWORD_TRIALS is reached */
				if(!g_firstTime)
				{
					g_passTrials ++;
    217e:	80 91 af 01 	lds	r24, 0x01AF
    2182:	8f 5f       	subi	r24, 0xFF	; 255
    2184:	80 93 af 01 	sts	0x01AF, r24
    2188:	b0 cf       	rjmp	.-160    	; 0x20ea <changePass+0x220>
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
		}
		/* save entered char to password if it's a number */
		else if(passIndex != PASSWORD_LENGTH && g_receivedData >= PASS_ALLOWED_START_CHAR && g_receivedData <= PASS_ALLOWED_END_CHAR)
		{
			password[passIndex] = g_receivedData;
    218a:	80 91 ae 01 	lds	r24, 0x01AE
    218e:	e9 2f       	mov	r30, r25
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	eb 54       	subi	r30, 0x4B	; 75
    2194:	fe 4f       	sbci	r31, 0xFE	; 254
    2196:	fa ce       	rjmp	.-524    	; 0x1f8c <changePass+0xc2>

00002198 <app_update>:
 * [Args]:
 * [in]: void
 * [Return]: void
 */
void app_update(void)
{
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <app_update+0x12>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <app_update+0x14>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <app_update+0x16>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	/* reset await, data receive flag, timer finish flag */
	g_awaitOption = AWAIT_NOTHING;
    21b2:	10 92 a7 01 	sts	0x01A7, r1
	g_isDataReceived = FALSE;
    21b6:	10 92 a8 01 	sts	0x01A8, r1
	g_hasMainTimerFinished = FALSE;
    21ba:	10 92 a9 01 	sts	0x01A9, r1

	/* choose the app behavior depending on the current state */
	switch (g_currentState)
    21be:	10 91 aa 01 	lds	r17, 0x01AA
    21c2:	12 30       	cpi	r17, 0x02	; 2
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <app_update+0x30>
    21c6:	aa c0       	rjmp	.+340    	; 0x231c <app_update+0x184>
    21c8:	13 30       	cpi	r17, 0x03	; 3
    21ca:	30 f1       	brcs	.+76     	; 0x2218 <app_update+0x80>
    21cc:	13 30       	cpi	r17, 0x03	; 3
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <app_update+0x3a>
    21d0:	9c c0       	rjmp	.+312    	; 0x230a <app_update+0x172>
    21d2:	14 30       	cpi	r17, 0x04	; 4
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <app_update+0x40>
    21d6:	8a c0       	rjmp	.+276    	; 0x22ec <app_update+0x154>
	default:
		break;
	}

	/* await till reponse is received, timer has finished, await both or no await at all */
	while(
    21d8:	80 91 a7 01 	lds	r24, 0x01A7
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	79 f1       	breq	.+94     	; 0x223e <app_update+0xa6>
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <app_update+0x4e>
    21e4:	d2 c1       	rjmp	.+932    	; 0x258a <app_update+0x3f2>
    21e6:	83 30       	cpi	r24, 0x03	; 3
    21e8:	41 f4       	brne	.+16     	; 0x21fa <app_update+0x62>
    21ea:	80 91 a8 01 	lds	r24, 0x01A8
    21ee:	88 23       	and	r24, r24
    21f0:	e1 f3       	breq	.-8      	; 0x21ea <app_update+0x52>
    21f2:	80 91 a9 01 	lds	r24, 0x01A9
    21f6:	88 23       	and	r24, r24
    21f8:	c1 f3       	breq	.-16     	; 0x21ea <app_update+0x52>
			(g_awaitOption == AWAIT_RESPONSE && !g_isDataReceived) ||
			(g_awaitOption == AWAIT_TIMER && !g_hasMainTimerFinished) ||
			(g_awaitOption == AWAIT_RESPONSE_AND_TIMER && (!g_isDataReceived || !g_hasMainTimerFinished))
	);

}
    21fa:	26 96       	adiw	r28, 0x06	; 6
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	df 90       	pop	r13
    2214:	cf 90       	pop	r12
    2216:	08 95       	ret
	g_awaitOption = AWAIT_NOTHING;
	g_isDataReceived = FALSE;
	g_hasMainTimerFinished = FALSE;

	/* choose the app behavior depending on the current state */
	switch (g_currentState)
    2218:	11 23       	and	r17, r17
    221a:	b1 f0       	breq	.+44     	; 0x2248 <app_update+0xb0>
    221c:	11 30       	cpi	r17, 0x01	; 1
    221e:	e1 f6       	brne	.-72     	; 0x21d8 <app_update+0x40>
 * [in]: void
 * [Return]: void
 */
static void showMainMenu(void)
{
	switch(g_innerState)
    2220:	00 91 ad 01 	lds	r16, 0x01AD
    2224:	00 23       	and	r16, r16
    2226:	09 f0       	breq	.+2      	; 0x222a <app_update+0x92>
    2228:	89 c0       	rjmp	.+274    	; 0x233c <app_update+0x1a4>
	{
	case 0:
		/* show menu and wait for a response */
		UART_sendByteBlocking(GET_MENU_OPTION_CMD);
    222a:	8b e4       	ldi	r24, 0x4B	; 75
		g_passTrials = 0;
		g_innerState ++;
		break;
	case 1:
		/* show "Enter Pass" and wait for response */
		UART_sendByteBlocking(ENTER_PASS_CMD);
    222c:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
		g_awaitOption = AWAIT_RESPONSE;
    2230:	10 93 a7 01 	sts	0x01A7, r17
		g_innerState ++;
    2234:	80 91 ad 01 	lds	r24, 0x01AD
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	80 93 ad 01 	sts	0x01AD, r24
	default:
		break;
	}

	/* await till reponse is received, timer has finished, await both or no await at all */
	while(
    223e:	80 91 a8 01 	lds	r24, 0x01A8
    2242:	88 23       	and	r24, r24
    2244:	e1 f3       	breq	.-8      	; 0x223e <app_update+0xa6>
    2246:	d9 cf       	rjmp	.-78     	; 0x21fa <app_update+0x62>
static void establishConnection(void)
{
	/* store if the user is a first-time user or not */
	uint8_t eepromValue;

	switch(g_innerState)
    2248:	80 91 ad 01 	lds	r24, 0x01AD
    224c:	88 23       	and	r24, r24
    224e:	e9 f0       	breq	.+58     	; 0x228a <app_update+0xf2>
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	11 f6       	brne	.-124    	; 0x21d8 <app_update+0x40>
    2254:	8e 01       	movw	r16, r28
    2256:	0f 5f       	subi	r16, 0xFF	; 255
    2258:	1f 4f       	sbci	r17, 0xFF	; 255

		/* read eeprom to check if first time or not
		 * if first time => set state to CHANGE_PASS_STATE
		 * else set state to MAIN_MENU_STATE
		 */
		while(EEPROM_readByte(FIRST_TIME_CHECK_ADDRESS, &eepromValue) == EEPROM_ERROR);
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	b8 01       	movw	r22, r16
    2260:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <EEPROM_readByte>
    2264:	88 23       	and	r24, r24
    2266:	c9 f3       	breq	.-14     	; 0x225a <app_update+0xc2>

		if(eepromValue == NOT_FIRST_TIME_EEPROM_VAL)
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	85 35       	cpi	r24, 0x55	; 85
    226c:	09 f4       	brne	.+2      	; 0x2270 <app_update+0xd8>
    226e:	2c c1       	rjmp	.+600    	; 0x24c8 <app_update+0x330>
			g_firstTime = FALSE;
			setAppState(MAIN_MENU_STATE);
		}
		else
		{
			g_firstTime = TRUE;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	80 93 ab 01 	sts	0x01AB, r24
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    2276:	80 91 aa 01 	lds	r24, 0x01AA
    227a:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	80 93 aa 01 	sts	0x01AA, r24
		/* compare both passwords */
		if(comparePasswords(pass, rightPass))
		{
			/* go to the previous state if password is true */
			setAppState(g_previousState);
			g_innerState = 0;
    2284:	10 92 ad 01 	sts	0x01AD, r1
    2288:	a7 cf       	rjmp	.-178    	; 0x21d8 <app_update+0x40>
	{
	case 0:
		do
		{
			/* wait till an ack is received */
			UART_sendByteBlocking(ACK_CMD);
    228a:	81 e4       	ldi	r24, 0x41	; 65
    228c:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
			TIMER_DELAY_MS(50);
    2290:	8e ef       	ldi	r24, 0xFE	; 254
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	48 e1       	ldi	r20, 0x18	; 24
    2296:	56 e0       	ldi	r21, 0x06	; 6
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	21 e0       	ldi	r18, 0x01	; 1
    229e:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_delayTicks>

		} while (g_receivedData != ACK_CMD);
    22a2:	80 91 ae 01 	lds	r24, 0x01AE
    22a6:	81 34       	cpi	r24, 0x41	; 65
    22a8:	81 f7       	brne	.-32     	; 0x228a <app_update+0xf2>

		/* show "Door lock system" for some time */
		g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, DEFAULT_MSG_TIME_MS);
    22aa:	84 e8       	ldi	r24, 0x84	; 132
    22ac:	9e e1       	ldi	r25, 0x1E	; 30
    22ae:	a0 e0       	ldi	r26, 0x00	; 0
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	80 93 6b 01 	sts	0x016B, r24
    22b6:	90 93 6c 01 	sts	0x016C, r25
    22ba:	a0 93 6d 01 	sts	0x016D, r26
    22be:	b0 93 6e 01 	sts	0x016E, r27
		TIMER_init(&g_mainTimerConfig);
    22c2:	88 e6       	ldi	r24, 0x68	; 104
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
		TIMER_start(TIMER_0);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
		UART_sendByteBlocking(SHOW_DOOR_LOCK_TEXT_CMD);
    22d0:	82 e4       	ldi	r24, 0x42	; 66
    22d2:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
		g_awaitOption = AWAIT_RESPONSE_AND_TIMER;
    22d6:	83 e0       	ldi	r24, 0x03	; 3
		g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, WARNING_MSG_TIME_MS);
		TIMER_init(&g_mainTimerConfig);
		TIMER_start(TIMER_0);
		BUZZER_on();
		UART_sendByteBlocking(SHOW_ACCESS_DENIED_TEXT_CMD);
		g_awaitOption = AWAIT_TIMER;
    22d8:	80 93 a7 01 	sts	0x01A7, r24
		g_innerState ++;
    22dc:	80 91 ad 01 	lds	r24, 0x01AD
    22e0:	8f 5f       	subi	r24, 0xFF	; 255
    22e2:	80 93 ad 01 	sts	0x01AD, r24
    22e6:	80 91 a7 01 	lds	r24, 0x01A7
    22ea:	7a cf       	rjmp	.-268    	; 0x21e0 <app_update+0x48>
	/* will be removed */
	uint8_t rightPass[PASSWORD_LENGTH];

	static uint8_t pass[PASSWORD_LENGTH];

	switch(g_innerState)
    22ec:	10 91 ad 01 	lds	r17, 0x01AD
    22f0:	12 30       	cpi	r17, 0x02	; 2
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <app_update+0x15e>
    22f4:	7e c0       	rjmp	.+252    	; 0x23f2 <app_update+0x25a>
    22f6:	13 30       	cpi	r17, 0x03	; 3
    22f8:	c0 f5       	brcc	.+112    	; 0x236a <app_update+0x1d2>
    22fa:	11 23       	and	r17, r17
    22fc:	09 f4       	brne	.+2      	; 0x2300 <app_update+0x168>
    22fe:	4d c0       	rjmp	.+154    	; 0x239a <app_update+0x202>
    2300:	11 30       	cpi	r17, 0x01	; 1
    2302:	09 f0       	breq	.+2      	; 0x2306 <app_update+0x16e>
    2304:	69 cf       	rjmp	.-302    	; 0x21d8 <app_update+0x40>
		g_passTrials = 0;
		g_innerState ++;
		break;
	case 1:
		/* show "Enter Pass" and wait for response */
		UART_sendByteBlocking(ENTER_PASS_CMD);
    2306:	8c e4       	ldi	r24, 0x4C	; 76
    2308:	91 cf       	rjmp	.-222    	; 0x222c <app_update+0x94>
		}
		break;

	case OPEN_DOOR_STATE:
		/* open door with auth except if the user is already authorized */
		if(g_previousState == AUTHORIZING_STATE)
    230a:	80 91 ac 01 	lds	r24, 0x01AC
    230e:	84 30       	cpi	r24, 0x04	; 4
    2310:	09 f4       	brne	.+2      	; 0x2314 <app_update+0x17c>
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <app_update+0x1fa>
		{
			openDoor(FALSE);
		}
		else
		{
			openDoor(TRUE);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <openDoor>
    231a:	5e cf       	rjmp	.-324    	; 0x21d8 <app_update+0x40>
		showMainMenu();
		break;

	case CHANGE_PASS_STATE:
		/* change password with auth required if not already authorized, or if first-time user  */
		if(g_firstTime || g_previousState == AUTHORIZING_STATE)
    231c:	80 91 ab 01 	lds	r24, 0x01AB
    2320:	88 23       	and	r24, r24
    2322:	41 f4       	brne	.+16     	; 0x2334 <app_update+0x19c>
    2324:	80 91 ac 01 	lds	r24, 0x01AC
    2328:	84 30       	cpi	r24, 0x04	; 4
    232a:	21 f0       	breq	.+8      	; 0x2334 <app_update+0x19c>
		{
			changePass(FALSE);
		}
		else
		{
			changePass(TRUE);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <changePass>
    2332:	52 cf       	rjmp	.-348    	; 0x21d8 <app_update+0x40>

	case CHANGE_PASS_STATE:
		/* change password with auth required if not already authorized, or if first-time user  */
		if(g_firstTime || g_previousState == AUTHORIZING_STATE)
		{
			changePass(FALSE);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	0e 94 65 0f 	call	0x1eca	; 0x1eca <changePass>
    233a:	4e cf       	rjmp	.-356    	; 0x21d8 <app_update+0x40>
 * [in]: void
 * [Return]: void
 */
static void showMainMenu(void)
{
	switch(g_innerState)
    233c:	01 30       	cpi	r16, 0x01	; 1
    233e:	09 f0       	breq	.+2      	; 0x2342 <app_update+0x1aa>
    2340:	4b cf       	rjmp	.-362    	; 0x21d8 <app_update+0x40>
	case 1:

		/* check the option and send an ack if the command is not defined
		 * to wait for another response
		 */
		if(g_receivedData == OPEN_DOOR_MENU_CHAR)
    2342:	80 91 ae 01 	lds	r24, 0x01AE
    2346:	8b 32       	cpi	r24, 0x2B	; 43
    2348:	09 f4       	brne	.+2      	; 0x234c <app_update+0x1b4>
    234a:	49 c0       	rjmp	.+146    	; 0x23de <app_update+0x246>
		{
			setAppState(OPEN_DOOR_STATE);
			g_innerState = 0;
		}
		else if(g_receivedData == CHANGE_PASS_MENU_CHAR)
    234c:	80 91 ae 01 	lds	r24, 0x01AE
    2350:	8d 32       	cpi	r24, 0x2D	; 45
    2352:	09 f0       	breq	.+2      	; 0x2356 <app_update+0x1be>
    2354:	b3 c0       	rjmp	.+358    	; 0x24bc <app_update+0x324>
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    2356:	00 93 ac 01 	sts	0x01AC, r16
	g_currentState = a_state;
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	80 93 aa 01 	sts	0x01AA, r24
			g_innerState = 0;
		}
		else if(g_receivedData == CHANGE_PASS_MENU_CHAR)
		{
			setAppState(CHANGE_PASS_STATE);
			g_innerState = 0;
    2360:	10 92 ad 01 	sts	0x01AD, r1
    2364:	80 91 a7 01 	lds	r24, 0x01A7
    2368:	3b cf       	rjmp	.-394    	; 0x21e0 <app_update+0x48>
	/* will be removed */
	uint8_t rightPass[PASSWORD_LENGTH];

	static uint8_t pass[PASSWORD_LENGTH];

	switch(g_innerState)
    236a:	14 30       	cpi	r17, 0x04	; 4
    236c:	f1 f0       	breq	.+60     	; 0x23aa <app_update+0x212>
    236e:	14 30       	cpi	r17, 0x04	; 4
    2370:	08 f4       	brcc	.+2      	; 0x2374 <app_update+0x1dc>
    2372:	63 c0       	rjmp	.+198    	; 0x243a <app_update+0x2a2>
    2374:	15 30       	cpi	r17, 0x05	; 5
    2376:	09 f0       	breq	.+2      	; 0x237a <app_update+0x1e2>
    2378:	2f cf       	rjmp	.-418    	; 0x21d8 <app_update+0x40>
		g_innerState ++;
		break;

	case 5:
		/* turn off the buzzer */
		BUZZER_off();
    237a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <BUZZER_off>
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    237e:	80 91 aa 01 	lds	r24, 0x01AA
    2382:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	80 93 aa 01 	sts	0x01AA, r24

	case 5:
		/* turn off the buzzer */
		BUZZER_off();
		setAppState(MAIN_MENU_STATE);
		g_innerState = 0;
    238c:	10 92 ad 01 	sts	0x01AD, r1
    2390:	23 cf       	rjmp	.-442    	; 0x21d8 <app_update+0x40>

	case OPEN_DOOR_STATE:
		/* open door with auth except if the user is already authorized */
		if(g_previousState == AUTHORIZING_STATE)
		{
			openDoor(FALSE);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <openDoor>
    2398:	1f cf       	rjmp	.-450    	; 0x21d8 <app_update+0x40>
	static uint8_t pass[PASSWORD_LENGTH];

	switch(g_innerState)
	{
	case 0:
		g_passTrials = 0;
    239a:	10 92 af 01 	sts	0x01AF, r1
		g_innerState ++;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 ad 01 	sts	0x01AD, r24
    23a4:	80 91 a7 01 	lds	r24, 0x01A7
    23a8:	1b cf       	rjmp	.-458    	; 0x21e0 <app_update+0x48>

		break;

	case 4:
		/* password max trials has reached, turn on buzzer and show "Access Denied" */
		g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, WARNING_MSG_TIME_MS);
    23aa:	8e e0       	ldi	r24, 0x0E	; 14
    23ac:	97 e2       	ldi	r25, 0x27	; 39
    23ae:	a7 e0       	ldi	r26, 0x07	; 7
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	80 93 6b 01 	sts	0x016B, r24
    23b6:	90 93 6c 01 	sts	0x016C, r25
    23ba:	a0 93 6d 01 	sts	0x016D, r26
    23be:	b0 93 6e 01 	sts	0x016E, r27
		TIMER_init(&g_mainTimerConfig);
    23c2:	88 e6       	ldi	r24, 0x68	; 104
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
		TIMER_start(TIMER_0);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
		BUZZER_on();
    23d0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <BUZZER_on>
		UART_sendByteBlocking(SHOW_ACCESS_DENIED_TEXT_CMD);
    23d4:	8f e4       	ldi	r24, 0x4F	; 79
    23d6:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
		g_awaitOption = AWAIT_TIMER;
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	7d cf       	rjmp	.-262    	; 0x22d8 <app_update+0x140>
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    23de:	00 93 ac 01 	sts	0x01AC, r16
	g_currentState = a_state;
    23e2:	83 e0       	ldi	r24, 0x03	; 3
    23e4:	80 93 aa 01 	sts	0x01AA, r24
		 * to wait for another response
		 */
		if(g_receivedData == OPEN_DOOR_MENU_CHAR)
		{
			setAppState(OPEN_DOOR_STATE);
			g_innerState = 0;
    23e8:	10 92 ad 01 	sts	0x01AD, r1
    23ec:	80 91 a7 01 	lds	r24, 0x01A7
    23f0:	f7 ce       	rjmp	.-530    	; 0x21e0 <app_update+0x48>
 */
static boolean readPassword(uint8_t * password)
{
	static uint8_t passIndex = 0, passInnerState = 0;

	switch(passInnerState)
    23f2:	80 91 ba 01 	lds	r24, 0x01BA
    23f6:	88 23       	and	r24, r24
    23f8:	09 f0       	breq	.+2      	; 0x23fc <app_update+0x264>
    23fa:	70 c0       	rjmp	.+224    	; 0x24dc <app_update+0x344>
	{
	case 0:
		/* delete a character from the password */
		if(g_receivedData == PASS_BACKSPACE_CHAR && passIndex != 0)
    23fc:	80 91 ae 01 	lds	r24, 0x01AE
    2400:	8d 32       	cpi	r24, 0x2D	; 45
    2402:	09 f4       	brne	.+2      	; 0x2406 <app_update+0x26e>
    2404:	b6 c0       	rjmp	.+364    	; 0x2572 <app_update+0x3da>
		{
			passIndex --;
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
		}
		/* clear password */
		else if(g_receivedData == PASS_CLEAR_SCREEN_CHAR)
    2406:	80 91 ae 01 	lds	r24, 0x01AE
    240a:	83 36       	cpi	r24, 0x63	; 99
    240c:	09 f4       	brne	.+2      	; 0x2410 <app_update+0x278>
    240e:	ab c0       	rjmp	.+342    	; 0x2566 <app_update+0x3ce>
		{
			passIndex = 0;
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
		}
		/* save entered char to password if it's a number */
		else if(passIndex != PASSWORD_LENGTH && g_receivedData >= PASS_ALLOWED_START_CHAR && g_receivedData <= PASS_ALLOWED_END_CHAR)
    2410:	90 91 bb 01 	lds	r25, 0x01BB
    2414:	95 30       	cpi	r25, 0x05	; 5
    2416:	09 f4       	brne	.+2      	; 0x241a <app_update+0x282>
    2418:	96 c0       	rjmp	.+300    	; 0x2546 <app_update+0x3ae>
    241a:	80 91 ae 01 	lds	r24, 0x01AE
    241e:	80 33       	cpi	r24, 0x30	; 48
    2420:	28 f0       	brcs	.+10     	; 0x242c <app_update+0x294>
    2422:	80 91 ae 01 	lds	r24, 0x01AE
    2426:	8a 33       	cpi	r24, 0x3A	; 58
    2428:	08 f4       	brcc	.+2      	; 0x242c <app_update+0x294>
    242a:	b4 c0       	rjmp	.+360    	; 0x2594 <app_update+0x3fc>
			passInnerState ++;
		}
		/* undefined char, skip it */
		else
		{
			UART_sendByteBlocking(SKIP_PASS_CHAR_CMD);
    242c:	86 e4       	ldi	r24, 0x46	; 70
    242e:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
		}

		/* await next char */
		g_awaitOption = AWAIT_RESPONSE;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	80 93 a7 01 	sts	0x01A7, r24
    2438:	cf ce       	rjmp	.-610    	; 0x21d8 <app_update+0x40>

	case 2:
		/* wait till password is entered */
		if(readPassword(pass))
		{
			g_innerState ++;
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	c8 2e       	mov	r12, r24
    243e:	d1 2c       	mov	r13, r1
    2440:	cc 0e       	add	r12, r28
    2442:	dd 1e       	adc	r13, r29
    2444:	01 e0       	ldi	r16, 0x01	; 1
    2446:	10 e0       	ldi	r17, 0x00	; 0
    2448:	76 01       	movw	r14, r12
	uint8_t passIndex;

	for(passIndex = 0; passIndex < PASSWORD_LENGTH; passIndex ++)
	{
		/* read char by char from the eeprom */
		while(EEPROM_readByte(PASSWORD_EEPROM_START_ADDRESS + passIndex, &password[passIndex]) == EEPROM_ERROR);
    244a:	c8 01       	movw	r24, r16
    244c:	b7 01       	movw	r22, r14
    244e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <EEPROM_readByte>
    2452:	88 23       	and	r24, r24
    2454:	d1 f3       	breq	.-12     	; 0x244a <app_update+0x2b2>
		TIMER_DELAY_MS(20);
    2456:	8e ef       	ldi	r24, 0xFE	; 254
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	4e e6       	ldi	r20, 0x6E	; 110
    245c:	52 e0       	ldi	r21, 0x02	; 2
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	21 e0       	ldi	r18, 0x01	; 1
    2464:	0e 94 ba 07 	call	0xf74	; 0xf74 <TIMER_delayTicks>
    2468:	0f 5f       	subi	r16, 0xFF	; 255
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	08 94       	sec
    246e:	c1 1c       	adc	r12, r1
    2470:	d1 1c       	adc	r13, r1
 */
static void readPassFromEeprom(uint8_t * password)
{
	uint8_t passIndex;

	for(passIndex = 0; passIndex < PASSWORD_LENGTH; passIndex ++)
    2472:	06 30       	cpi	r16, 0x06	; 6
    2474:	11 05       	cpc	r17, r1
    2476:	41 f7       	brne	.-48     	; 0x2448 <app_update+0x2b0>
	uint8_t passIndex;

	/* looping through the passwords and return false when meeting a mismatch, otherwise return true */
	for(passIndex = 0; passIndex < PASSWORD_LENGTH; passIndex ++)
	{
		if(pass1[passIndex] != pass2[passIndex])
    2478:	90 91 bc 01 	lds	r25, 0x01BC
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	98 17       	cp	r25, r24
    2480:	c1 f5       	brne	.+112    	; 0x24f2 <app_update+0x35a>
    2482:	90 91 bd 01 	lds	r25, 0x01BD
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	98 17       	cp	r25, r24
    248a:	99 f5       	brne	.+102    	; 0x24f2 <app_update+0x35a>
    248c:	90 91 be 01 	lds	r25, 0x01BE
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	98 17       	cp	r25, r24
    2494:	71 f5       	brne	.+92     	; 0x24f2 <app_update+0x35a>
    2496:	90 91 bf 01 	lds	r25, 0x01BF
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	98 17       	cp	r25, r24
    249e:	49 f5       	brne	.+82     	; 0x24f2 <app_update+0x35a>
    24a0:	90 91 c0 01 	lds	r25, 0x01C0
    24a4:	8e 81       	ldd	r24, Y+6	; 0x06
    24a6:	98 17       	cp	r25, r24
    24a8:	21 f5       	brne	.+72     	; 0x24f2 <app_update+0x35a>

		/* compare both passwords */
		if(comparePasswords(pass, rightPass))
		{
			/* go to the previous state if password is true */
			setAppState(g_previousState);
    24aa:	90 91 ac 01 	lds	r25, 0x01AC
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    24ae:	80 91 aa 01 	lds	r24, 0x01AA
    24b2:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    24b6:	90 93 aa 01 	sts	0x01AA, r25
    24ba:	e4 ce       	rjmp	.-568    	; 0x2284 <app_update+0xec>
			setAppState(CHANGE_PASS_STATE);
			g_innerState = 0;
		}
		else
		{
			UART_sendByteBlocking(ACK_CMD);
    24bc:	81 e4       	ldi	r24, 0x41	; 65
    24be:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
			g_awaitOption = AWAIT_RESPONSE;
    24c2:	00 93 a7 01 	sts	0x01A7, r16
    24c6:	bb ce       	rjmp	.-650    	; 0x223e <app_update+0xa6>
		 */
		while(EEPROM_readByte(FIRST_TIME_CHECK_ADDRESS, &eepromValue) == EEPROM_ERROR);

		if(eepromValue == NOT_FIRST_TIME_EEPROM_VAL)
		{
			g_firstTime = FALSE;
    24c8:	10 92 ab 01 	sts	0x01AB, r1
 * [in]: void
 * [Return]: void
 */
static void setAppState(EN_AppStates a_state)
{
	g_previousState = g_currentState;
    24cc:	80 91 aa 01 	lds	r24, 0x01AA
    24d0:	80 93 ac 01 	sts	0x01AC, r24
	g_currentState = a_state;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 aa 01 	sts	0x01AA, r24
    24da:	d4 ce       	rjmp	.-600    	; 0x2284 <app_update+0xec>
 */
static boolean readPassword(uint8_t * password)
{
	static uint8_t passIndex = 0, passInnerState = 0;

	switch(passInnerState)
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	09 f0       	breq	.+2      	; 0x24e2 <app_update+0x34a>
    24e0:	7b ce       	rjmp	.-778    	; 0x21d8 <app_update+0x40>

		return FALSE;
		break;

	case 1:
		passInnerState = 0;
    24e2:	10 92 ba 01 	sts	0x01BA, r1

	case 2:
		/* wait till password is entered */
		if(readPassword(pass))
		{
			g_innerState ++;
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	80 93 ad 01 	sts	0x01AD, r24
    24ec:	80 91 a7 01 	lds	r24, 0x01A7
    24f0:	77 ce       	rjmp	.-786    	; 0x21e0 <app_update+0x48>
			g_innerState = 0;
		}
		else
		{
			/* show "password is wrong" and increase the trials counter */
			g_passTrials ++;
    24f2:	80 91 af 01 	lds	r24, 0x01AF
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	80 93 af 01 	sts	0x01AF, r24
			if(g_passTrials < PASSWORD_TRIALS)
    24fc:	83 30       	cpi	r24, 0x03	; 3
    24fe:	30 f0       	brcs	.+12     	; 0x250c <app_update+0x374>
				TIMER_start(TIMER_0);
				g_awaitOption = AWAIT_RESPONSE_AND_TIMER;
			}
			else
			{
				g_innerState ++;
    2500:	80 91 ad 01 	lds	r24, 0x01AD
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	80 93 ad 01 	sts	0x01AD, r24
    250a:	66 ce       	rjmp	.-820    	; 0x21d8 <app_update+0x40>
		{
			/* show "password is wrong" and increase the trials counter */
			g_passTrials ++;
			if(g_passTrials < PASSWORD_TRIALS)
			{
				UART_sendByteBlocking(SHOW_WRONG_PASS_TEXT_CMD);
    250c:	8e e4       	ldi	r24, 0x4E	; 78
    250e:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
				g_innerState = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 ad 01 	sts	0x01AD, r24
				g_mainTimerConfig.ticks = TIME_MS_TO_TICKS(MAIN_TIMER_PRESCALER_NUMBERS, DEFAULT_MSG_TIME_MS);
    2518:	84 e8       	ldi	r24, 0x84	; 132
    251a:	9e e1       	ldi	r25, 0x1E	; 30
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	80 93 6b 01 	sts	0x016B, r24
    2524:	90 93 6c 01 	sts	0x016C, r25
    2528:	a0 93 6d 01 	sts	0x016D, r26
    252c:	b0 93 6e 01 	sts	0x016E, r27
				TIMER_init(&g_mainTimerConfig);
    2530:	88 e6       	ldi	r24, 0x68	; 104
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 a0 0a 	call	0x1540	; 0x1540 <TIMER_init>
				TIMER_start(TIMER_0);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0e 94 68 07 	call	0xed0	; 0xed0 <TIMER_start>
				g_awaitOption = AWAIT_RESPONSE_AND_TIMER;
    253e:	83 e0       	ldi	r24, 0x03	; 3
    2540:	80 93 a7 01 	sts	0x01A7, r24
    2544:	4d ce       	rjmp	.-870    	; 0x21e0 <app_update+0x48>
			password[passIndex] = g_receivedData;
			passIndex ++;
			UART_sendByteBlocking(READ_NEXT_PASS_CHAR_CMD);
		}
		/* submit entered pass */
		else if(passIndex == PASSWORD_LENGTH && g_receivedData == PASS_ENTER_CHAR)
    2546:	80 91 ae 01 	lds	r24, 0x01AE
    254a:	8d 33       	cpi	r24, 0x3D	; 61
    254c:	09 f0       	breq	.+2      	; 0x2550 <app_update+0x3b8>
    254e:	6e cf       	rjmp	.-292    	; 0x242c <app_update+0x294>
		{
			passIndex = 0;
    2550:	10 92 bb 01 	sts	0x01BB, r1
			UART_sendByteBlocking(STOP_RECEIVING_PASS_CMD);
    2554:	8d e4       	ldi	r24, 0x4D	; 77
    2556:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
			passInnerState ++;
    255a:	80 91 ba 01 	lds	r24, 0x01BA
    255e:	8f 5f       	subi	r24, 0xFF	; 255
    2560:	80 93 ba 01 	sts	0x01BA, r24
    2564:	66 cf       	rjmp	.-308    	; 0x2432 <app_update+0x29a>
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
		}
		/* clear password */
		else if(g_receivedData == PASS_CLEAR_SCREEN_CHAR)
		{
			passIndex = 0;
    2566:	10 92 bb 01 	sts	0x01BB, r1
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
    256a:	88 e4       	ldi	r24, 0x48	; 72
    256c:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    2570:	60 cf       	rjmp	.-320    	; 0x2432 <app_update+0x29a>

	switch(passInnerState)
	{
	case 0:
		/* delete a character from the password */
		if(g_receivedData == PASS_BACKSPACE_CHAR && passIndex != 0)
    2572:	80 91 bb 01 	lds	r24, 0x01BB
    2576:	88 23       	and	r24, r24
    2578:	09 f4       	brne	.+2      	; 0x257c <app_update+0x3e4>
    257a:	45 cf       	rjmp	.-374    	; 0x2406 <app_update+0x26e>
		{
			passIndex --;
    257c:	81 50       	subi	r24, 0x01	; 1
    257e:	80 93 bb 01 	sts	0x01BB, r24
			UART_sendByteBlocking(BACKSPACE_PASS_CHAR_CMD);
    2582:	87 e4       	ldi	r24, 0x47	; 71
    2584:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    2588:	54 cf       	rjmp	.-344    	; 0x2432 <app_update+0x29a>
	default:
		break;
	}

	/* await till reponse is received, timer has finished, await both or no await at all */
	while(
    258a:	80 91 a9 01 	lds	r24, 0x01A9
    258e:	88 23       	and	r24, r24
    2590:	e1 f3       	breq	.-8      	; 0x258a <app_update+0x3f2>
    2592:	33 ce       	rjmp	.-922    	; 0x21fa <app_update+0x62>
			UART_sendByteBlocking(CLEAR_ALL_PASS_CHARS_CMD);
		}
		/* save entered char to password if it's a number */
		else if(passIndex != PASSWORD_LENGTH && g_receivedData >= PASS_ALLOWED_START_CHAR && g_receivedData <= PASS_ALLOWED_END_CHAR)
		{
			password[passIndex] = g_receivedData;
    2594:	80 91 ae 01 	lds	r24, 0x01AE
    2598:	e9 2f       	mov	r30, r25
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	e4 54       	subi	r30, 0x44	; 68
    259e:	fe 4f       	sbci	r31, 0xFE	; 254
    25a0:	80 83       	st	Z, r24
			passIndex ++;
    25a2:	9f 5f       	subi	r25, 0xFF	; 255
    25a4:	90 93 bb 01 	sts	0x01BB, r25
			UART_sendByteBlocking(READ_NEXT_PASS_CHAR_CMD);
    25a8:	85 e4       	ldi	r24, 0x45	; 69
    25aa:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_sendByteBlocking>
    25ae:	41 cf       	rjmp	.-382    	; 0x2432 <app_update+0x29a>

000025b0 <main>:
 * [Return]: int
 */
int main(void) {

	/* init the app */
	app_init();
    25b0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <app_init>

	while(1)
	{
		/* update the app */
		app_update();
    25b4:	0e 94 cc 10 	call	0x2198	; 0x2198 <app_update>
    25b8:	fd cf       	rjmp	.-6      	; 0x25b4 <main+0x4>

000025ba <__mulsi3>:
    25ba:	62 9f       	mul	r22, r18
    25bc:	d0 01       	movw	r26, r0
    25be:	73 9f       	mul	r23, r19
    25c0:	f0 01       	movw	r30, r0
    25c2:	82 9f       	mul	r24, r18
    25c4:	e0 0d       	add	r30, r0
    25c6:	f1 1d       	adc	r31, r1
    25c8:	64 9f       	mul	r22, r20
    25ca:	e0 0d       	add	r30, r0
    25cc:	f1 1d       	adc	r31, r1
    25ce:	92 9f       	mul	r25, r18
    25d0:	f0 0d       	add	r31, r0
    25d2:	83 9f       	mul	r24, r19
    25d4:	f0 0d       	add	r31, r0
    25d6:	74 9f       	mul	r23, r20
    25d8:	f0 0d       	add	r31, r0
    25da:	65 9f       	mul	r22, r21
    25dc:	f0 0d       	add	r31, r0
    25de:	99 27       	eor	r25, r25
    25e0:	72 9f       	mul	r23, r18
    25e2:	b0 0d       	add	r27, r0
    25e4:	e1 1d       	adc	r30, r1
    25e6:	f9 1f       	adc	r31, r25
    25e8:	63 9f       	mul	r22, r19
    25ea:	b0 0d       	add	r27, r0
    25ec:	e1 1d       	adc	r30, r1
    25ee:	f9 1f       	adc	r31, r25
    25f0:	bd 01       	movw	r22, r26
    25f2:	cf 01       	movw	r24, r30
    25f4:	11 24       	eor	r1, r1
    25f6:	08 95       	ret

000025f8 <__udivmodsi4>:
    25f8:	a1 e2       	ldi	r26, 0x21	; 33
    25fa:	1a 2e       	mov	r1, r26
    25fc:	aa 1b       	sub	r26, r26
    25fe:	bb 1b       	sub	r27, r27
    2600:	fd 01       	movw	r30, r26
    2602:	0d c0       	rjmp	.+26     	; 0x261e <__udivmodsi4_ep>

00002604 <__udivmodsi4_loop>:
    2604:	aa 1f       	adc	r26, r26
    2606:	bb 1f       	adc	r27, r27
    2608:	ee 1f       	adc	r30, r30
    260a:	ff 1f       	adc	r31, r31
    260c:	a2 17       	cp	r26, r18
    260e:	b3 07       	cpc	r27, r19
    2610:	e4 07       	cpc	r30, r20
    2612:	f5 07       	cpc	r31, r21
    2614:	20 f0       	brcs	.+8      	; 0x261e <__udivmodsi4_ep>
    2616:	a2 1b       	sub	r26, r18
    2618:	b3 0b       	sbc	r27, r19
    261a:	e4 0b       	sbc	r30, r20
    261c:	f5 0b       	sbc	r31, r21

0000261e <__udivmodsi4_ep>:
    261e:	66 1f       	adc	r22, r22
    2620:	77 1f       	adc	r23, r23
    2622:	88 1f       	adc	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	1a 94       	dec	r1
    2628:	69 f7       	brne	.-38     	; 0x2604 <__udivmodsi4_loop>
    262a:	60 95       	com	r22
    262c:	70 95       	com	r23
    262e:	80 95       	com	r24
    2630:	90 95       	com	r25
    2632:	9b 01       	movw	r18, r22
    2634:	ac 01       	movw	r20, r24
    2636:	bd 01       	movw	r22, r26
    2638:	cf 01       	movw	r24, r30
    263a:	08 95       	ret

0000263c <__prologue_saves__>:
    263c:	2f 92       	push	r2
    263e:	3f 92       	push	r3
    2640:	4f 92       	push	r4
    2642:	5f 92       	push	r5
    2644:	6f 92       	push	r6
    2646:	7f 92       	push	r7
    2648:	8f 92       	push	r8
    264a:	9f 92       	push	r9
    264c:	af 92       	push	r10
    264e:	bf 92       	push	r11
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	ca 1b       	sub	r28, r26
    2666:	db 0b       	sbc	r29, r27
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	09 94       	ijmp

00002674 <__epilogue_restores__>:
    2674:	2a 88       	ldd	r2, Y+18	; 0x12
    2676:	39 88       	ldd	r3, Y+17	; 0x11
    2678:	48 88       	ldd	r4, Y+16	; 0x10
    267a:	5f 84       	ldd	r5, Y+15	; 0x0f
    267c:	6e 84       	ldd	r6, Y+14	; 0x0e
    267e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2680:	8c 84       	ldd	r8, Y+12	; 0x0c
    2682:	9b 84       	ldd	r9, Y+11	; 0x0b
    2684:	aa 84       	ldd	r10, Y+10	; 0x0a
    2686:	b9 84       	ldd	r11, Y+9	; 0x09
    2688:	c8 84       	ldd	r12, Y+8	; 0x08
    268a:	df 80       	ldd	r13, Y+7	; 0x07
    268c:	ee 80       	ldd	r14, Y+6	; 0x06
    268e:	fd 80       	ldd	r15, Y+5	; 0x05
    2690:	0c 81       	ldd	r16, Y+4	; 0x04
    2692:	1b 81       	ldd	r17, Y+3	; 0x03
    2694:	aa 81       	ldd	r26, Y+2	; 0x02
    2696:	b9 81       	ldd	r27, Y+1	; 0x01
    2698:	ce 0f       	add	r28, r30
    269a:	d1 1d       	adc	r29, r1
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	ed 01       	movw	r28, r26
    26a8:	08 95       	ret

000026aa <_exit>:
    26aa:	f8 94       	cli

000026ac <__stop_program>:
    26ac:	ff cf       	rjmp	.-2      	; 0x26ac <__stop_program>
